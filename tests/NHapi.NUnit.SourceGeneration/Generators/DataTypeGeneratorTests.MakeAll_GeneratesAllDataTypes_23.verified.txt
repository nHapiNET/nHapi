{
  basepath\\NHapi.Model.V23\\Datatype\\AD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 AD (address) data type.  Consists of the following components: </p><ol>
/// <li>street address (ST)</li>
/// <li>other designation (ST)</li>
/// <li>city (ST)</li>
/// <li>state or province (ST)</li>
/// <li>zip or postal code (ST)</li>
/// <li>country (ID)</li>
/// <li>address type (ID)</li>
/// <li>other geographic designation (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class AD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a AD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public AD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a AD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public AD(IMessage message, string description) : base(message, description){
		data = new IType[8];
		data[0] = new ST(message,"Street address");
		data[1] = new ST(message,"Other designation");
		data[2] = new ST(message,"City");
		data[3] = new ST(message,"State or province");
		data[4] = new ST(message,"Zip or postal code");
		data[5] = new ID(message, 0,"Country");
		data[6] = new ID(message, 0,"Address type");
		data[7] = new ST(message,"Other geographic designation");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 8 element AD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns street address (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other designation (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns city (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST City {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns state or province (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOrProvince {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns zip or postal code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ZipOrPostalCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns country (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Country {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns address type (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other geographic designation (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherGeographicDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CD (Channel Definition) data type.  Consists of the following components: </p><ol>
/// <li>channel identifier (CM_WVI)</li>
/// <li>electrode names (CM_CD_ELECTRODE)</li>
/// <li>channel sensitivity/units (CM_CSU)</li>
/// <li>calibration parameters (CM_CCP)</li>
/// <li>sampling frequency (NM)</li>
/// <li>minimum/maximum data values (CM_MDV)</li>
/// </ol>
///</summary>
[Serializable]
public class CD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CD(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new CM_WVI(message,"Channel identifier");
		data[1] = new CM_CD_ELECTRODE(message,"Electrode names");
		data[2] = new CM_CSU(message,"Channel sensitivity/units");
		data[3] = new CM_CCP(message,"Calibration parameters");
		data[4] = new NM(message,"Sampling frequency");
		data[5] = new CM_MDV(message,"Minimum/maximum data values");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns channel identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_WVI ChannelIdentifier {
get{
	   CM_WVI ret = null;
	   try {
	      ret = (CM_WVI)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns electrode names (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_CD_ELECTRODE ElectrodeNames {
get{
	   CM_CD_ELECTRODE ret = null;
	   try {
	      ret = (CM_CD_ELECTRODE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns channel sensitivity/units (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_CSU ChannelSensitivityUnits {
get{
	   CM_CSU ret = null;
	   try {
	      ret = (CM_CSU)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns calibration parameters (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_CCP CalibrationParameters {
get{
	   CM_CCP ret = null;
	   try {
	      ret = (CM_CCP)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sampling frequency (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SamplingFrequency {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns minimum/maximum data values (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_MDV MinimumMaximumDataValues {
get{
	   CM_MDV ret = null;
	   try {
	      ret = (CM_MDV)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CE.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CE (coded element) data type.  Consists of the following components: </p><ol>
/// <li>identifier (ID)</li>
/// <li>text (ST)</li>
/// <li>name of coding system (ST)</li>
/// <li>alternate identifier (ID)</li>
/// <li>alternate text (ST)</li>
/// <li>name of alternate coding system (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CE : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CE.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CE(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CE.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CE(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new ID(message, 0,"Identifier");
		data[1] = new ST(message,"Text");
		data[2] = new ST(message,"Name of coding system");
		data[3] = new ID(message, 0,"Alternate identifier");
		data[4] = new ST(message,"Alternate text");
		data[5] = new ST(message,"Name of alternate coding system");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CE composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Identifier {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns text (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Text {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name of coding system (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST NameOfCodingSystem {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns alternate identifier (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AlternateIdentifier {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns alternate text (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name of alternate coding system (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST NameOfAlternateCodingSystem {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CF.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CF (coded element with formatted values) data type.  Consists of the following components: </p><ol>
/// <li>identifier (ID)</li>
/// <li>formatted text (FT)</li>
/// <li>name of coding system (ST)</li>
/// <li>alternate identifier (ID)</li>
/// <li>alternate formatted text (FT)</li>
/// <li>name of alternate coding system (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CF : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CF.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CF(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CF.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CF(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new ID(message, 0,"Identifier");
		data[1] = new FT(message,"Formatted text");
		data[2] = new ST(message,"Name of coding system");
		data[3] = new ID(message, 0,"Alternate identifier");
		data[4] = new FT(message,"Alternate formatted text");
		data[5] = new ST(message,"Name of alternate coding system");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CF composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Identifier {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns formatted text (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FT FormattedText {
get{
	   FT ret = null;
	   try {
	      ret = (FT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name of coding system (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST NameOfCodingSystem {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns alternate identifier (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AlternateIdentifier {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns alternate formatted text (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FT AlternateFormattedText {
get{
	   FT ret = null;
	   try {
	      ret = (FT)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name of alternate coding system (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST NameOfAlternateCodingSystem {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CK.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CK (composite ID with check digit) data type.  Consists of the following components: </p><ol>
/// <li>ID number (NM) (NM)</li>
/// <li>check digit (ST)</li>
/// <li>code identifying the check digit scheme employed (ID)</li>
/// <li>assigning authority (HD)</li>
/// </ol>
///</summary>
[Serializable]
public class CK : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CK.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CK(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CK.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CK(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new NM(message,"ID number (NM)");
		data[1] = new ST(message,"Check digit");
		data[2] = new ID(message, 0,"Code identifying the check digit scheme employed");
		data[3] = new HD(message,"Assigning authority");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CK composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID number (NM) (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM IDNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns check digit (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns code identifying the check digit scheme employed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CodeIdentifyingTheCheckDigitSchemeEmployed {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning authority (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_ABS_RANGE.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_ABS_RANGE (absolute range) data type.  Consists of the following components: </p><ol>
/// <li>Range (CM_RANGE)</li>
/// <li>Numeric Change (NM)</li>
/// <li>Percent per Change (NM)</li>
/// <li>Days (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_ABS_RANGE : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_ABS_RANGE.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_ABS_RANGE(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_ABS_RANGE.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_ABS_RANGE(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new CM_RANGE(message,"Range");
		data[1] = new NM(message,"Numeric Change");
		data[2] = new NM(message,"Percent per Change");
		data[3] = new NM(message,"Days");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CM_ABS_RANGE composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_RANGE Range {
get{
	   CM_RANGE ret = null;
	   try {
	      ret = (CM_RANGE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Numeric Change (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumericChange {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Percent per Change (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PercentPerChange {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Days (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Days {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_AUI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_AUI (authorization information) data type.  Consists of the following components: </p><ol>
/// <li>authorization number (ST)</li>
/// <li>date (TS)</li>
/// <li>source (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_AUI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_AUI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_AUI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_AUI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_AUI(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"Authorization number");
		data[1] = new TS(message,"Date");
		data[2] = new ST(message,"Source");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_AUI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns authorization number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AuthorizationNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS Date {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns source (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Source {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_CCD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_CCD (charge time) data type.  Consists of the following components: </p><ol>
/// <li>when to charge code (ID)</li>
/// <li>date/time (TS)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_CCD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_CCD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_CCD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_CCD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_CCD(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ID(message, 0,"When to charge code");
		data[1] = new TS(message,"Date/time");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_CCD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns when to charge code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID WhenToChargeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns date/time (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS DateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_DDI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_DDI (daily deductible) data type.  Consists of the following components: </p><ol>
/// <li>delay days (NM)</li>
/// <li>amount (NM)</li>
/// <li>number of days (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_DDI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_DDI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_DDI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_DDI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_DDI(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new NM(message,"Delay days");
		data[1] = new NM(message,"Amount");
		data[2] = new NM(message,"Number of days");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_DDI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns delay days (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM DelayDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns amount (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Amount {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns number of days (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumberOfDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_DIN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_DIN (activation date) data type.  Consists of the following components: </p><ol>
/// <li>date (TS)</li>
/// <li>institution name (CE)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_DIN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_DIN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_DIN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_DIN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_DIN(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new TS(message,"Date");
		data[1] = new CE(message,"Institution name");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_DIN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns date (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS Date {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns institution name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE InstitutionName {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_DLD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_DLD (discharge location) data type.  Consists of the following components: </p><ol>
/// <li>discharge location (ID)</li>
/// <li>effective date (TS)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_DLD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_DLD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_DLD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_DLD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_DLD(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ID(message, 0,"Discharge location");
		data[1] = new TS(message,"Effective date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_DLD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns discharge location (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID DischargeLocation {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns effective date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS EffectiveDate {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_DLT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_DLT (delta check) data type.  Consists of the following components: </p><ol>
/// <li>Range (CM_RANGE)</li>
/// <li>numeric threshold (NM)</li>
/// <li>change (ST)</li>
/// <li>length of time-days (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_DLT : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_DLT.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_DLT(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_DLT.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_DLT(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new CM_RANGE(message,"Range");
		data[1] = new NM(message,"Numeric threshold");
		data[2] = new ST(message,"Change");
		data[3] = new NM(message,"Length of time-days");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CM_DLT composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_RANGE Range {
get{
	   CM_RANGE ret = null;
	   try {
	      ret = (CM_RANGE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns numeric threshold (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumericThreshold {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns change (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Change {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns length of time-days (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM LengthOfTimeDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_DTN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_DTN (Day Type and Number) data type.  Consists of the following components: </p><ol>
/// <li>day type (IS)</li>
/// <li>number of days (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_DTN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_DTN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_DTN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_DTN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_DTN(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Day type");
		data[1] = new NM(message,"Number of days");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_DTN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns day type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS DayType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns number of days (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumberOfDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_EIP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_EIP (parent order) data type.  Consists of the following components: </p><ol>
/// <li>parent's placer order number (EI)</li>
/// <li>parent's filler order number (EI)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_EIP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_EIP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_EIP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_EIP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_EIP(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new EI(message,"Parent's placer order number");
		data[1] = new EI(message,"Parent's filler order number");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_EIP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns parent's placer order number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI ParentSPlacerOrderNumber {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns parent's filler order number (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI ParentSFillerOrderNumber {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_ELD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_ELD (error) data type.  Consists of the following components: </p><ol>
/// <li>segment ID (ST)</li>
/// <li>sequence (NM)</li>
/// <li>field position (NM)</li>
/// <li>code identifying error (CE)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_ELD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_ELD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_ELD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_ELD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_ELD(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Segment ID");
		data[1] = new NM(message,"Sequence");
		data[2] = new NM(message,"Field position");
		data[3] = new CE(message,"Code identifying error");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CM_ELD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns segment ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SegmentID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sequence (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sequence {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns field position (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM FieldPosition {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns code identifying error (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE CodeIdentifyingError {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_LA1.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_LA1 (Location with address information) data type.  Consists of the following components: </p><ol>
/// <li>point of care (ST) (ST)</li>
/// <li>room (IS)</li>
/// <li>bed (IS)</li>
/// <li>facility (HD) (HD)</li>
/// <li>location status (IS)</li>
/// <li>person location type (IS)</li>
/// <li>building (IS)</li>
/// <li>floor (ST)</li>
/// <li>street address (ST)</li>
/// <li>other designation (ST)</li>
/// <li>city (ST)</li>
/// <li>state or province (ST)</li>
/// <li>zip or postal code (ST)</li>
/// <li>country (ID)</li>
/// <li>address type (ID)</li>
/// <li>other geographic designation (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_LA1 : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_LA1.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_LA1(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_LA1.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_LA1(IMessage message, string description) : base(message, description){
		data = new IType[16];
		data[0] = new ST(message,"Point of care (ST)");
		data[1] = new IS(message, 0,"Room");
		data[2] = new IS(message, 0,"Bed");
		data[3] = new HD(message,"Facility (HD)");
		data[4] = new IS(message, 0,"Location status");
		data[5] = new IS(message, 0,"Person location type");
		data[6] = new IS(message, 0,"Building");
		data[7] = new ST(message,"Floor");
		data[8] = new ST(message,"Street address");
		data[9] = new ST(message,"Other designation");
		data[10] = new ST(message,"City");
		data[11] = new ST(message,"State or province");
		data[12] = new ST(message,"Zip or postal code");
		data[13] = new ID(message, 0,"Country");
		data[14] = new ID(message, 0,"Address type");
		data[15] = new ST(message,"Other geographic designation");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 16 element CM_LA1 composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns point of care (ST) (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PointOfCare {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns room (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Room {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns bed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Bed {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns facility (HD) (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns location status (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns person location type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PersonLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns building (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Building {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns floor (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Floor {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns street address (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other designation (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns city (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST City {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns state or province (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOrProvince {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns zip or postal code (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ZipOrPostalCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns country (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Country {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns address type (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other geographic designation (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherGeographicDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_MOC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_MOC (Charge To Practise) data type.  Consists of the following components: </p><ol>
/// <li>dollar amount (MO)</li>
/// <li>charge code (CE)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_MOC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_MOC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_MOC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_MOC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_MOC(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new MO(message,"Dollar amount");
		data[1] = new CE(message,"Charge code");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_MOC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns dollar amount (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MO DollarAmount {
get{
	   MO ret = null;
	   try {
	      ret = (MO)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns charge code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE ChargeCode {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_MSG.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_MSG (Message Type) data type.  Consists of the following components: </p><ol>
/// <li>message type (ID)</li>
/// <li>trigger event (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_MSG : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_MSG.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_MSG(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_MSG.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_MSG(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ID(message, 0,"Message type");
		data[1] = new ID(message, 0,"Trigger event");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_MSG composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns message type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID MessageType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns trigger event (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TriggerEvent {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_NDL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_NDL (observing practitioner) data type.  Consists of the following components: </p><ol>
/// <li>name (CN)</li>
/// <li>start date/time (TS)</li>
/// <li>end date/time (TS)</li>
/// <li>point of care (IS) (IS)</li>
/// <li>room (IS)</li>
/// <li>bed (IS)</li>
/// <li>facility (HD) (HD)</li>
/// <li>location status (IS)</li>
/// <li>person location type (IS)</li>
/// <li>building (IS)</li>
/// <li>floor (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_NDL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_NDL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_NDL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_NDL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_NDL(IMessage message, string description) : base(message, description){
		data = new IType[11];
		data[0] = new CN(message,"Name");
		data[1] = new TS(message,"Start date/time");
		data[2] = new TS(message,"End date/time");
		data[3] = new IS(message, 0,"Point of care (IS)");
		data[4] = new IS(message, 0,"Room");
		data[5] = new IS(message, 0,"Bed");
		data[6] = new HD(message,"Facility (HD)");
		data[7] = new IS(message, 0,"Location status");
		data[8] = new IS(message, 0,"Person location type");
		data[9] = new IS(message, 0,"Building");
		data[10] = new ST(message,"Floor");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 11 element CM_NDL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CN Name {
get{
	   CN ret = null;
	   try {
	      ret = (CN)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns start date/time (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS StartDateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns end date/time (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS EndDateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns point of care (IS) (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PointOfCare {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns room (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Room {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns bed (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Bed {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns facility (HD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns location status (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns person location type (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PersonLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns building (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Building {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns floor (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Floor {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_OCD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_OCD (occurence) data type.  Consists of the following components: </p><ol>
/// <li>occurrence code (CE)</li>
/// <li>occurrence date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_OCD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_OCD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_OCD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_OCD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_OCD(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CE(message,"Occurrence code");
		data[1] = new DT(message,"Occurrence date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_OCD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns occurrence code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE OccurrenceCode {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns occurrence date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT OccurrenceDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_OSP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_OSP (occurence span) data type.  Consists of the following components: </p><ol>
/// <li>occurrence span code (CE)</li>
/// <li>occurrence span start date (DT)</li>
/// <li>occurrence span stop date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_OSP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_OSP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_OSP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_OSP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_OSP(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new CE(message,"Occurrence span code");
		data[1] = new DT(message,"Occurrence span start date");
		data[2] = new DT(message,"Occurrence span stop date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_OSP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns occurrence span code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE OccurrenceSpanCode {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns occurrence span start date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT OccurrenceSpanStartDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns occurrence span stop date (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT OccurrenceSpanStopDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PCF.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PCF (Pre-certification required) data type.  Consists of the following components: </p><ol>
/// <li>pre-certification patient type (IS)</li>
/// <li>pre-certification required (ID)</li>
/// <li>pre-certification windwow (TS)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PCF : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PCF.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PCF(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PCF.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PCF(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new IS(message, 0,"Pre-certification patient type");
		data[1] = new ID(message, 0,"Pre-certification required");
		data[2] = new TS(message,"Pre-certification windwow");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_PCF composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns pre-certification patient type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PreCertificationPatientType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns pre-certification required (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID PreCertificationRequired {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns pre-certification windwow (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS PreCertificationWindwow {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PEN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PEN (penalty) data type.  Consists of the following components: </p><ol>
/// <li>penalty type (IS)</li>
/// <li>penalty amount (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PEN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PEN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PEN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PEN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PEN(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Penalty type");
		data[1] = new NM(message,"Penalty amount");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_PEN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns penalty type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PenaltyType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns penalty amount (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PenaltyAmount {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PI (person identifier) data type.  Consists of the following components: </p><ol>
/// <li>ID number (ST) (ST)</li>
/// <li>type of ID number (IS) (IS)</li>
/// <li>other qualifying info (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PI(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"ID number (ST)");
		data[1] = new IS(message, 0,"Type of ID number (IS)");
		data[2] = new ST(message,"Other qualifying info");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_PI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID number (ST) (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns type of ID number (IS) (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS TypeOfIDNumber {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other qualifying info (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherQualifyingInfo {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PIP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PIP (Privileges) data type.  Consists of the following components: </p><ol>
/// <li>privilege (CE)</li>
/// <li>privilege class (CE)</li>
/// <li>expiration date (DT)</li>
/// <li>activation date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PIP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PIP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PIP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PIP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PIP(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new CE(message,"Privilege");
		data[1] = new CE(message,"Privilege class");
		data[2] = new DT(message,"Expiration date");
		data[3] = new DT(message,"Activation date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CM_PIP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns privilege (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE Privilege {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns privilege class (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE PrivilegeClass {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns expiration date (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns activation date (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ActivationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PLN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PLN (Practitioner ID Numbers) data type.  Consists of the following components: </p><ol>
/// <li>ID number (ST)</li>
/// <li>type of ID number (IS) (IS)</li>
/// <li>state/other qualifying info (ST)</li>
/// <li>expiration date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PLN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PLN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PLN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PLN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PLN(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"ID number");
		data[1] = new IS(message, 0,"Type of ID number (IS)");
		data[2] = new ST(message,"State/other qualifying info");
		data[3] = new DT(message,"Expiration date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CM_PLN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns type of ID number (IS) (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS TypeOfIDNumber {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns state/other qualifying info (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOtherQualifyingInfo {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns expiration date (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PRL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PRL (parent result link) data type.  Consists of the following components: </p><ol>
/// <li>OBX-3 observation identifier of parent result (CE)</li>
/// <li>OBX-4 sub-ID of parent result (ST)</li>
/// <li>part of OBX-5 observation result from parent (TX)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PRL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PRL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PRL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PRL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PRL(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new CE(message,"OBX-3 observation identifier of parent result");
		data[1] = new ST(message,"OBX-4 sub-ID of parent result");
		data[2] = new TX(message,"Part of OBX-5 observation result from parent");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_PRL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns OBX-3 observation identifier of parent result (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE OBX3ObservationIdentifierOfParentResult {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns OBX-4 sub-ID of parent result (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OBX4SubIDOfParentResult {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns part of OBX-5 observation result from parent (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX PartOfOBX5ObservationResultFromParent {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_PTA.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_PTA (Policy Type) data type.  Consists of the following components: </p><ol>
/// <li>policy type (IS)</li>
/// <li>amount class (IS)</li>
/// <li>amount (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_PTA : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_PTA.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_PTA(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_PTA.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_PTA(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new IS(message, 147,"Policy type");
		data[1] = new IS(message, 193,"Amount class");
		data[2] = new NM(message,"Amount");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_PTA composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns policy type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PolicyType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns amount class (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS AmountClass {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns amount (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Amount {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_RANGE.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_RANGE (Wertebereich) data type.  Consists of the following components: </p><ol>
/// <li>Low Value (CE)</li>
/// <li>High Value (CE)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_RANGE : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_RANGE.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_RANGE(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_RANGE.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_RANGE(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CE(message,"Low Value");
		data[1] = new CE(message,"High Value");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_RANGE composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Low Value (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE LowValue {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns High Value (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE HighValue {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_RFR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_RFR (reference range) data type.  Consists of the following components: </p><ol>
/// <li>reference range (CM_RANGE)</li>
/// <li>sex (IS)</li>
/// <li>age range (CM_RANGE)</li>
/// <li>age gestation (CM_RANGE)</li>
/// <li>species (TX)</li>
/// <li>race/subspecies (ST)</li>
/// <li>conditions (TX)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_RFR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_RFR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_RFR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_RFR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_RFR(IMessage message, string description) : base(message, description){
		data = new IType[7];
		data[0] = new CM_RANGE(message,"Reference range");
		data[1] = new IS(message, 0,"Sex");
		data[2] = new CM_RANGE(message,"Age range");
		data[3] = new CM_RANGE(message,"Age gestation");
		data[4] = new TX(message,"Species");
		data[5] = new ST(message,"Race/subspecies");
		data[6] = new TX(message,"Conditions");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 7 element CM_RFR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns reference range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_RANGE ReferenceRange {
get{
	   CM_RANGE ret = null;
	   try {
	      ret = (CM_RANGE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sex (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Sex {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns age range (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_RANGE AgeRange {
get{
	   CM_RANGE ret = null;
	   try {
	      ret = (CM_RANGE)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns age gestation (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_RANGE AgeGestation {
get{
	   CM_RANGE ret = null;
	   try {
	      ret = (CM_RANGE)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns species (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Species {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns race/subspecies (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST RaceSubspecies {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns conditions (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Conditions {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_RI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_RI (interval) data type.  Consists of the following components: </p><ol>
/// <li>repeat pattern (IS)</li>
/// <li>explicit time interval (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_RI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_RI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_RI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_RI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_RI(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Repeat pattern");
		data[1] = new ST(message,"Explicit time interval");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_RI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns repeat pattern (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS RepeatPattern {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns explicit time interval (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ExplicitTimeInterval {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_RMC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_RMC (Room Coverage) data type.  Consists of the following components: </p><ol>
/// <li>room type (IS)</li>
/// <li>amount type (IS)</li>
/// <li>coverage amount (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_RMC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_RMC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_RMC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_RMC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_RMC(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new IS(message, 145,"Room type");
		data[1] = new IS(message, 0,"Amount type");
		data[2] = new NM(message,"Coverage amount");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CM_RMC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns room type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS RoomType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns amount type (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS AmountType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns coverage amount (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM CoverageAmount {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_SPD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_SPD (Specialty) data type.  Consists of the following components: </p><ol>
/// <li>specialty name (ST)</li>
/// <li>governing board (ST)</li>
/// <li>eligible or certified (ID)</li>
/// <li>date of certification (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_SPD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_SPD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_SPD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_SPD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_SPD(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Specialty name");
		data[1] = new ST(message,"Governing board");
		data[2] = new ID(message, 0,"Eligible or certified");
		data[3] = new DT(message,"Date of certification");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element CM_SPD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns specialty name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SpecialtyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns governing board (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GoverningBoard {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns eligible or certified (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID EligibleOrCertified {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns date of certification (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT DateOfCertification {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_SPS.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_SPS (specimen source) data type.  Consists of the following components: </p><ol>
/// <li>specimen source name or code (CE)</li>
/// <li>additives (TX)</li>
/// <li>freetext (TX)</li>
/// <li>body site (CE)</li>
/// <li>site modifier (CE)</li>
/// <li>collection modifier method code (CE)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_SPS : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_SPS.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_SPS(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_SPS.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_SPS(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new CE(message,"Specimen source name or code");
		data[1] = new TX(message,"Additives");
		data[2] = new TX(message,"Freetext");
		data[3] = new CE(message,"Body site");
		data[4] = new CE(message,"Site modifier");
		data[5] = new CE(message,"Collection modifier method code");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CM_SPS composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns specimen source name or code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE SpecimenSourceNameOrCode {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns additives (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Additives {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns freetext (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Freetext {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns body site (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE BodySite {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns site modifier (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE SiteModifier {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns collection modifier method code (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE CollectionModifierMethodCode {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_UVC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_UVC (Value code and amount) data type.  Consists of the following components: </p><ol>
/// <li>value code (IS)</li>
/// <li>value amount (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_UVC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_UVC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_UVC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_UVC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_UVC(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Value code");
		data[1] = new NM(message,"Value amount");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_UVC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns value code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS ValueCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns value amount (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ValueAmount {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_VR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_VR (value qualifier) data type.  Consists of the following components: </p><ol>
/// <li>first data code value (ST)</li>
/// <li>Last data code calue (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_VR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_VR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_VR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_VR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_VR(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"First data code value");
		data[1] = new ST(message,"Last data code calue");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_VR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns first data code value (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FirstDataCodeValue {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Last data code calue (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST LastDataCodeCalue {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CM_WVI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CM_WVI (channel identifier) data type.  Consists of the following components: </p><ol>
/// <li>Channel Number (NM)</li>
/// <li>Channel Name (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CM_WVI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CM_WVI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CM_WVI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CM_WVI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CM_WVI(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Channel Number");
		data[1] = new ST(message,"Channel Name");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CM_WVI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Channel Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ChannelName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CN (Composite ID number and name (2.8.7)) data type.  Consists of the following components: </p><ol>
/// <li>ID number (ST) (ST)</li>
/// <li>family name (ST)</li>
/// <li>given name (ST)</li>
/// <li>middle initial or name (ST)</li>
/// <li>suffix (e.g., JR or III) (ST)</li>
/// <li>prefix (e.g., DR) (ST)</li>
/// <li>degree (e.g., MD) (ST)</li>
/// <li>source table (ID)</li>
/// <li>assigning authority (HD)</li>
/// </ol>
///</summary>
[Serializable]
public class CN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CN(IMessage message, string description) : base(message, description){
		data = new IType[9];
		data[0] = new ST(message,"ID number (ST)");
		data[1] = new ST(message,"Family name");
		data[2] = new ST(message,"Given name");
		data[3] = new ST(message,"Middle initial or name");
		data[4] = new ST(message,"Suffix (e.g., JR or III)");
		data[5] = new ST(message,"Prefix (e.g., DR)");
		data[6] = new ST(message,"Degree (e.g., MD)");
		data[7] = new ID(message, 0,"Source table");
		data[8] = new HD(message,"Assigning authority");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 9 element CN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID number (ST) (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns family name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FamilyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns given name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns middle initial or name (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST MiddleInitialOrName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns suffix (e.g., JR or III) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns prefix (e.g., DR) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns degree (e.g., MD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DegreeEgMD {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns source table (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID SourceTable {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning authority (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CP (Composite Price) data type.  Consists of the following components: </p><ol>
/// <li>price (MO)</li>
/// <li>price type (ID)</li>
/// <li>from value (NM)</li>
/// <li>to value (NM)</li>
/// <li>range units (CE)</li>
/// <li>range type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class CP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CP(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new MO(message,"Price");
		data[1] = new ID(message, 0,"Price type");
		data[2] = new NM(message,"From value");
		data[3] = new NM(message,"To value");
		data[4] = new CE(message,"Range units");
		data[5] = new ID(message, 0,"Range type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns price (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MO Price {
get{
	   MO ret = null;
	   try {
	      ret = (MO)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns price type (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID PriceType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns from value (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM FromValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns to value (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ToValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns range units (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE RangeUnits {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns range type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID RangeType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CQ.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CQ (composite quantity with units) data type.  Consists of the following components: </p><ol>
/// <li>quantity (NM)</li>
/// <li>units (CE)</li>
/// </ol>
///</summary>
[Serializable]
public class CQ : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CQ.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CQ(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CQ.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CQ(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Quantity");
		data[1] = new CE(message,"Units");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CQ composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns quantity (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Quantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns units (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CE Units {
get{
	   CE ret = null;
	   try {
	      ret = (CE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\CX.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 CX (extended composite ID with check digit) data type.  Consists of the following components: </p><ol>
/// <li>ID (ST)</li>
/// <li>check digit (ST)</li>
/// <li>code identifying the check digit scheme employed (ID)</li>
/// <li>assigning authority (HD)</li>
/// <li>identifier type code (IS)</li>
/// <li>assigning facility (HD)</li>
/// </ol>
///</summary>
[Serializable]
public class CX : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CX.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CX(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CX.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CX(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new ST(message,"ID");
		data[1] = new ST(message,"Check digit");
		data[2] = new ID(message, 0,"Code identifying the check digit scheme employed");
		data[3] = new HD(message,"Assigning authority");
		data[4] = new IS(message, 203,"Identifier type code");
		data[5] = new HD(message,"Assigning facility");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CX composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns check digit (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns code identifying the check digit scheme employed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CodeIdentifyingTheCheckDigitSchemeEmployed {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning authority (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns identifier type code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS IdentifierTypeCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning facility (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\DLN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 DLN (driver's license number) data type.  Consists of the following components: </p><ol>
/// <li>Driver's License Number (ST)</li>
/// <li>Issuing State, province, country (IS)</li>
/// <li>expiration date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class DLN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DLN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DLN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DLN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DLN(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"Driver's License Number");
		data[1] = new IS(message, 0,"Issuing State, province, country");
		data[2] = new DT(message,"Expiration date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element DLN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Driver's License Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DriverSLicenseNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Issuing State, province, country (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS IssuingStateProvinceCountry {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns expiration date (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\DR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 DR (Date Time Range) data type.  Consists of the following components: </p><ol>
/// <li>range start date/time (TS)</li>
/// <li>range end date/time (TS)</li>
/// </ol>
///</summary>
[Serializable]
public class DR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DR(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new TS(message,"Range start date/time");
		data[1] = new TS(message,"Range end date/time");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element DR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns range start date/time (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS RangeStartDateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns range end date/time (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS RangeEndDateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\ED.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 ED (encapsulated data) data type.  Consists of the following components: </p><ol>
/// <li>source application (HD)</li>
/// <li>type of data (ID)</li>
/// <li>data subtype (ID)</li>
/// <li>encoding (ID)</li>
/// <li>data (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class ED : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a ED.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public ED(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a ED.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public ED(IMessage message, string description) : base(message, description){
		data = new IType[5];
		data[0] = new HD(message,"Source application");
		data[1] = new ID(message, 0,"Type of data");
		data[2] = new ID(message, 0,"Data subtype");
		data[3] = new ID(message, 0,"Encoding");
		data[4] = new ST(message,"Data");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 5 element ED composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns source application (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD SourceApplication {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns type of data (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TypeOfData {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns data subtype (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID DataSubtype {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns encoding (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Encoding {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns data (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Data {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\EI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 EI (entity identifier) data type.  Consists of the following components: </p><ol>
/// <li>entity identifier (ST)</li>
/// <li>namespace ID (IS)</li>
/// <li>universal ID (ST)</li>
/// <li>universal ID type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class EI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a EI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public EI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a EI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public EI(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Entity identifier");
		data[1] = new IS(message, 0,"Namespace ID");
		data[2] = new ST(message,"Universal ID");
		data[3] = new ID(message, 0,"Universal ID type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element EI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns entity identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST EntityIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns namespace ID (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS NamespaceID {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns universal ID (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UniversalID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns universal ID type (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID UniversalIDType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\FC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 FC (financial class) data type.  Consists of the following components: </p><ol>
/// <li>Financial Class (IS)</li>
/// <li>Effective Date (TS)</li>
/// </ol>
///</summary>
[Serializable]
public class FC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a FC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public FC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a FC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public FC(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Financial Class");
		data[1] = new TS(message,"Effective Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element FC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Financial Class (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS FinancialClass {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS EffectiveDate {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\FT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V23.Datatype
{
///<summary>
///Represents the HL7 FT (formatted text data) datatype.  A FT contains a single String value.
///</summary>
[Serializable]
public class FT : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized FT.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public FT(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized FT.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public FT(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.3"
	///</summary>
	public string getVersion() {
	    return "2.3";
}
}
},
  basepath\\NHapi.Model.V23\\Datatype\\HD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 HD (hierarchic designator) data type.  Consists of the following components: </p><ol>
/// <li>namespace ID (IS)</li>
/// <li>universal ID (ST)</li>
/// <li>universal ID type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class HD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a HD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public HD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a HD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public HD(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new IS(message, 0,"Namespace ID");
		data[1] = new ST(message,"Universal ID");
		data[2] = new ID(message, 0,"Universal ID type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element HD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns namespace ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS NamespaceID {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns universal ID (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UniversalID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns universal ID type (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID UniversalIDType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\JCC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 JCC (Job Code Class) data type.  Consists of the following components: </p><ol>
/// <li>job code (IS)</li>
/// <li>job class (IS)</li>
/// </ol>
///</summary>
[Serializable]
public class JCC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a JCC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public JCC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a JCC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public JCC(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Job code");
		data[1] = new IS(message, 0,"Job class");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element JCC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns job code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS JobCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns job class (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS JobClass {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\MA.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 MA (multiplexed array) data type.  Consists of the following components: </p><ol>
/// <li>sample 1 from channel 1 (NM)</li>
/// <li>sample 1 from channel 2 (NM)</li>
/// <li>sample 1 from channel 3 (NM)</li>
/// <li>sample 2 from channel 1 (NM)</li>
/// <li>sample 2 from channel 2 (NM)</li>
/// <li>sample 2 from channel 3 (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class MA : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MA.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MA(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MA.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MA(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new NM(message,"Sample 1 from channel 1");
		data[1] = new NM(message,"Sample 1 from channel 2");
		data[2] = new NM(message,"Sample 1 from channel 3");
		data[3] = new NM(message,"Sample 2 from channel 1");
		data[4] = new NM(message,"Sample 2 from channel 2");
		data[5] = new NM(message,"Sample 2 from channel 3");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element MA composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns sample 1 from channel 1 (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sample1FromChannel1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sample 1 from channel 2 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sample1FromChannel2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sample 1 from channel 3 (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sample1FromChannel3 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sample 2 from channel 1 (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sample2FromChannel1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sample 2 from channel 2 (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sample2FromChannel2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns sample 2 from channel 3 (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Sample2FromChannel3 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\MO.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 MO (money) data type.  Consists of the following components: </p><ol>
/// <li>quantity (NM)</li>
/// <li>denomination (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class MO : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MO.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MO(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MO.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MO(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Quantity");
		data[1] = new ID(message, 0,"Denomination");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element MO composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns quantity (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Quantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns denomination (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Denomination {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\NA.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 NA (numeric array) data type.  Consists of the following components: </p><ol>
/// <li>value1 (NM)</li>
/// <li>value2 (NM)</li>
/// <li>value3 (NM)</li>
/// <li>value4 (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class NA : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a NA.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public NA(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a NA.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public NA(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new NM(message,"Value1");
		data[1] = new NM(message,"Value2");
		data[2] = new NM(message,"Value3");
		data[3] = new NM(message,"Value4");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element NA composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns value1 (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns value2 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns value3 (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value3 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns value4 (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value4 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\NM.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V23.Datatype
{
///<summary>
///Represents the HL7 NM (numeric) datatype.  A NM contains a single String value.
///</summary>
[Serializable]
public class NM : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized NM.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public NM(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized NM.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public NM(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.3"
	///</summary>
	public string getVersion() {
	    return "2.3";
}
}
},
  basepath\\NHapi.Model.V23\\Datatype\\PL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 PL (person location) data type.  Consists of the following components: </p><ol>
/// <li>point of care (ID) (ID)</li>
/// <li>room (IS)</li>
/// <li>bed (IS)</li>
/// <li>facility (HD) (HD)</li>
/// <li>location status (IS)</li>
/// <li>person location type (IS)</li>
/// <li>building (IS)</li>
/// <li>floor (ST)</li>
/// <li>Location description (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class PL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PL(IMessage message, string description) : base(message, description){
		data = new IType[9];
		data[0] = new ID(message, 0,"Point of care (ID)");
		data[1] = new IS(message, 0,"Room");
		data[2] = new IS(message, 0,"Bed");
		data[3] = new HD(message,"Facility (HD)");
		data[4] = new IS(message, 0,"Location status");
		data[5] = new IS(message, 0,"Person location type");
		data[6] = new IS(message, 0,"Building");
		data[7] = new ST(message,"Floor");
		data[8] = new ST(message,"Location description");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 9 element PL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns point of care (ID) (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID PointOfCare {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns room (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Room {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns bed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Bed {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns facility (HD) (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns location status (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns person location type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PersonLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns building (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Building {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns floor (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Floor {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Location description (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST LocationDescription {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\PPN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 PPN (performing person time stamp) data type.  Consists of the following components: </p><ol>
/// <li>ID number (ST)</li>
/// <li>family name (ST)</li>
/// <li>given name (ST)</li>
/// <li>middle initial or name (ST)</li>
/// <li>suffix (e.g., JR or III) (ST)</li>
/// <li>prefix (e.g., DR) (ST)</li>
/// <li>degree (e.g., MD) (ST)</li>
/// <li>source table (ID)</li>
/// <li>assigning authority (HD)</li>
/// <li>name type code (ID)</li>
/// <li>identifier check digit (ST)</li>
/// <li>code identifying the check digit scheme employed (ID)</li>
/// <li>identifier type code (IS)</li>
/// <li>assigning facility (HD)</li>
/// <li>Date/Time Action Performed (TS)</li>
/// </ol>
///</summary>
[Serializable]
public class PPN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PPN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PPN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PPN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PPN(IMessage message, string description) : base(message, description){
		data = new IType[15];
		data[0] = new ST(message,"ID number");
		data[1] = new ST(message,"Family name");
		data[2] = new ST(message,"Given name");
		data[3] = new ST(message,"Middle initial or name");
		data[4] = new ST(message,"Suffix (e.g., JR or III)");
		data[5] = new ST(message,"Prefix (e.g., DR)");
		data[6] = new ST(message,"Degree (e.g., MD)");
		data[7] = new ID(message, 0,"Source table");
		data[8] = new HD(message,"Assigning authority");
		data[9] = new ID(message, 0,"Name type code");
		data[10] = new ST(message,"Identifier check digit");
		data[11] = new ID(message, 0,"Code identifying the check digit scheme employed");
		data[12] = new IS(message, 0,"Identifier type code");
		data[13] = new HD(message,"Assigning facility");
		data[14] = new TS(message,"Date/Time Action Performed");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 15 element PPN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns family name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FamilyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns given name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns middle initial or name (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST MiddleInitialOrName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns suffix (e.g., JR or III) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns prefix (e.g., DR) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns degree (e.g., MD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DegreeEgMD {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns source table (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID SourceTable {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning authority (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name type code (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns identifier check digit (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IdentifierCheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns code identifying the check digit scheme employed (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CodeIdentifyingTheCheckDigitSchemeEmployed {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns identifier type code (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS IdentifierTypeCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning facility (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Date/Time Action Performed (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS DateTimeActionPerformed {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\PT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 PT (processing type) data type.  Consists of the following components: </p><ol>
/// <li>processing ID (ST)</li>
/// <li>processing mode (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class PT : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PT.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PT(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PT.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PT(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"Processing ID");
		data[1] = new ST(message,"Processing mode");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element PT composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns processing ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ProcessingID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns processing mode (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ProcessingMode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\QIP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 QIP (query input parameter list) data type.  Consists of the following components: </p><ol>
/// <li>field name (ST)</li>
/// <li>value1andvalue2andvalue3 (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class QIP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a QIP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public QIP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a QIP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public QIP(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"Field name");
		data[1] = new ST(message,"Value1&value2&value3");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element QIP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns field name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FieldName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns value1andvalue2andvalue3 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Value1Value2Value3 {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\QSC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 QSC (query selection criteria) data type.  Consists of the following components: </p><ol>
/// <li>name of field (ST)</li>
/// <li>relational operator (ID)</li>
/// <li>Value (ST)</li>
/// <li>relational conjunction (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class QSC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a QSC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public QSC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a QSC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public QSC(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Name of field");
		data[1] = new ID(message, 0,"Relational operator");
		data[2] = new ST(message,"Value");
		data[3] = new ID(message, 0,"Relational conjunction");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element QSC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns name of field (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST NameOfField {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns relational operator (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID RelationalOperator {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Value {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns relational conjunction (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID RelationalConjunction {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\RCD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 RCD (row column definition) data type.  Consists of the following components: </p><ol>
/// <li>HL7 item number (ST)</li>
/// <li>HL7 date type (ST)</li>
/// <li>maximum column width (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class RCD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RCD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RCD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RCD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RCD(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"HL7 item number");
		data[1] = new ST(message,"HL7 date type");
		data[2] = new NM(message,"Maximum column width");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element RCD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns HL7 item number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST HL7ItemNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns HL7 date type (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST HL7DateType {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns maximum column width (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM MaximumColumnWidth {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\RI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 RI (repeat interval) data type.  Consists of the following components: </p><ol>
/// <li>repeat pattern (IS)</li>
/// <li>explicit time interval (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class RI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RI(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Repeat pattern");
		data[1] = new ST(message,"Explicit time interval");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element RI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns repeat pattern (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS RepeatPattern {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns explicit time interval (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ExplicitTimeInterval {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\RP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 RP (reference pointer) data type.  Consists of the following components: </p><ol>
/// <li>pointer (ST)</li>
/// <li>application ID (HD)</li>
/// <li>type of data (ID)</li>
/// <li>subtype (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class RP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RP(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Pointer");
		data[1] = new HD(message,"Application ID");
		data[2] = new ID(message, 0,"Type of data");
		data[3] = new ID(message, 0,"Subtype");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element RP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns pointer (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Pointer {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns application ID (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD ApplicationID {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns type of data (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TypeOfData {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns subtype (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Subtype {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\SCV.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 SCV (scheduling class value pair) data type.  Consists of the following components: </p><ol>
/// <li>parameter class (IS)</li>
/// <li>parameter value (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class SCV : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SCV.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SCV(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SCV.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SCV(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new IS(message, 0,"Parameter class");
		data[1] = new ST(message,"Parameter value");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element SCV composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns parameter class (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS ParameterClass {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns parameter value (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ParameterValue {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\SI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V23.Datatype
{
///<summary>
///Represents the HL7 SI (sequence ID) datatype.  A SI contains a single String value.
///</summary>
[Serializable]
public class SI : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized SI.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SI(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized SI.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public SI(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.3"
	///</summary>
	public string getVersion() {
	    return "2.3";
}
}
},
  basepath\\NHapi.Model.V23\\Datatype\\SN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 SN (structured numeric) data type.  Consists of the following components: </p><ol>
/// <li>comparator (ST)</li>
/// <li>num1 (NM)</li>
/// <li>separator or suffix (ST)</li>
/// <li>num2 (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class SN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SN(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Comparator");
		data[1] = new NM(message,"Num1");
		data[2] = new ST(message,"Separator or suffix");
		data[3] = new NM(message,"Num2");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element SN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns comparator (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Comparator {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns num1 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Num1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns separator or suffix (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SeparatorOrSuffix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns num2 (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Num2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\ST.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V23.Datatype
{
///<summary>
///Represents the HL7 ST (string data) datatype.  A ST contains a single String value.
///</summary>
[Serializable]
public class ST : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized ST.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public ST(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized ST.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public ST(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.3"
	///</summary>
	public string getVersion() {
	    return "2.3";
}
}
},
  basepath\\NHapi.Model.V23\\Datatype\\TN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V23.Datatype
{
///<summary>
///Represents the HL7 TN (telephone number) datatype.  A TN contains a single String value.
///</summary>
[Serializable]
public class TN : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized TN.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public TN(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized TN.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public TN(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.3"
	///</summary>
	public string getVersion() {
	    return "2.3";
}
}
},
  basepath\\NHapi.Model.V23\\Datatype\\TQ.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 TQ (timing quantity) data type.  Consists of the following components: </p><ol>
/// <li>quantity (CQ)</li>
/// <li>interval (CM_RI)</li>
/// <li>duration (ST)</li>
/// <li>start date/time (TS)</li>
/// <li>end date/time (TS)</li>
/// <li>priority (ST)</li>
/// <li>condition (ST)</li>
/// <li>text (TX) (TX)</li>
/// <li>conjunction (ST)</li>
/// <li>order sequencing (CM_OSD)</li>
/// </ol>
///</summary>
[Serializable]
public class TQ : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a TQ.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public TQ(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a TQ.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public TQ(IMessage message, string description) : base(message, description){
		data = new IType[10];
		data[0] = new CQ(message,"Quantity");
		data[1] = new CM_RI(message,"Interval");
		data[2] = new ST(message,"Duration");
		data[3] = new TS(message,"Start date/time");
		data[4] = new TS(message,"End date/time");
		data[5] = new ST(message,"Priority");
		data[6] = new ST(message,"Condition");
		data[7] = new TX(message,"Text (TX)");
		data[8] = new ST(message,"Conjunction");
		data[9] = new CM_OSD(message,"Order sequencing");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 10 element TQ composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns quantity (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CQ Quantity {
get{
	   CQ ret = null;
	   try {
	      ret = (CQ)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns interval (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_RI Interval {
get{
	   CM_RI ret = null;
	   try {
	      ret = (CM_RI)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns duration (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Duration {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns start date/time (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS StartDateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns end date/time (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TS EndDateTime {
get{
	   TS ret = null;
	   try {
	      ret = (TS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns priority (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Priority {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns condition (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Condition {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns text (TX) (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Text {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns conjunction (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Conjunction {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns order sequencing (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CM_OSD OrderSequencing {
get{
	   CM_OSD ret = null;
	   try {
	      ret = (CM_OSD)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\TS.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 TS (time stamp) data type.  Consists of the following components: </p><ol>
/// <li>time of an event (TSComponentOne)</li>
/// <li>degree of precision (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class TS : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a TS.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public TS(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a TS.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public TS(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new TSComponentOne(message,"Time of an event");
		data[1] = new ST(message,"Degree of precision");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element TS composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns time of an event (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TSComponentOne TimeOfAnEvent {
get{
	   TSComponentOne ret = null;
	   try {
	      ret = (TSComponentOne)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns degree of precision (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DegreeOfPrecision {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\TX.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V23.Datatype
{
///<summary>
///Represents the HL7 TX (text data) datatype.  A TX contains a single String value.
///</summary>
[Serializable]
public class TX : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized TX.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public TX(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized TX.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public TX(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.3"
	///</summary>
	public string getVersion() {
	    return "2.3";
}
}
},
  basepath\\NHapi.Model.V23\\Datatype\\VH.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 VH (visiting hours) data type.  Consists of the following components: </p><ol>
/// <li>start day range (ID)</li>
/// <li>end day range (ID)</li>
/// <li>start hour range (TM)</li>
/// <li>end hour range (TM)</li>
/// </ol>
///</summary>
[Serializable]
public class VH : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a VH.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public VH(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a VH.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public VH(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ID(message, 0,"Start day range");
		data[1] = new ID(message, 0,"End day range");
		data[2] = new TM(message,"Start hour range");
		data[3] = new TM(message,"End hour range");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element VH composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns start day range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID StartDayRange {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns end day range (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID EndDayRange {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns start hour range (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TM StartHourRange {
get{
	   TM ret = null;
	   try {
	      ret = (TM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns end hour range (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TM EndHourRange {
get{
	   TM ret = null;
	   try {
	      ret = (TM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\XAD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 XAD (extended address) data type.  Consists of the following components: </p><ol>
/// <li>street address (ST)</li>
/// <li>other designation (ST)</li>
/// <li>city (ST)</li>
/// <li>state or province (ST)</li>
/// <li>zip or postal code (ST)</li>
/// <li>country (ID)</li>
/// <li>address type (ID)</li>
/// <li>other geographic designation (ST)</li>
/// <li>county/parish code (IS)</li>
/// <li>census tract (IS)</li>
/// </ol>
///</summary>
[Serializable]
public class XAD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XAD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XAD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XAD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XAD(IMessage message, string description) : base(message, description){
		data = new IType[10];
		data[0] = new ST(message,"Street address");
		data[1] = new ST(message,"Other designation");
		data[2] = new ST(message,"City");
		data[3] = new ST(message,"State or province");
		data[4] = new ST(message,"Zip or postal code");
		data[5] = new ID(message, 0,"Country");
		data[6] = new ID(message, 0,"Address type");
		data[7] = new ST(message,"Other geographic designation");
		data[8] = new IS(message, 0,"County/parish code");
		data[9] = new IS(message, 0,"Census tract");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 10 element XAD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns street address (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other designation (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns city (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST City {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns state or province (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOrProvince {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns zip or postal code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ZipOrPostalCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns country (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Country {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns address type (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns other geographic designation (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherGeographicDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns county/parish code (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS CountyParishCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns census tract (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS CensusTract {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\XCN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 XCN (Extended Composite ID number and name (2.8.46)) data type.  Consists of the following components: </p><ol>
/// <li>ID number (ST) (ST)</li>
/// <li>family name (ST)</li>
/// <li>given name (ST)</li>
/// <li>middle initial or name (ST)</li>
/// <li>suffix (e.g., JR or III) (ST)</li>
/// <li>prefix (e.g., DR) (ST)</li>
/// <li>degree (e.g., MD) (ST)</li>
/// <li>source table (ID)</li>
/// <li>assigning authority (HD)</li>
/// <li>name type (ID)</li>
/// <li>identifier check digit (ST)</li>
/// <li>code identifying the check digit scheme employed (ID)</li>
/// <li>identifier type code (IS)</li>
/// <li>assigning facility ID (HD)</li>
/// </ol>
///</summary>
[Serializable]
public class XCN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XCN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XCN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XCN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XCN(IMessage message, string description) : base(message, description){
		data = new IType[14];
		data[0] = new ST(message,"ID number (ST)");
		data[1] = new ST(message,"Family name");
		data[2] = new ST(message,"Given name");
		data[3] = new ST(message,"Middle initial or name");
		data[4] = new ST(message,"Suffix (e.g., JR or III)");
		data[5] = new ST(message,"Prefix (e.g., DR)");
		data[6] = new ST(message,"Degree (e.g., MD)");
		data[7] = new ID(message, 0,"Source table");
		data[8] = new HD(message,"Assigning authority");
		data[9] = new ID(message, 0,"Name type");
		data[10] = new ST(message,"Identifier check digit");
		data[11] = new ID(message, 0,"Code identifying the check digit scheme employed");
		data[12] = new IS(message, 0,"Identifier type code");
		data[13] = new HD(message,"Assigning facility ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 14 element XCN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID number (ST) (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns family name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FamilyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns given name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns middle initial or name (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST MiddleInitialOrName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns suffix (e.g., JR or III) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns prefix (e.g., DR) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns degree (e.g., MD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DegreeEgMD {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns source table (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID SourceTable {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning authority (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name type (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns identifier check digit (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IdentifierCheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns code identifying the check digit scheme employed (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CodeIdentifyingTheCheckDigitSchemeEmployed {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns identifier type code (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS IdentifierTypeCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning facility ID (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacilityID {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\XON.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 XON (Extended Composite Name and ID for organizations (2.8.47)) data type.  Consists of the following components: </p><ol>
/// <li>organization name (ST)</li>
/// <li>organization name type code (IS)</li>
/// <li>ID number (NM) (NM)</li>
/// <li>check digit (ST)</li>
/// <li>code identifying the check digit scheme employed (ID)</li>
/// <li>assigning authority (HD)</li>
/// <li>identifier type code (IS)</li>
/// <li>assigning facility ID (HD)</li>
/// </ol>
///</summary>
[Serializable]
public class XON : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XON.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XON(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XON.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XON(IMessage message, string description) : base(message, description){
		data = new IType[8];
		data[0] = new ST(message,"Organization name");
		data[1] = new IS(message, 0,"Organization name type code");
		data[2] = new NM(message,"ID number (NM)");
		data[3] = new ST(message,"Check digit");
		data[4] = new ID(message, 0,"Code identifying the check digit scheme employed");
		data[5] = new HD(message,"Assigning authority");
		data[6] = new IS(message, 0,"Identifier type code");
		data[7] = new HD(message,"Assigning facility ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 8 element XON composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns organization name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OrganizationName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns organization name type code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS OrganizationNameTypeCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns ID number (NM) (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM IDNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns check digit (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns code identifying the check digit scheme employed (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CodeIdentifyingTheCheckDigitSchemeEmployed {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning authority (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns identifier type code (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS IdentifierTypeCode {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns assigning facility ID (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacilityID {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\XPN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 XPN (extended person name) data type.  Consists of the following components: </p><ol>
/// <li>family name (ST)</li>
/// <li>given name (ST)</li>
/// <li>middle initial or name (ST)</li>
/// <li>suffix (e.g., JR or III) (ST)</li>
/// <li>prefix (e.g., DR) (ST)</li>
/// <li>degree (e.g., MD) (ST)</li>
/// <li>name type code (ID)</li>
/// <li>Name Representation code (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class XPN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XPN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XPN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XPN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XPN(IMessage message, string description) : base(message, description){
		data = new IType[8];
		data[0] = new ST(message,"Family name");
		data[1] = new ST(message,"Given name");
		data[2] = new ST(message,"Middle initial or name");
		data[3] = new ST(message,"Suffix (e.g., JR or III)");
		data[4] = new ST(message,"Prefix (e.g., DR)");
		data[5] = new ST(message,"Degree (e.g., MD)");
		data[6] = new ID(message, 0,"Name type code");
		data[7] = new ID(message, 0,"Name Representation code");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 8 element XPN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns family name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FamilyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns given name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns middle initial or name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST MiddleInitialOrName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns suffix (e.g., JR or III) (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns prefix (e.g., DR) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns degree (e.g., MD) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DegreeEgMD {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns name type code (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Representation code (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameRepresentationCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V23\\Datatype\\XTN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V23.Datatype
{

///<summary>
/// <p>The HL7 XTN (extended telecommunication number) data type.  Consists of the following components: </p><ol>
/// <li>[(999)] 999-9999 [X99999][C any text] (TN)</li>
/// <li>telecommunication use code (ID)</li>
/// <li>telecommunication equipment type (ID) (ID)</li>
/// <li>Email address (ST)</li>
/// <li>Country Code (NM)</li>
/// <li>Area/city code (NM)</li>
/// <li>Phone number (NM)</li>
/// <li>Extension (NM)</li>
/// <li>any text (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class XTN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XTN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XTN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XTN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XTN(IMessage message, string description) : base(message, description){
		data = new IType[9];
		data[0] = new TN(message,"[(999)] 999-9999 [X99999][C any text]");
		data[1] = new ID(message, 0,"Telecommunication use code");
		data[2] = new ID(message, 0,"Telecommunication equipment type (ID)");
		data[3] = new ST(message,"Email address");
		data[4] = new NM(message,"Country Code");
		data[5] = new NM(message,"Area/city code");
		data[6] = new NM(message,"Phone number");
		data[7] = new NM(message,"Extension");
		data[8] = new ST(message,"Any text");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 9 element XTN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns [(999)] 999-9999 [X99999][C any text] (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TN Get9999999X99999CAnyText {
get{
	   TN ret = null;
	   try {
	      ret = (TN)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns telecommunication use code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TelecommunicationUseCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns telecommunication equipment type (ID) (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TelecommunicationEquipmentType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Email address (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST EmailAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Country Code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM CountryCode {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Area/city code (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM AreaCityCode {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Phone number (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PhoneNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Extension (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Extension {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns any text (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AnyText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}}
}