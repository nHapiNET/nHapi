{
  basepath\\NHapi.Model.V27\\Segment\\ABS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ABS message segment. 
/// This segment has the following fields:<ol>
///<li>ABS-1: Discharge Care Provider (XCN)</li>
///<li>ABS-2: Transfer Medical Service Code (CWE)</li>
///<li>ABS-3: Severity of Illness Code (CWE)</li>
///<li>ABS-4: Date/Time of Attestation (DTM)</li>
///<li>ABS-5: Attested By (XCN)</li>
///<li>ABS-6: Triage Code (CWE)</li>
///<li>ABS-7: Abstract Completion Date/Time (DTM)</li>
///<li>ABS-8: Abstracted By (XCN)</li>
///<li>ABS-9: Case Category Code (CWE)</li>
///<li>ABS-10: Caesarian Section Indicator (ID)</li>
///<li>ABS-11: Gestation Category Code (CWE)</li>
///<li>ABS-12: Gestation Period - Weeks (NM)</li>
///<li>ABS-13: Newborn Code (CWE)</li>
///<li>ABS-14: Stillborn Indicator (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ABS : AbstractSegment  {

  /**
   * Creates a ABS (Abstract) segment object that belongs to the given 
   * message.  
   */
	public ABS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Discharge Care Provider");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transfer Medical Service Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Severity of Illness Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of Attestation");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Attested By");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Triage Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Abstract Completion Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Abstracted By");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Case Category Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Caesarian Section Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Gestation Category Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Gestation Period - Weeks");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Newborn Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Stillborn Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Discharge Care Provider(ABS-1).
	///</summary>
	public XCN DischargeCareProvider
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transfer Medical Service Code(ABS-2).
	///</summary>
	public CWE TransferMedicalServiceCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Severity of Illness Code(ABS-3).
	///</summary>
	public CWE SeverityOfIllnessCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of Attestation(ABS-4).
	///</summary>
	public DTM DateTimeOfAttestation
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Attested By(ABS-5).
	///</summary>
	public XCN AttestedBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Triage Code(ABS-6).
	///</summary>
	public CWE TriageCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Abstract Completion Date/Time(ABS-7).
	///</summary>
	public DTM AbstractCompletionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Abstracted By(ABS-8).
	///</summary>
	public XCN AbstractedBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Case Category Code(ABS-9).
	///</summary>
	public CWE CaseCategoryCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Caesarian Section Indicator(ABS-10).
	///</summary>
	public ID CaesarianSectionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Gestation Category Code(ABS-11).
	///</summary>
	public CWE GestationCategoryCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Gestation Period - Weeks(ABS-12).
	///</summary>
	public NM GestationPeriodWeeks
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Newborn Code(ABS-13).
	///</summary>
	public CWE NewbornCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Stillborn Indicator(ABS-14).
	///</summary>
	public ID StillbornIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ACC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ACC message segment. 
/// This segment has the following fields:<ol>
///<li>ACC-1: Accident Date/Time (DTM)</li>
///<li>ACC-2: Accident Code (CWE)</li>
///<li>ACC-3: Accident Location (ST)</li>
///<li>ACC-4: Auto Accident State (CWE)</li>
///<li>ACC-5: Accident Job Related Indicator (ID)</li>
///<li>ACC-6: Accident Death Indicator (ID)</li>
///<li>ACC-7: Entered By (XCN)</li>
///<li>ACC-8: Accident Description (ST)</li>
///<li>ACC-9: Brought In By (ST)</li>
///<li>ACC-10: Police Notified Indicator (ID)</li>
///<li>ACC-11: Accident Address (XAD)</li>
///<li>ACC-12: Degree of patient liability (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ACC : AbstractSegment  {

  /**
   * Creates a ACC (Accident) segment object that belongs to the given 
   * message.  
   */
	public ACC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Accident Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Accident Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Accident Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Auto Accident State");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Accident Job Related Indicator");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Accident Death Indicator");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Entered By");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Accident Description");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Brought In By");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Police Notified Indicator");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Accident Address");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Degree of patient liability");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Accident Date/Time(ACC-1).
	///</summary>
	public DTM AccidentDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accident Code(ACC-2).
	///</summary>
	public CWE AccidentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accident Location(ACC-3).
	///</summary>
	public ST AccidentLocation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Auto Accident State(ACC-4).
	///</summary>
	public CWE AutoAccidentState
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accident Job Related Indicator(ACC-5).
	///</summary>
	public ID AccidentJobRelatedIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accident Death Indicator(ACC-6).
	///</summary>
	public ID AccidentDeathIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entered By(ACC-7).
	///</summary>
	public XCN EnteredBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accident Description(ACC-8).
	///</summary>
	public ST AccidentDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Brought In By(ACC-9).
	///</summary>
	public ST BroughtInBy
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Police Notified Indicator(ACC-10).
	///</summary>
	public ID PoliceNotifiedIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accident Address(ACC-11).
	///</summary>
	public XAD AccidentAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Degree of patient liability(ACC-12).
	///</summary>
	public NM DegreeOfPatientLiability
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ADD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ADD message segment. 
/// This segment has the following fields:<ol>
///<li>ADD-1: Addendum Continuation Pointer (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ADD : AbstractSegment  {

  /**
   * Creates a ADD (Addendum) segment object that belongs to the given 
   * message.  
   */
	public ADD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Addendum Continuation Pointer");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Addendum Continuation Pointer(ADD-1).
	///</summary>
	public ST AddendumContinuationPointer
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ADJ.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ADJ message segment. 
/// This segment has the following fields:<ol>
///<li>ADJ-1: Provider Adjustment Number (EI)</li>
///<li>ADJ-2: Payer Adjustment Number (EI)</li>
///<li>ADJ-3: Adjustment Sequence Number (SI)</li>
///<li>ADJ-4: Adjustment Category (CWE)</li>
///<li>ADJ-5: Adjustment Amount (CP)</li>
///<li>ADJ-6: Adjustment Quantity (CQ)</li>
///<li>ADJ-7: Adjustment Reason PA (CWE)</li>
///<li>ADJ-8: Adjustment Description (ST)</li>
///<li>ADJ-9: Original Value (NM)</li>
///<li>ADJ-10: Substitute Value (NM)</li>
///<li>ADJ-11: Adjustment Action (CWE)</li>
///<li>ADJ-12: Provider Adjustment Number Cross Reference (EI)</li>
///<li>ADJ-13: Provider Product/Service Line Item Number Cross Reference (EI)</li>
///<li>ADJ-14: Adjustment Date (DTM)</li>
///<li>ADJ-15: Responsible Organization (XON)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ADJ : AbstractSegment  {

  /**
   * Creates a ADJ (Adjustment) segment object that belongs to the given 
   * message.  
   */
	public ADJ(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Provider Adjustment Number");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Payer Adjustment Number");
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Adjustment Sequence Number");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Adjustment Category");
       this.add(typeof(CP), false, 5, 0, new System.Object[]{message}, "Adjustment Amount");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Adjustment Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Adjustment Reason PA");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Adjustment Description");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Original Value");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Substitute Value");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Adjustment Action");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Provider Adjustment Number Cross Reference");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Provider Product/Service Line Item Number Cross Reference");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Adjustment Date");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Responsible Organization");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Provider Adjustment Number(ADJ-1).
	///</summary>
	public EI ProviderAdjustmentNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Adjustment Number(ADJ-2).
	///</summary>
	public EI PayerAdjustmentNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjustment Sequence Number(ADJ-3).
	///</summary>
	public SI AdjustmentSequenceNumber
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjustment Category(ADJ-4).
	///</summary>
	public CWE AdjustmentCategory
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Adjustment Amount(ADJ-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CP GetAdjustmentAmount(int rep)
	{
			CP ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CP)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Adjustment Amount (ADJ-5).
   ///</summary>
  public CP[] GetAdjustmentAmount() {
     CP[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CP[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CP)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Adjustment Amount (ADJ-5).
   ///</summary>
  public int AdjustmentAmountRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Adjustment Quantity(ADJ-6).
	///</summary>
	public CQ AdjustmentQuantity
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjustment Reason PA(ADJ-7).
	///</summary>
	public CWE AdjustmentReasonPA
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjustment Description(ADJ-8).
	///</summary>
	public ST AdjustmentDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Original Value(ADJ-9).
	///</summary>
	public NM OriginalValue
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Substitute Value(ADJ-10).
	///</summary>
	public NM SubstituteValue
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjustment Action(ADJ-11).
	///</summary>
	public CWE AdjustmentAction
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Adjustment Number Cross Reference(ADJ-12).
	///</summary>
	public EI ProviderAdjustmentNumberCrossReference
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Product/Service Line Item Number Cross Reference(ADJ-13).
	///</summary>
	public EI ProviderProductServiceLineItemNumberCrossReference
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjustment Date(ADJ-14).
	///</summary>
	public DTM AdjustmentDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Responsible Organization(ADJ-15).
	///</summary>
	public XON ResponsibleOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\AFF.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AFF message segment. 
/// This segment has the following fields:<ol>
///<li>AFF-1: Set ID - AFF (SI)</li>
///<li>AFF-2: Professional Organization (XON)</li>
///<li>AFF-3: Professional Organization Address (XAD)</li>
///<li>AFF-4: Professional Organization Affiliation Date Range (DR)</li>
///<li>AFF-5: Professional Affiliation Additional Information (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AFF : AbstractSegment  {

  /**
   * Creates a AFF (Professional Affiliation) segment object that belongs to the given 
   * message.  
   */
	public AFF(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - AFF");
       this.add(typeof(XON), true, 1, 0, new System.Object[]{message}, "Professional Organization");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Professional Organization Address");
       this.add(typeof(DR), false, 0, 0, new System.Object[]{message}, "Professional Organization Affiliation Date Range");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Professional Affiliation Additional Information");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - AFF(AFF-1).
	///</summary>
	public SI SetIDAFF
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Professional Organization(AFF-2).
	///</summary>
	public XON ProfessionalOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Professional Organization Address(AFF-3).
	///</summary>
	public XAD ProfessionalOrganizationAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Professional Organization Affiliation Date Range(AFF-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DR GetProfessionalOrganizationAffiliationDateRange(int rep)
	{
			DR ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (DR)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Professional Organization Affiliation Date Range (AFF-4).
   ///</summary>
  public DR[] GetProfessionalOrganizationAffiliationDateRange() {
     DR[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new DR[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DR)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Professional Organization Affiliation Date Range (AFF-4).
   ///</summary>
  public int ProfessionalOrganizationAffiliationDateRangeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Professional Affiliation Additional Information(AFF-5).
	///</summary>
	public ST ProfessionalAffiliationAdditionalInformation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\AIG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AIG message segment. 
/// This segment has the following fields:<ol>
///<li>AIG-1: Set ID - AIG (SI)</li>
///<li>AIG-2: Segment Action Code (ID)</li>
///<li>AIG-3: Resource ID (CWE)</li>
///<li>AIG-4: Resource Type (CWE)</li>
///<li>AIG-5: Resource Group (CWE)</li>
///<li>AIG-6: Resource Quantity (NM)</li>
///<li>AIG-7: Resource Quantity Units (CNE)</li>
///<li>AIG-8: Start Date/Time (DTM)</li>
///<li>AIG-9: Start Date/Time Offset (NM)</li>
///<li>AIG-10: Start Date/Time Offset Units (CNE)</li>
///<li>AIG-11: Duration (NM)</li>
///<li>AIG-12: Duration Units (CNE)</li>
///<li>AIG-13: Allow Substitution Code (CWE)</li>
///<li>AIG-14: Filler Status Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AIG : AbstractSegment  {

  /**
   * Creates a AIG (Appointment Information - General Resource) segment object that belongs to the given 
   * message.  
   */
	public AIG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - AIG");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Resource ID");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Resource Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Resource Group");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Resource Quantity");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Resource Quantity Units");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Start Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Duration");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Duration Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allow Substitution Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Filler Status Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - AIG(AIG-1).
	///</summary>
	public SI SetIDAIG
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(AIG-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Resource ID(AIG-3).
	///</summary>
	public CWE ResourceID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Resource Type(AIG-4).
	///</summary>
	public CWE ResourceType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Resource Group(AIG-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetResourceGroup(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Resource Group (AIG-5).
   ///</summary>
  public CWE[] GetResourceGroup() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Resource Group (AIG-5).
   ///</summary>
  public int ResourceGroupRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Resource Quantity(AIG-6).
	///</summary>
	public NM ResourceQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Resource Quantity Units(AIG-7).
	///</summary>
	public CNE ResourceQuantityUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time(AIG-8).
	///</summary>
	public DTM StartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset(AIG-9).
	///</summary>
	public NM StartDateTimeOffset
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset Units(AIG-10).
	///</summary>
	public CNE StartDateTimeOffsetUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration(AIG-11).
	///</summary>
	public NM Duration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration Units(AIG-12).
	///</summary>
	public CNE DurationUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allow Substitution Code(AIG-13).
	///</summary>
	public CWE AllowSubstitutionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Status Code(AIG-14).
	///</summary>
	public CWE FillerStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\AIL.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AIL message segment. 
/// This segment has the following fields:<ol>
///<li>AIL-1: Set ID - AIL (SI)</li>
///<li>AIL-2: Segment Action Code (ID)</li>
///<li>AIL-3: Location Resource ID (PL)</li>
///<li>AIL-4: Location Type - AIL (CWE)</li>
///<li>AIL-5: Location Group (CWE)</li>
///<li>AIL-6: Start Date/Time (DTM)</li>
///<li>AIL-7: Start Date/Time Offset (NM)</li>
///<li>AIL-8: Start Date/Time Offset Units (CNE)</li>
///<li>AIL-9: Duration (NM)</li>
///<li>AIL-10: Duration Units (CNE)</li>
///<li>AIL-11: Allow Substitution Code (CWE)</li>
///<li>AIL-12: Filler Status Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AIL : AbstractSegment  {

  /**
   * Creates a AIL (Appointment Information - Location Resource) segment object that belongs to the given 
   * message.  
   */
	public AIL(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - AIL");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(PL), false, 0, 0, new System.Object[]{message}, "Location Resource ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Location Type - AIL");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Location Group");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Start Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Duration");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Duration Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allow Substitution Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Filler Status Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - AIL(AIL-1).
	///</summary>
	public SI SetIDAIL
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(AIL-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Location Resource ID(AIL-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PL GetLocationResourceID(int rep)
	{
			PL ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (PL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Resource ID (AIL-3).
   ///</summary>
  public PL[] GetLocationResourceID() {
     PL[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new PL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Resource ID (AIL-3).
   ///</summary>
  public int LocationResourceIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Location Type - AIL(AIL-4).
	///</summary>
	public CWE LocationTypeAIL
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Group(AIL-5).
	///</summary>
	public CWE LocationGroup
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time(AIL-6).
	///</summary>
	public DTM StartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset(AIL-7).
	///</summary>
	public NM StartDateTimeOffset
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset Units(AIL-8).
	///</summary>
	public CNE StartDateTimeOffsetUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration(AIL-9).
	///</summary>
	public NM Duration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration Units(AIL-10).
	///</summary>
	public CNE DurationUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allow Substitution Code(AIL-11).
	///</summary>
	public CWE AllowSubstitutionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Status Code(AIL-12).
	///</summary>
	public CWE FillerStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\AIP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AIP message segment. 
/// This segment has the following fields:<ol>
///<li>AIP-1: Set ID - AIP (SI)</li>
///<li>AIP-2: Segment Action Code (ID)</li>
///<li>AIP-3: Personnel Resource ID (XCN)</li>
///<li>AIP-4: Resource Type (CWE)</li>
///<li>AIP-5: Resource Group (CWE)</li>
///<li>AIP-6: Start Date/Time (DTM)</li>
///<li>AIP-7: Start Date/Time Offset (NM)</li>
///<li>AIP-8: Start Date/Time Offset Units (CNE)</li>
///<li>AIP-9: Duration (NM)</li>
///<li>AIP-10: Duration Units (CNE)</li>
///<li>AIP-11: Allow Substitution Code (CWE)</li>
///<li>AIP-12: Filler Status Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AIP : AbstractSegment  {

  /**
   * Creates a AIP (Appointment Information - Personnel Resource) segment object that belongs to the given 
   * message.  
   */
	public AIP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - AIP");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Personnel Resource ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Resource Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Resource Group");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Start Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Duration");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Duration Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allow Substitution Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Filler Status Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - AIP(AIP-1).
	///</summary>
	public SI SetIDAIP
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(AIP-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Personnel Resource ID(AIP-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPersonnelResourceID(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Personnel Resource ID (AIP-3).
   ///</summary>
  public XCN[] GetPersonnelResourceID() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Personnel Resource ID (AIP-3).
   ///</summary>
  public int PersonnelResourceIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Resource Type(AIP-4).
	///</summary>
	public CWE ResourceType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Resource Group(AIP-5).
	///</summary>
	public CWE ResourceGroup
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time(AIP-6).
	///</summary>
	public DTM StartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset(AIP-7).
	///</summary>
	public NM StartDateTimeOffset
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset Units(AIP-8).
	///</summary>
	public CNE StartDateTimeOffsetUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration(AIP-9).
	///</summary>
	public NM Duration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration Units(AIP-10).
	///</summary>
	public CNE DurationUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allow Substitution Code(AIP-11).
	///</summary>
	public CWE AllowSubstitutionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Status Code(AIP-12).
	///</summary>
	public CWE FillerStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\AIS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AIS message segment. 
/// This segment has the following fields:<ol>
///<li>AIS-1: Set ID - AIS (SI)</li>
///<li>AIS-2: Segment Action Code (ID)</li>
///<li>AIS-3: Universal Service Identifier (CWE)</li>
///<li>AIS-4: Start Date/Time (DTM)</li>
///<li>AIS-5: Start Date/Time Offset (NM)</li>
///<li>AIS-6: Start Date/Time Offset Units (CNE)</li>
///<li>AIS-7: Duration (NM)</li>
///<li>AIS-8: Duration Units (CNE)</li>
///<li>AIS-9: Allow Substitution Code (CWE)</li>
///<li>AIS-10: Filler Status Code (CWE)</li>
///<li>AIS-11: Placer Supplemental Service Information (CWE)</li>
///<li>AIS-12: Filler Supplemental Service Information (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AIS : AbstractSegment  {

  /**
   * Creates a AIS (Appointment Information) segment object that belongs to the given 
   * message.  
   */
	public AIS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - AIS");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Universal Service Identifier");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Start Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Start Date/Time Offset Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Duration");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Duration Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allow Substitution Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Filler Status Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Placer Supplemental Service Information");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Filler Supplemental Service Information");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - AIS(AIS-1).
	///</summary>
	public SI SetIDAIS
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(AIS-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Universal Service Identifier(AIS-3).
	///</summary>
	public CWE UniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time(AIS-4).
	///</summary>
	public DTM StartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset(AIS-5).
	///</summary>
	public NM StartDateTimeOffset
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time Offset Units(AIS-6).
	///</summary>
	public CNE StartDateTimeOffsetUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration(AIS-7).
	///</summary>
	public NM Duration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Duration Units(AIS-8).
	///</summary>
	public CNE DurationUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allow Substitution Code(AIS-9).
	///</summary>
	public CWE AllowSubstitutionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Status Code(AIS-10).
	///</summary>
	public CWE FillerStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Supplemental Service Information(AIS-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPlacerSupplementalServiceInformation(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Supplemental Service Information (AIS-11).
   ///</summary>
  public CWE[] GetPlacerSupplementalServiceInformation() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Supplemental Service Information (AIS-11).
   ///</summary>
  public int PlacerSupplementalServiceInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Filler Supplemental Service Information(AIS-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetFillerSupplementalServiceInformation(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Supplemental Service Information (AIS-12).
   ///</summary>
  public CWE[] GetFillerSupplementalServiceInformation() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Supplemental Service Information (AIS-12).
   ///</summary>
  public int FillerSupplementalServiceInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\AL1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AL1 message segment. 
/// This segment has the following fields:<ol>
///<li>AL1-1: Set ID - AL1 (SI)</li>
///<li>AL1-2: Allergen Type Code (CWE)</li>
///<li>AL1-3: Allergen Code/Mnemonic/Description (CWE)</li>
///<li>AL1-4: Allergy Severity Code (CWE)</li>
///<li>AL1-5: Allergy Reaction Code (ST)</li>
///<li>AL1-6: Identification Date (-)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AL1 : AbstractSegment  {

  /**
   * Creates a AL1 (Patient Allergy Information) segment object that belongs to the given 
   * message.  
   */
	public AL1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - AL1");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allergen Type Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Allergen Code/Mnemonic/Description");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allergy Severity Code");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Allergy Reaction Code");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Identification Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - AL1(AL1-1).
	///</summary>
	public SI SetIDAL1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergen Type Code(AL1-2).
	///</summary>
	public CWE AllergenTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergen Code/Mnemonic/Description(AL1-3).
	///</summary>
	public CWE AllergenCodeMnemonicDescription
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergy Severity Code(AL1-4).
	///</summary>
	public CWE AllergySeverityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Allergy Reaction Code(AL1-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetAllergyReactionCode(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Allergy Reaction Code (AL1-5).
   ///</summary>
  public ST[] GetAllergyReactionCode() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Allergy Reaction Code (AL1-5).
   ///</summary>
  public int AllergyReactionCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Identification Date(AL1-6).
	///</summary>
	public - IdentificationDate
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\APR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 APR message segment. 
/// This segment has the following fields:<ol>
///<li>APR-1: Time Selection Criteria (SCV)</li>
///<li>APR-2: Resource Selection Criteria (SCV)</li>
///<li>APR-3: Location Selection Criteria (SCV)</li>
///<li>APR-4: Slot Spacing Criteria (NM)</li>
///<li>APR-5: Filler Override Criteria (SCV)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class APR : AbstractSegment  {

  /**
   * Creates a APR (Appointment Preferences) segment object that belongs to the given 
   * message.  
   */
	public APR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SCV), false, 0, 0, new System.Object[]{message}, "Time Selection Criteria");
       this.add(typeof(SCV), false, 0, 0, new System.Object[]{message}, "Resource Selection Criteria");
       this.add(typeof(SCV), false, 0, 0, new System.Object[]{message}, "Location Selection Criteria");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Slot Spacing Criteria");
       this.add(typeof(SCV), false, 0, 0, new System.Object[]{message}, "Filler Override Criteria");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Time Selection Criteria(APR-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SCV GetTimeSelectionCriteria(int rep)
	{
			SCV ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (SCV)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Time Selection Criteria (APR-1).
   ///</summary>
  public SCV[] GetTimeSelectionCriteria() {
     SCV[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new SCV[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SCV)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Time Selection Criteria (APR-1).
   ///</summary>
  public int TimeSelectionCriteriaRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Resource Selection Criteria(APR-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SCV GetResourceSelectionCriteria(int rep)
	{
			SCV ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (SCV)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Resource Selection Criteria (APR-2).
   ///</summary>
  public SCV[] GetResourceSelectionCriteria() {
     SCV[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new SCV[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SCV)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Resource Selection Criteria (APR-2).
   ///</summary>
  public int ResourceSelectionCriteriaRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Location Selection Criteria(APR-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SCV GetLocationSelectionCriteria(int rep)
	{
			SCV ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (SCV)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Selection Criteria (APR-3).
   ///</summary>
  public SCV[] GetLocationSelectionCriteria() {
     SCV[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new SCV[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SCV)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Selection Criteria (APR-3).
   ///</summary>
  public int LocationSelectionCriteriaRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Slot Spacing Criteria(APR-4).
	///</summary>
	public NM SlotSpacingCriteria
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Filler Override Criteria(APR-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SCV GetFillerOverrideCriteria(int rep)
	{
			SCV ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (SCV)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Override Criteria (APR-5).
   ///</summary>
  public SCV[] GetFillerOverrideCriteria() {
     SCV[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new SCV[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SCV)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Override Criteria (APR-5).
   ///</summary>
  public int FillerOverrideCriteriaRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ARQ.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ARQ message segment. 
/// This segment has the following fields:<ol>
///<li>ARQ-1: Placer Appointment ID (EI)</li>
///<li>ARQ-2: Filler Appointment ID (EI)</li>
///<li>ARQ-3: Occurrence Number (NM)</li>
///<li>ARQ-4: Placer Group Number (EI)</li>
///<li>ARQ-5: Schedule ID (CWE)</li>
///<li>ARQ-6: Request Event Reason (CWE)</li>
///<li>ARQ-7: Appointment Reason (CWE)</li>
///<li>ARQ-8: Appointment Type (CWE)</li>
///<li>ARQ-9: Appointment Duration (NM)</li>
///<li>ARQ-10: Appointment Duration Units (CNE)</li>
///<li>ARQ-11: Requested Start Date/Time Range (DR)</li>
///<li>ARQ-12: Priority-ARQ (ST)</li>
///<li>ARQ-13: Repeating Interval (RI)</li>
///<li>ARQ-14: Repeating Interval Duration (ST)</li>
///<li>ARQ-15: Placer Contact Person (XCN)</li>
///<li>ARQ-16: Placer Contact Phone Number (XTN)</li>
///<li>ARQ-17: Placer Contact Address (XAD)</li>
///<li>ARQ-18: Placer Contact Location (PL)</li>
///<li>ARQ-19: Entered By Person (XCN)</li>
///<li>ARQ-20: Entered By Phone Number (XTN)</li>
///<li>ARQ-21: Entered By Location (PL)</li>
///<li>ARQ-22: Parent Placer Appointment ID (EI)</li>
///<li>ARQ-23: Parent Filler Appointment ID (EI)</li>
///<li>ARQ-24: Placer Order Number (EI)</li>
///<li>ARQ-25: Filler Order Number (EI)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ARQ : AbstractSegment  {

  /**
   * Creates a ARQ (Appointment Request) segment object that belongs to the given 
   * message.  
   */
	public ARQ(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Placer Appointment ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Filler Appointment ID");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Occurrence Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Placer Group Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Schedule ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Request Event Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Appointment Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Appointment Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Appointment Duration");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Appointment Duration Units");
       this.add(typeof(DR), false, 0, 0, new System.Object[]{message}, "Requested Start Date/Time Range");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Priority-ARQ");
       this.add(typeof(RI), false, 1, 0, new System.Object[]{message}, "Repeating Interval");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Repeating Interval Duration");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Placer Contact Person");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Placer Contact Phone Number");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Placer Contact Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Placer Contact Location");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Entered By Person");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Entered By Phone Number");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Entered By Location");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Placer Appointment ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Filler Appointment ID");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Placer Order Number");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Filler Order Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Placer Appointment ID(ARQ-1).
	///</summary>
	public EI PlacerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Appointment ID(ARQ-2).
	///</summary>
	public EI FillerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Occurrence Number(ARQ-3).
	///</summary>
	public NM OccurrenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Placer Group Number(ARQ-4).
	///</summary>
	public EI PlacerGroupNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Schedule ID(ARQ-5).
	///</summary>
	public CWE ScheduleID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Request Event Reason(ARQ-6).
	///</summary>
	public CWE RequestEventReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Reason(ARQ-7).
	///</summary>
	public CWE AppointmentReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Type(ARQ-8).
	///</summary>
	public CWE AppointmentType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Duration(ARQ-9).
	///</summary>
	public NM AppointmentDuration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Duration Units(ARQ-10).
	///</summary>
	public CNE AppointmentDurationUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Requested Start Date/Time Range(ARQ-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DR GetRequestedStartDateTimeRange(int rep)
	{
			DR ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (DR)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Requested Start Date/Time Range (ARQ-11).
   ///</summary>
  public DR[] GetRequestedStartDateTimeRange() {
     DR[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new DR[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DR)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Requested Start Date/Time Range (ARQ-11).
   ///</summary>
  public int RequestedStartDateTimeRangeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Priority-ARQ(ARQ-12).
	///</summary>
	public ST PriorityARQ
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Repeating Interval(ARQ-13).
	///</summary>
	public RI RepeatingInterval
	{
		get{
			RI ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (RI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Repeating Interval Duration(ARQ-14).
	///</summary>
	public ST RepeatingIntervalDuration
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Contact Person(ARQ-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPlacerContactPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Contact Person (ARQ-15).
   ///</summary>
  public XCN[] GetPlacerContactPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Contact Person (ARQ-15).
   ///</summary>
  public int PlacerContactPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Placer Contact Phone Number(ARQ-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPlacerContactPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Contact Phone Number (ARQ-16).
   ///</summary>
  public XTN[] GetPlacerContactPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Contact Phone Number (ARQ-16).
   ///</summary>
  public int PlacerContactPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Placer Contact Address(ARQ-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetPlacerContactAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Contact Address (ARQ-17).
   ///</summary>
  public XAD[] GetPlacerContactAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Contact Address (ARQ-17).
   ///</summary>
  public int PlacerContactAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Placer Contact Location(ARQ-18).
	///</summary>
	public PL PlacerContactLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Entered By Person(ARQ-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetEnteredByPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Entered By Person (ARQ-19).
   ///</summary>
  public XCN[] GetEnteredByPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Entered By Person (ARQ-19).
   ///</summary>
  public int EnteredByPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Entered By Phone Number(ARQ-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetEnteredByPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Entered By Phone Number (ARQ-20).
   ///</summary>
  public XTN[] GetEnteredByPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Entered By Phone Number (ARQ-20).
   ///</summary>
  public int EnteredByPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Entered By Location(ARQ-21).
	///</summary>
	public PL EnteredByLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Placer Appointment ID(ARQ-22).
	///</summary>
	public EI ParentPlacerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Filler Appointment ID(ARQ-23).
	///</summary>
	public EI ParentFillerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Order Number(ARQ-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetPlacerOrderNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Order Number (ARQ-24).
   ///</summary>
  public EI[] GetPlacerOrderNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Order Number (ARQ-24).
   ///</summary>
  public int PlacerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Filler Order Number(ARQ-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetFillerOrderNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Order Number (ARQ-25).
   ///</summary>
  public EI[] GetFillerOrderNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Order Number (ARQ-25).
   ///</summary>
  public int FillerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ARV.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ARV message segment. 
/// This segment has the following fields:<ol>
///<li>ARV-1: Set ID (SI)</li>
///<li>ARV-2: Access Restriction Action Code (CNE)</li>
///<li>ARV-3: Access Restriction Value (CWE)</li>
///<li>ARV-4: Access Restriction Reason (CWE)</li>
///<li>ARV-5: Special Access Restriction Instructions (ST)</li>
///<li>ARV-6: Access Restriction Date Range (DR)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ARV : AbstractSegment  {

  /**
   * Creates a ARV (Access Restriction) segment object that belongs to the given 
   * message.  
   */
	public ARV(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID");
       this.add(typeof(CNE), true, 1, 0, new System.Object[]{message}, "Access Restriction Action Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Access Restriction Value");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Access Restriction Reason");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Special Access Restriction Instructions");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Access Restriction Date Range");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID(ARV-1).
	///</summary>
	public SI SetID
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Access Restriction Action Code(ARV-2).
	///</summary>
	public CNE AccessRestrictionActionCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Access Restriction Value(ARV-3).
	///</summary>
	public CWE AccessRestrictionValue
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Access Restriction Reason(ARV-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAccessRestrictionReason(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Access Restriction Reason (ARV-4).
   ///</summary>
  public CWE[] GetAccessRestrictionReason() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Access Restriction Reason (ARV-4).
   ///</summary>
  public int AccessRestrictionReasonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Special Access Restriction Instructions(ARV-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetSpecialAccessRestrictionInstructions(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Special Access Restriction Instructions (ARV-5).
   ///</summary>
  public ST[] GetSpecialAccessRestrictionInstructions() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Special Access Restriction Instructions (ARV-5).
   ///</summary>
  public int SpecialAccessRestrictionInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Access Restriction Date Range(ARV-6).
	///</summary>
	public DR AccessRestrictionDateRange
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\AUT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 AUT message segment. 
/// This segment has the following fields:<ol>
///<li>AUT-1: Authorizing Payor, Plan ID (CWE)</li>
///<li>AUT-2: Authorizing Payor, Company ID (CWE)</li>
///<li>AUT-3: Authorizing Payor, Company Name (ST)</li>
///<li>AUT-4: Authorization Effective Date (DTM)</li>
///<li>AUT-5: Authorization Expiration Date (DTM)</li>
///<li>AUT-6: Authorization Identifier (EI)</li>
///<li>AUT-7: Reimbursement Limit (CP)</li>
///<li>AUT-8: Requested Number of Treatments (CQ)</li>
///<li>AUT-9: Authorized Number of Treatments (CQ)</li>
///<li>AUT-10: Process Date (DTM)</li>
///<li>AUT-11: Requested Discipline(s) (CWE)</li>
///<li>AUT-12: Authorized Discipline(s) (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class AUT : AbstractSegment  {

  /**
   * Creates a AUT (Authorization Information) segment object that belongs to the given 
   * message.  
   */
	public AUT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Authorizing Payor, Plan ID");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Authorizing Payor, Company ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Authorizing Payor, Company Name");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Authorization Effective Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Authorization Expiration Date");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Authorization Identifier");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Reimbursement Limit");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Requested Number of Treatments");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Authorized Number of Treatments");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Process Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Requested Discipline(s)");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Authorized Discipline(s)");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Authorizing Payor, Plan ID(AUT-1).
	///</summary>
	public CWE AuthorizingPayorPlanID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorizing Payor, Company ID(AUT-2).
	///</summary>
	public CWE AuthorizingPayorCompanyID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorizing Payor, Company Name(AUT-3).
	///</summary>
	public ST AuthorizingPayorCompanyName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorization Effective Date(AUT-4).
	///</summary>
	public DTM AuthorizationEffectiveDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorization Expiration Date(AUT-5).
	///</summary>
	public DTM AuthorizationExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorization Identifier(AUT-6).
	///</summary>
	public EI AuthorizationIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reimbursement Limit(AUT-7).
	///</summary>
	public CP ReimbursementLimit
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Number of Treatments(AUT-8).
	///</summary>
	public CQ RequestedNumberOfTreatments
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorized Number of Treatments(AUT-9).
	///</summary>
	public CQ AuthorizedNumberOfTreatments
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Process Date(AUT-10).
	///</summary>
	public DTM ProcessDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Requested Discipline(s)(AUT-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRequestedDisciplineS(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Requested Discipline(s) (AUT-11).
   ///</summary>
  public CWE[] GetRequestedDisciplineS() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Requested Discipline(s) (AUT-11).
   ///</summary>
  public int RequestedDisciplineSRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Authorized Discipline(s)(AUT-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAuthorizedDisciplineS(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Authorized Discipline(s) (AUT-12).
   ///</summary>
  public CWE[] GetAuthorizedDisciplineS() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Authorized Discipline(s) (AUT-12).
   ///</summary>
  public int AuthorizedDisciplineSRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\BHS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BHS message segment. 
/// This segment has the following fields:<ol>
///<li>BHS-1: Batch Field Separator (ST)</li>
///<li>BHS-2: Batch Encoding Characters (ST)</li>
///<li>BHS-3: Batch Sending Application (HD)</li>
///<li>BHS-4: Batch Sending Facility (HD)</li>
///<li>BHS-5: Batch Receiving Application (HD)</li>
///<li>BHS-6: Batch Receiving Facility (HD)</li>
///<li>BHS-7: Batch Creation Date/Time (DTM)</li>
///<li>BHS-8: Batch Security (ST)</li>
///<li>BHS-9: Batch Name/ID/Type (ST)</li>
///<li>BHS-10: Batch Comment (ST)</li>
///<li>BHS-11: Batch Control ID (ST)</li>
///<li>BHS-12: Reference Batch Control ID (ST)</li>
///<li>BHS-13: Batch Sending Network Address (HD)</li>
///<li>BHS-14: Batch Receiving Network Address (HD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BHS : AbstractSegment  {

  /**
   * Creates a BHS (Batch Header) segment object that belongs to the given 
   * message.  
   */
	public BHS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), true, 1, 1, new System.Object[]{message}, "Batch Field Separator");
       this.add(typeof(ST), true, 1, 5, new System.Object[]{message}, "Batch Encoding Characters");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Batch Sending Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Batch Sending Facility");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Batch Receiving Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Batch Receiving Facility");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Batch Creation Date/Time");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Batch Security");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Batch Name/ID/Type");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Batch Comment");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Batch Control ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Reference Batch Control ID");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Batch Sending Network Address");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Batch Receiving Network Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Batch Field Separator(BHS-1).
	///</summary>
	public ST BatchFieldSeparator
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Encoding Characters(BHS-2).
	///</summary>
	public ST BatchEncodingCharacters
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Sending Application(BHS-3).
	///</summary>
	public HD BatchSendingApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Sending Facility(BHS-4).
	///</summary>
	public HD BatchSendingFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Receiving Application(BHS-5).
	///</summary>
	public HD BatchReceivingApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Receiving Facility(BHS-6).
	///</summary>
	public HD BatchReceivingFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Creation Date/Time(BHS-7).
	///</summary>
	public DTM BatchCreationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Security(BHS-8).
	///</summary>
	public ST BatchSecurity
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Name/ID/Type(BHS-9).
	///</summary>
	public ST BatchNameIDType
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Comment(BHS-10).
	///</summary>
	public ST BatchComment
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Control ID(BHS-11).
	///</summary>
	public ST BatchControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reference Batch Control ID(BHS-12).
	///</summary>
	public ST ReferenceBatchControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Sending Network Address(BHS-13).
	///</summary>
	public HD BatchSendingNetworkAddress
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Receiving Network Address(BHS-14).
	///</summary>
	public HD BatchReceivingNetworkAddress
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\BLC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BLC message segment. 
/// This segment has the following fields:<ol>
///<li>BLC-1: Blood Product Code (CWE)</li>
///<li>BLC-2: Blood Amount (CQ)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BLC : AbstractSegment  {

  /**
   * Creates a BLC (Blood Code) segment object that belongs to the given 
   * message.  
   */
	public BLC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Blood Product Code");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Blood Amount");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Blood Product Code(BLC-1).
	///</summary>
	public CWE BloodProductCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Blood Amount(BLC-2).
	///</summary>
	public CQ BloodAmount
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\BLG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BLG message segment. 
/// This segment has the following fields:<ol>
///<li>BLG-1: When to Charge (CCD)</li>
///<li>BLG-2: Charge Type (ID)</li>
///<li>BLG-3: Account ID (CX)</li>
///<li>BLG-4: Charge Type Reason (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BLG : AbstractSegment  {

  /**
   * Creates a BLG (Billing) segment object that belongs to the given 
   * message.  
   */
	public BLG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CCD), false, 1, 0, new System.Object[]{message}, "When to Charge");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 122}, "Charge Type");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Account ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Charge Type Reason");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns When to Charge(BLG-1).
	///</summary>
	public CCD WhenToCharge
	{
		get{
			CCD ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CCD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Charge Type(BLG-2).
	///</summary>
	public ID ChargeType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Account ID(BLG-3).
	///</summary>
	public CX AccountID
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Charge Type Reason(BLG-4).
	///</summary>
	public CWE ChargeTypeReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\BPO.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BPO message segment. 
/// This segment has the following fields:<ol>
///<li>BPO-1: Set ID - BPO (SI)</li>
///<li>BPO-2: BP Universal Service Identifier (CWE)</li>
///<li>BPO-3: BP  Processing Requirements (CWE)</li>
///<li>BPO-4: BP Quantity (NM)</li>
///<li>BPO-5: BP Amount (NM)</li>
///<li>BPO-6: BP Units (CWE)</li>
///<li>BPO-7: BP Intended Use Date/Time (DTM)</li>
///<li>BPO-8: BP Intended Dispense From Location (PL)</li>
///<li>BPO-9: BP Intended Dispense From Address (XAD)</li>
///<li>BPO-10: BP Requested Dispense Date/Time (DTM)</li>
///<li>BPO-11: BP Requested Dispense To Location (PL)</li>
///<li>BPO-12: BP Requested Dispense To Address (XAD)</li>
///<li>BPO-13: BP Indication for Use (CWE)</li>
///<li>BPO-14: BP Informed Consent Indicator (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BPO : AbstractSegment  {

  /**
   * Creates a BPO (Blood product order) segment object that belongs to the given 
   * message.  
   */
	public BPO(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - BPO");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "BP Universal Service Identifier");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "BP  Processing Requirements");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "BP Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "BP Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "BP Units");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "BP Intended Use Date/Time");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "BP Intended Dispense From Location");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "BP Intended Dispense From Address");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "BP Requested Dispense Date/Time");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "BP Requested Dispense To Location");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "BP Requested Dispense To Address");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "BP Indication for Use");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "BP Informed Consent Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - BPO(BPO-1).
	///</summary>
	public SI SetIDBPO
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Universal Service Identifier(BPO-2).
	///</summary>
	public CWE BPUniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of BP  Processing Requirements(BPO-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetBPProcessingRequirements(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of BP  Processing Requirements (BPO-3).
   ///</summary>
  public CWE[] GetBPProcessingRequirements() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of BP  Processing Requirements (BPO-3).
   ///</summary>
  public int BPProcessingRequirementsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns BP Quantity(BPO-4).
	///</summary>
	public NM BPQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Amount(BPO-5).
	///</summary>
	public NM BPAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Units(BPO-6).
	///</summary>
	public CWE BPUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Intended Use Date/Time(BPO-7).
	///</summary>
	public DTM BPIntendedUseDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Intended Dispense From Location(BPO-8).
	///</summary>
	public PL BPIntendedDispenseFromLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Intended Dispense From Address(BPO-9).
	///</summary>
	public XAD BPIntendedDispenseFromAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Requested Dispense Date/Time(BPO-10).
	///</summary>
	public DTM BPRequestedDispenseDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Requested Dispense To Location(BPO-11).
	///</summary>
	public PL BPRequestedDispenseToLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Requested Dispense To Address(BPO-12).
	///</summary>
	public XAD BPRequestedDispenseToAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of BP Indication for Use(BPO-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetBPIndicationForUse(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of BP Indication for Use (BPO-13).
   ///</summary>
  public CWE[] GetBPIndicationForUse() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of BP Indication for Use (BPO-13).
   ///</summary>
  public int BPIndicationForUseRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns BP Informed Consent Indicator(BPO-14).
	///</summary>
	public ID BPInformedConsentIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\BPX.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BPX message segment. 
/// This segment has the following fields:<ol>
///<li>BPX-1: Set ID - BPX (SI)</li>
///<li>BPX-2: BP Dispense Status (CWE)</li>
///<li>BPX-3: BP Status (ID)</li>
///<li>BPX-4: BP Date/Time of Status (DTM)</li>
///<li>BPX-5: BC Donation ID (EI)</li>
///<li>BPX-6: BC Component (CNE)</li>
///<li>BPX-7: BC Donation Type / Intended Use (CNE)</li>
///<li>BPX-8: CP Commercial Product (CWE)</li>
///<li>BPX-9: CP Manufacturer (XON)</li>
///<li>BPX-10: CP Lot Number (EI)</li>
///<li>BPX-11: BP Blood Group (CNE)</li>
///<li>BPX-12: BC Special Testing (CNE)</li>
///<li>BPX-13: BP Expiration Date/Time (DTM)</li>
///<li>BPX-14: BP Quantity (NM)</li>
///<li>BPX-15: BP Amount (NM)</li>
///<li>BPX-16: BP Units (CWE)</li>
///<li>BPX-17: BP Unique ID (EI)</li>
///<li>BPX-18: BP Actual Dispensed To Location (PL)</li>
///<li>BPX-19: BP Actual Dispensed To Address (XAD)</li>
///<li>BPX-20: BP Dispensed to Receiver (XCN)</li>
///<li>BPX-21: BP Dispensing Individual (XCN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BPX : AbstractSegment  {

  /**
   * Creates a BPX (Blood product dispense status) segment object that belongs to the given 
   * message.  
   */
	public BPX(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - BPX");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "BP Dispense Status");
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 511}, "BP Status");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "BP Date/Time of Status");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "BC Donation ID");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "BC Component");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "BC Donation Type / Intended Use");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "CP Commercial Product");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "CP Manufacturer");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "CP Lot Number");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "BP Blood Group");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "BC Special Testing");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "BP Expiration Date/Time");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "BP Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "BP Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "BP Units");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "BP Unique ID");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "BP Actual Dispensed To Location");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "BP Actual Dispensed To Address");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "BP Dispensed to Receiver");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "BP Dispensing Individual");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - BPX(BPX-1).
	///</summary>
	public SI SetIDBPX
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Dispense Status(BPX-2).
	///</summary>
	public CWE BPDispenseStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Status(BPX-3).
	///</summary>
	public ID BPStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Date/Time of Status(BPX-4).
	///</summary>
	public DTM BPDateTimeOfStatus
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BC Donation ID(BPX-5).
	///</summary>
	public EI BCDonationID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BC Component(BPX-6).
	///</summary>
	public CNE BCComponent
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BC Donation Type / Intended Use(BPX-7).
	///</summary>
	public CNE BCDonationTypeIntendedUse
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns CP Commercial Product(BPX-8).
	///</summary>
	public CWE CPCommercialProduct
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns CP Manufacturer(BPX-9).
	///</summary>
	public XON CPManufacturer
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns CP Lot Number(BPX-10).
	///</summary>
	public EI CPLotNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Blood Group(BPX-11).
	///</summary>
	public CNE BPBloodGroup
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of BC Special Testing(BPX-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetBCSpecialTesting(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of BC Special Testing (BPX-12).
   ///</summary>
  public CNE[] GetBCSpecialTesting() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of BC Special Testing (BPX-12).
   ///</summary>
  public int BCSpecialTestingRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns BP Expiration Date/Time(BPX-13).
	///</summary>
	public DTM BPExpirationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Quantity(BPX-14).
	///</summary>
	public NM BPQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Amount(BPX-15).
	///</summary>
	public NM BPAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Units(BPX-16).
	///</summary>
	public CWE BPUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Unique ID(BPX-17).
	///</summary>
	public EI BPUniqueID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Actual Dispensed To Location(BPX-18).
	///</summary>
	public PL BPActualDispensedToLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Actual Dispensed To Address(BPX-19).
	///</summary>
	public XAD BPActualDispensedToAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Dispensed to Receiver(BPX-20).
	///</summary>
	public XCN BPDispensedToReceiver
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Dispensing Individual(BPX-21).
	///</summary>
	public XCN BPDispensingIndividual
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\BTS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BTS message segment. 
/// This segment has the following fields:<ol>
///<li>BTS-1: Batch Message Count (ST)</li>
///<li>BTS-2: Batch Comment (ST)</li>
///<li>BTS-3: Batch Totals (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BTS : AbstractSegment  {

  /**
   * Creates a BTS (Batch Trailer) segment object that belongs to the given 
   * message.  
   */
	public BTS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Batch Message Count");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Batch Comment");
       this.add(typeof(NM), false, 0, 0, new System.Object[]{message}, "Batch Totals");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Batch Message Count(BTS-1).
	///</summary>
	public ST BatchMessageCount
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Batch Comment(BTS-2).
	///</summary>
	public ST BatchComment
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Batch Totals(BTS-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetBatchTotals(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Batch Totals (BTS-3).
   ///</summary>
  public NM[] GetBatchTotals() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Batch Totals (BTS-3).
   ///</summary>
  public int BatchTotalsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\BTX.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 BTX message segment. 
/// This segment has the following fields:<ol>
///<li>BTX-1: Set ID - BTX (SI)</li>
///<li>BTX-2: BC Donation ID (EI)</li>
///<li>BTX-3: BC Component (CNE)</li>
///<li>BTX-4: BC Blood Group (CNE)</li>
///<li>BTX-5: CP Commercial Product (CWE)</li>
///<li>BTX-6: CP Manufacturer (XON)</li>
///<li>BTX-7: CP Lot Number (EI)</li>
///<li>BTX-8: BP Quantity (NM)</li>
///<li>BTX-9: BP Amount (NM)</li>
///<li>BTX-10: BP Units (CWE)</li>
///<li>BTX-11: BP Transfusion/Disposition Status (CWE)</li>
///<li>BTX-12: BP Message Status (ID)</li>
///<li>BTX-13: BP Date/Time of Status (DTM)</li>
///<li>BTX-14: BP Transfusion Administrator (XCN)</li>
///<li>BTX-15: BP Transfusion Verifier (XCN)</li>
///<li>BTX-16: BP Transfusion Start Date/Time of Status (DTM)</li>
///<li>BTX-17: BP Transfusion End Date/Time of Status (DTM)</li>
///<li>BTX-18: BP Adverse Reaction Type (CWE)</li>
///<li>BTX-19: BP Transfusion Interrupted Reason (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class BTX : AbstractSegment  {

  /**
   * Creates a BTX (Blood Product Transfusion/Disposition) segment object that belongs to the given 
   * message.  
   */
	public BTX(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - BTX");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "BC Donation ID");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "BC Component");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "BC Blood Group");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "CP Commercial Product");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "CP Manufacturer");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "CP Lot Number");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "BP Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "BP Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "BP Units");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "BP Transfusion/Disposition Status");
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 511}, "BP Message Status");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "BP Date/Time of Status");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "BP Transfusion Administrator");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "BP Transfusion Verifier");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "BP Transfusion Start Date/Time of Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "BP Transfusion End Date/Time of Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "BP Adverse Reaction Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "BP Transfusion Interrupted Reason");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - BTX(BTX-1).
	///</summary>
	public SI SetIDBTX
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BC Donation ID(BTX-2).
	///</summary>
	public EI BCDonationID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BC Component(BTX-3).
	///</summary>
	public CNE BCComponent
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BC Blood Group(BTX-4).
	///</summary>
	public CNE BCBloodGroup
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns CP Commercial Product(BTX-5).
	///</summary>
	public CWE CPCommercialProduct
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns CP Manufacturer(BTX-6).
	///</summary>
	public XON CPManufacturer
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns CP Lot Number(BTX-7).
	///</summary>
	public EI CPLotNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Quantity(BTX-8).
	///</summary>
	public NM BPQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Amount(BTX-9).
	///</summary>
	public NM BPAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Units(BTX-10).
	///</summary>
	public CWE BPUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Transfusion/Disposition Status(BTX-11).
	///</summary>
	public CWE BPTransfusionDispositionStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Message Status(BTX-12).
	///</summary>
	public ID BPMessageStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Date/Time of Status(BTX-13).
	///</summary>
	public DTM BPDateTimeOfStatus
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Transfusion Administrator(BTX-14).
	///</summary>
	public XCN BPTransfusionAdministrator
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Transfusion Verifier(BTX-15).
	///</summary>
	public XCN BPTransfusionVerifier
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Transfusion Start Date/Time of Status(BTX-16).
	///</summary>
	public DTM BPTransfusionStartDateTimeOfStatus
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns BP Transfusion End Date/Time of Status(BTX-17).
	///</summary>
	public DTM BPTransfusionEndDateTimeOfStatus
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of BP Adverse Reaction Type(BTX-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetBPAdverseReactionType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of BP Adverse Reaction Type (BTX-18).
   ///</summary>
  public CWE[] GetBPAdverseReactionType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of BP Adverse Reaction Type (BTX-18).
   ///</summary>
  public int BPAdverseReactionTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns BP Transfusion Interrupted Reason(BTX-19).
	///</summary>
	public CWE BPTransfusionInterruptedReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CDM.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CDM message segment. 
/// This segment has the following fields:<ol>
///<li>CDM-1: Primary Key Value - CDM (CWE)</li>
///<li>CDM-2: Charge Code Alias (CWE)</li>
///<li>CDM-3: Charge Description Short (ST)</li>
///<li>CDM-4: Charge Description Long (ST)</li>
///<li>CDM-5: Description Override Indicator (CWE)</li>
///<li>CDM-6: Exploding Charges (CWE)</li>
///<li>CDM-7: Procedure Code (CNE)</li>
///<li>CDM-8: Active/Inactive Flag (ID)</li>
///<li>CDM-9: Inventory Number (CWE)</li>
///<li>CDM-10: Resource Load (NM)</li>
///<li>CDM-11: Contract Number (CX)</li>
///<li>CDM-12: Contract Organization (XON)</li>
///<li>CDM-13: Room Fee Indicator (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CDM : AbstractSegment  {

  /**
   * Creates a CDM (Charge Description Master) segment object that belongs to the given 
   * message.  
   */
	public CDM(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Primary Key Value - CDM");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Charge Code Alias");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Charge Description Short");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Charge Description Long");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Description Override Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Exploding Charges");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 183}, "Active/Inactive Flag");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Inventory Number");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Resource Load");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Contract Number");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Contract Organization");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Room Fee Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - CDM(CDM-1).
	///</summary>
	public CWE PrimaryKeyValueCDM
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Charge Code Alias(CDM-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetChargeCodeAlias(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Charge Code Alias (CDM-2).
   ///</summary>
  public CWE[] GetChargeCodeAlias() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Charge Code Alias (CDM-2).
   ///</summary>
  public int ChargeCodeAliasRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Charge Description Short(CDM-3).
	///</summary>
	public ST ChargeDescriptionShort
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Charge Description Long(CDM-4).
	///</summary>
	public ST ChargeDescriptionLong
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Description Override Indicator(CDM-5).
	///</summary>
	public CWE DescriptionOverrideIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Exploding Charges(CDM-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetExplodingCharges(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Exploding Charges (CDM-6).
   ///</summary>
  public CWE[] GetExplodingCharges() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Exploding Charges (CDM-6).
   ///</summary>
  public int ExplodingChargesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Procedure Code(CDM-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetProcedureCode(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Procedure Code (CDM-7).
   ///</summary>
  public CNE[] GetProcedureCode() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Procedure Code (CDM-7).
   ///</summary>
  public int ProcedureCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Active/Inactive Flag(CDM-8).
	///</summary>
	public ID ActiveInactiveFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Inventory Number(CDM-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetInventoryNumber(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Inventory Number (CDM-9).
   ///</summary>
  public CWE[] GetInventoryNumber() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Inventory Number (CDM-9).
   ///</summary>
  public int InventoryNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Resource Load(CDM-10).
	///</summary>
	public NM ResourceLoad
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contract Number(CDM-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetContractNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contract Number (CDM-11).
   ///</summary>
  public CX[] GetContractNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contract Number (CDM-11).
   ///</summary>
  public int ContractNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contract Organization(CDM-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetContractOrganization(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contract Organization (CDM-12).
   ///</summary>
  public XON[] GetContractOrganization() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contract Organization (CDM-12).
   ///</summary>
  public int ContractOrganizationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Room Fee Indicator(CDM-13).
	///</summary>
	public ID RoomFeeIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CER.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CER message segment. 
/// This segment has the following fields:<ol>
///<li>CER-1: Set ID - CER (SI)</li>
///<li>CER-2: Serial Number (ST)</li>
///<li>CER-3: Version (ST)</li>
///<li>CER-4: Granting Authority (XON)</li>
///<li>CER-5: Issuing Authority (XCN)</li>
///<li>CER-6: Signature (ED)</li>
///<li>CER-7: Granting Country (ID)</li>
///<li>CER-8: Granting State/Province (CWE)</li>
///<li>CER-9: Granting County/Parish (CWE)</li>
///<li>CER-10: Certificate Type (CWE)</li>
///<li>CER-11: Certificate Domain (CWE)</li>
///<li>CER-12: Subject ID (EI)</li>
///<li>CER-13: Subject Name (ST)</li>
///<li>CER-14: Subject Directory Attribute Extension (CWE)</li>
///<li>CER-15: Subject Public Key Info (CWE)</li>
///<li>CER-16: Authority Key Identifier (CWE)</li>
///<li>CER-17: Basic Constraint (ID)</li>
///<li>CER-18: CRL Distribution Point (CWE)</li>
///<li>CER-19: Jurisdiction Country (ID)</li>
///<li>CER-20: Jurisdiction State/Province (CWE)</li>
///<li>CER-21: Jurisdiction County/Parish (CWE)</li>
///<li>CER-22: Jurisdiction Breadth (CWE)</li>
///<li>CER-23: Granting Date (DTM)</li>
///<li>CER-24: Issuing Date (DTM)</li>
///<li>CER-25: Activation Date (DTM)</li>
///<li>CER-26: Inactivation Date (DTM)</li>
///<li>CER-27: Expiration Date (DTM)</li>
///<li>CER-28: Renewal Date (DTM)</li>
///<li>CER-29: Revocation Date (DTM)</li>
///<li>CER-30: Revocation Reason Code (CWE)</li>
///<li>CER-31: Certificate Status Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CER : AbstractSegment  {

  /**
   * Creates a CER (Certificate Detail) segment object that belongs to the given 
   * message.  
   */
	public CER(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - CER");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Serial Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Version");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Granting Authority");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Issuing Authority");
       this.add(typeof(ED), false, 1, 0, new System.Object[]{message}, "Signature");
       this.add(typeof(ID), false, 1, 3, new System.Object[]{message, 399}, "Granting Country");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Granting State/Province");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Granting County/Parish");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Certificate Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Certificate Domain");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Subject ID");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Subject Name");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Subject Directory Attribute Extension");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Subject Public Key Info");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Authority Key Identifier");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Basic Constraint");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "CRL Distribution Point");
       this.add(typeof(ID), false, 1, 3, new System.Object[]{message, 399}, "Jurisdiction Country");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Jurisdiction State/Province");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Jurisdiction County/Parish");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Jurisdiction Breadth");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Granting Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Issuing Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Activation Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inactivation Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expiration Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Renewal Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Revocation Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Revocation Reason Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Certificate Status Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - CER(CER-1).
	///</summary>
	public SI SetIDCER
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Serial Number(CER-2).
	///</summary>
	public ST SerialNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Version(CER-3).
	///</summary>
	public ST Version
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Granting Authority(CER-4).
	///</summary>
	public XON GrantingAuthority
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Issuing Authority(CER-5).
	///</summary>
	public XCN IssuingAuthority
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Signature(CER-6).
	///</summary>
	public ED Signature
	{
		get{
			ED ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ED)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Granting Country(CER-7).
	///</summary>
	public ID GrantingCountry
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Granting State/Province(CER-8).
	///</summary>
	public CWE GrantingStateProvince
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Granting County/Parish(CER-9).
	///</summary>
	public CWE GrantingCountyParish
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certificate Type(CER-10).
	///</summary>
	public CWE CertificateType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certificate Domain(CER-11).
	///</summary>
	public CWE CertificateDomain
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Subject ID(CER-12).
	///</summary>
	public EI SubjectID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Subject Name(CER-13).
	///</summary>
	public ST SubjectName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Subject Directory Attribute Extension(CER-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSubjectDirectoryAttributeExtension(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Subject Directory Attribute Extension (CER-14).
   ///</summary>
  public CWE[] GetSubjectDirectoryAttributeExtension() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Subject Directory Attribute Extension (CER-14).
   ///</summary>
  public int SubjectDirectoryAttributeExtensionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Subject Public Key Info(CER-15).
	///</summary>
	public CWE SubjectPublicKeyInfo
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authority Key Identifier(CER-16).
	///</summary>
	public CWE AuthorityKeyIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Basic Constraint(CER-17).
	///</summary>
	public ID BasicConstraint
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of CRL Distribution Point(CER-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCRLDistributionPoint(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of CRL Distribution Point (CER-18).
   ///</summary>
  public CWE[] GetCRLDistributionPoint() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of CRL Distribution Point (CER-18).
   ///</summary>
  public int CRLDistributionPointRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Jurisdiction Country(CER-19).
	///</summary>
	public ID JurisdictionCountry
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Jurisdiction State/Province(CER-20).
	///</summary>
	public CWE JurisdictionStateProvince
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Jurisdiction County/Parish(CER-21).
	///</summary>
	public CWE JurisdictionCountyParish
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Jurisdiction Breadth(CER-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetJurisdictionBreadth(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Jurisdiction Breadth (CER-22).
   ///</summary>
  public CWE[] GetJurisdictionBreadth() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Jurisdiction Breadth (CER-22).
   ///</summary>
  public int JurisdictionBreadthRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Granting Date(CER-23).
	///</summary>
	public DTM GrantingDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Issuing Date(CER-24).
	///</summary>
	public DTM IssuingDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Activation Date(CER-25).
	///</summary>
	public DTM ActivationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactivation Date(CER-26).
	///</summary>
	public DTM InactivationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expiration Date(CER-27).
	///</summary>
	public DTM ExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Renewal Date(CER-28).
	///</summary>
	public DTM RenewalDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Revocation Date(CER-29).
	///</summary>
	public DTM RevocationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Revocation Reason Code(CER-30).
	///</summary>
	public CWE RevocationReasonCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certificate Status Code(CER-31).
	///</summary>
	public CWE CertificateStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CM0.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CM0 message segment. 
/// This segment has the following fields:<ol>
///<li>CM0-1: Set ID - CM0 (SI)</li>
///<li>CM0-2: Sponsor Study ID (EI)</li>
///<li>CM0-3: Alternate Study ID (EI)</li>
///<li>CM0-4: Title of Study (ST)</li>
///<li>CM0-5: Chairman of Study (XCN)</li>
///<li>CM0-6: Last IRB Approval Date (DT)</li>
///<li>CM0-7: Total Accrual to Date (NM)</li>
///<li>CM0-8: Last Accrual Date (DT)</li>
///<li>CM0-9: Contact for Study (XCN)</li>
///<li>CM0-10: Contact's Telephone Number (XTN)</li>
///<li>CM0-11: Contact's Address (XAD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CM0 : AbstractSegment  {

  /**
   * Creates a CM0 (Clinical Study Master) segment object that belongs to the given 
   * message.  
   */
	public CM0(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - CM0");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Sponsor Study ID");
       this.add(typeof(EI), false, 3, 0, new System.Object[]{message}, "Alternate Study ID");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Title of Study");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Chairman of Study");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Last IRB Approval Date");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Total Accrual to Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Last Accrual Date");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Contact for Study");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Contact's Telephone Number");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Contact's Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - CM0(CM0-1).
	///</summary>
	public SI SetIDCM0
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sponsor Study ID(CM0-2).
	///</summary>
	public EI SponsorStudyID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Alternate Study ID(CM0-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetAlternateStudyID(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Alternate Study ID (CM0-3).
   ///</summary>
  public EI[] GetAlternateStudyID() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Alternate Study ID (CM0-3).
   ///</summary>
  public int AlternateStudyIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Title of Study(CM0-4).
	///</summary>
	public ST TitleOfStudy
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Chairman of Study(CM0-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetChairmanOfStudy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Chairman of Study (CM0-5).
   ///</summary>
  public XCN[] GetChairmanOfStudy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Chairman of Study (CM0-5).
   ///</summary>
  public int ChairmanOfStudyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Last IRB Approval Date(CM0-6).
	///</summary>
	public DT LastIRBApprovalDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Accrual to Date(CM0-7).
	///</summary>
	public NM TotalAccrualToDate
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Last Accrual Date(CM0-8).
	///</summary>
	public DT LastAccrualDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contact for Study(CM0-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetContactForStudy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact for Study (CM0-9).
   ///</summary>
  public XCN[] GetContactForStudy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact for Study (CM0-9).
   ///</summary>
  public int ContactForStudyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Contact's Telephone Number(CM0-10).
	///</summary>
	public XTN ContactSTelephoneNumber
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contact's Address(CM0-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetContactSAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact's Address (CM0-11).
   ///</summary>
  public XAD[] GetContactSAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact's Address (CM0-11).
   ///</summary>
  public int ContactSAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\CM1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CM1 message segment. 
/// This segment has the following fields:<ol>
///<li>CM1-1: Set ID - CM1 (SI)</li>
///<li>CM1-2: Study Phase Identifier (CWE)</li>
///<li>CM1-3: Description of Study Phase (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CM1 : AbstractSegment  {

  /**
   * Creates a CM1 (Clinical Study Phase Master) segment object that belongs to the given 
   * message.  
   */
	public CM1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - CM1");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Study Phase Identifier");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Description of Study Phase");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - CM1(CM1-1).
	///</summary>
	public SI SetIDCM1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Study Phase Identifier(CM1-2).
	///</summary>
	public CWE StudyPhaseIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Description of Study Phase(CM1-3).
	///</summary>
	public ST DescriptionOfStudyPhase
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CM2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CM2 message segment. 
/// This segment has the following fields:<ol>
///<li>CM2-1: Set ID- CM2 (SI)</li>
///<li>CM2-2: Scheduled Time Point (CWE)</li>
///<li>CM2-3: Description of Time Point (ST)</li>
///<li>CM2-4: Events Scheduled This Time Point (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CM2 : AbstractSegment  {

  /**
   * Creates a CM2 (Clinical Study Schedule Master) segment object that belongs to the given 
   * message.  
   */
	public CM2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID- CM2");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Scheduled Time Point");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Description of Time Point");
       this.add(typeof(CWE), true, 200, 0, new System.Object[]{message}, "Events Scheduled This Time Point");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID- CM2(CM2-1).
	///</summary>
	public SI SetIDCM2
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Scheduled Time Point(CM2-2).
	///</summary>
	public CWE ScheduledTimePoint
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Description of Time Point(CM2-3).
	///</summary>
	public ST DescriptionOfTimePoint
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Events Scheduled This Time Point(CM2-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEventsScheduledThisTimePoint(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Events Scheduled This Time Point (CM2-4).
   ///</summary>
  public CWE[] GetEventsScheduledThisTimePoint() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Events Scheduled This Time Point (CM2-4).
   ///</summary>
  public int EventsScheduledThisTimePointRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\CNS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CNS message segment. 
/// This segment has the following fields:<ol>
///<li>CNS-1: Starting Notification Reference Number (NM)</li>
///<li>CNS-2: Ending Notification Reference Number (NM)</li>
///<li>CNS-3: Starting Notification Date/Time (DTM)</li>
///<li>CNS-4: Ending Notification Date/Time (DTM)</li>
///<li>CNS-5: Starting Notification Code (CWE)</li>
///<li>CNS-6: Ending Notification Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CNS : AbstractSegment  {

  /**
   * Creates a CNS (Clear Notification) segment object that belongs to the given 
   * message.  
   */
	public CNS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Starting Notification Reference Number");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Ending Notification Reference Number");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Starting Notification Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Ending Notification Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Starting Notification Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Ending Notification Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Starting Notification Reference Number(CNS-1).
	///</summary>
	public NM StartingNotificationReferenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Ending Notification Reference Number(CNS-2).
	///</summary>
	public NM EndingNotificationReferenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Starting Notification Date/Time(CNS-3).
	///</summary>
	public DTM StartingNotificationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Ending Notification Date/Time(CNS-4).
	///</summary>
	public DTM EndingNotificationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Starting Notification Code(CNS-5).
	///</summary>
	public CWE StartingNotificationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Ending Notification Code(CNS-6).
	///</summary>
	public CWE EndingNotificationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CON1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CON message segment. 
/// This segment has the following fields:<ol>
///<li>CON-1: Set ID - CON (SI)</li>
///<li>CON-2: Consent Type (CWE)</li>
///<li>CON-3: Consent Form ID and Version (ST)</li>
///<li>CON-4: Consent Form Number (EI)</li>
///<li>CON-5: Consent Text (FT)</li>
///<li>CON-6: Subject-specific Consent Text (FT)</li>
///<li>CON-7: Consent Background Information (FT)</li>
///<li>CON-8: Subject-specific Consent Background Text (FT)</li>
///<li>CON-9: Consenter-imposed limitations (FT)</li>
///<li>CON-10: Consent Mode (CNE)</li>
///<li>CON-11: Consent Status (CNE)</li>
///<li>CON-12: Consent Discussion Date/Time (DTM)</li>
///<li>CON-13: Consent Decision Date/Time (DTM)</li>
///<li>CON-14: Consent Effective Date/Time (DTM)</li>
///<li>CON-15: Consent End Date/Time (DTM)</li>
///<li>CON-16: Subject Competence Indicator (ID)</li>
///<li>CON-17: Translator Assistance Indicator (ID)</li>
///<li>CON-18: Language Translated To (CWE)</li>
///<li>CON-19: Informational Material Supplied Indicator (ID)</li>
///<li>CON-20: Consent Bypass Reason (CWE)</li>
///<li>CON-21: Consent Disclosure Level (ID)</li>
///<li>CON-22: Consent Non-disclosure Reason (CWE)</li>
///<li>CON-23: Non-subject Consenter Reason (CWE)</li>
///<li>CON-24: Consenter ID (XPN)</li>
///<li>CON-25: Relationship to Subject (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CON : AbstractSegment  {

  /**
   * Creates a CON (Consent Segment) segment object that belongs to the given 
   * message.  
   */
	public CON(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - CON");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Type");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Consent Form ID and Version");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Consent Form Number");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Consent Text");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Subject-specific Consent Text");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Consent Background Information");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Subject-specific Consent Background Text");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Consenter-imposed limitations");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Consent Mode");
       this.add(typeof(CNE), true, 1, 0, new System.Object[]{message}, "Consent Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Consent Discussion Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Consent Decision Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Consent Effective Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Consent End Date/Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Subject Competence Indicator");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Translator Assistance Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Language Translated To");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Informational Material Supplied Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Bypass Reason");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 500}, "Consent Disclosure Level");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Non-disclosure Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Non-subject Consenter Reason");
       this.add(typeof(XPN), true, 0, 0, new System.Object[]{message}, "Consenter ID");
       this.add(typeof(CWE), true, 0, 0, new System.Object[]{message}, "Relationship to Subject");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - CON(CON-1).
	///</summary>
	public SI SetIDCON
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Type(CON-2).
	///</summary>
	public CWE ConsentType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Form ID and Version(CON-3).
	///</summary>
	public ST ConsentFormIDAndVersion
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Form Number(CON-4).
	///</summary>
	public EI ConsentFormNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Consent Text(CON-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetConsentText(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Consent Text (CON-5).
   ///</summary>
  public FT[] GetConsentText() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Consent Text (CON-5).
   ///</summary>
  public int ConsentTextRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Subject-specific Consent Text(CON-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetSubjectSpecificConsentText(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Subject-specific Consent Text (CON-6).
   ///</summary>
  public FT[] GetSubjectSpecificConsentText() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Subject-specific Consent Text (CON-6).
   ///</summary>
  public int SubjectSpecificConsentTextRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Consent Background Information(CON-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetConsentBackgroundInformation(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Consent Background Information (CON-7).
   ///</summary>
  public FT[] GetConsentBackgroundInformation() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Consent Background Information (CON-7).
   ///</summary>
  public int ConsentBackgroundInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Subject-specific Consent Background Text(CON-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetSubjectSpecificConsentBackgroundText(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Subject-specific Consent Background Text (CON-8).
   ///</summary>
  public FT[] GetSubjectSpecificConsentBackgroundText() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Subject-specific Consent Background Text (CON-8).
   ///</summary>
  public int SubjectSpecificConsentBackgroundTextRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Consenter-imposed limitations(CON-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetConsenterImposedLimitations(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Consenter-imposed limitations (CON-9).
   ///</summary>
  public FT[] GetConsenterImposedLimitations() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Consenter-imposed limitations (CON-9).
   ///</summary>
  public int ConsenterImposedLimitationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Consent Mode(CON-10).
	///</summary>
	public CNE ConsentMode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Status(CON-11).
	///</summary>
	public CNE ConsentStatus
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Discussion Date/Time(CON-12).
	///</summary>
	public DTM ConsentDiscussionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Decision Date/Time(CON-13).
	///</summary>
	public DTM ConsentDecisionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Effective Date/Time(CON-14).
	///</summary>
	public DTM ConsentEffectiveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent End Date/Time(CON-15).
	///</summary>
	public DTM ConsentEndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Subject Competence Indicator(CON-16).
	///</summary>
	public ID SubjectCompetenceIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Translator Assistance Indicator(CON-17).
	///</summary>
	public ID TranslatorAssistanceIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Language Translated To(CON-18).
	///</summary>
	public CWE LanguageTranslatedTo
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Informational Material Supplied Indicator(CON-19).
	///</summary>
	public ID InformationalMaterialSuppliedIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Bypass Reason(CON-20).
	///</summary>
	public CWE ConsentBypassReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Disclosure Level(CON-21).
	///</summary>
	public ID ConsentDisclosureLevel
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Non-disclosure Reason(CON-22).
	///</summary>
	public CWE ConsentNonDisclosureReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Non-subject Consenter Reason(CON-23).
	///</summary>
	public CWE NonSubjectConsenterReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Consenter ID(CON-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetConsenterID(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Consenter ID (CON-24).
   ///</summary>
  public XPN[] GetConsenterID() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Consenter ID (CON-24).
   ///</summary>
  public int ConsenterIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Relationship to Subject(CON-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRelationshipToSubject(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Relationship to Subject (CON-25).
   ///</summary>
  public CWE[] GetRelationshipToSubject() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Relationship to Subject (CON-25).
   ///</summary>
  public int RelationshipToSubjectRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\CSP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CSP message segment. 
/// This segment has the following fields:<ol>
///<li>CSP-1: Study Phase Identifier (CWE)</li>
///<li>CSP-2: Date/time Study Phase Began (DTM)</li>
///<li>CSP-3: Date/time Study Phase Ended (DTM)</li>
///<li>CSP-4: Study Phase Evaluability (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CSP : AbstractSegment  {

  /**
   * Creates a CSP (Clinical Study Phase) segment object that belongs to the given 
   * message.  
   */
	public CSP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Study Phase Identifier");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/time Study Phase Began");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/time Study Phase Ended");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Study Phase Evaluability");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Study Phase Identifier(CSP-1).
	///</summary>
	public CWE StudyPhaseIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/time Study Phase Began(CSP-2).
	///</summary>
	public DTM DateTimeStudyPhaseBegan
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/time Study Phase Ended(CSP-3).
	///</summary>
	public DTM DateTimeStudyPhaseEnded
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Study Phase Evaluability(CSP-4).
	///</summary>
	public CWE StudyPhaseEvaluability
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CSR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CSR message segment. 
/// This segment has the following fields:<ol>
///<li>CSR-1: Sponsor Study ID (EI)</li>
///<li>CSR-2: Alternate Study ID (EI)</li>
///<li>CSR-3: Institution Registering the Patient (CWE)</li>
///<li>CSR-4: Sponsor Patient ID (CX)</li>
///<li>CSR-5: Alternate Patient ID - CSR (CX)</li>
///<li>CSR-6: Date/Time of Patient Study Registration (DTM)</li>
///<li>CSR-7: Person Performing Study Registration (XCN)</li>
///<li>CSR-8: Study Authorizing Provider (XCN)</li>
///<li>CSR-9: Date/Time Patient Study Consent Signed (DTM)</li>
///<li>CSR-10: Patient Study Eligibility Status (CWE)</li>
///<li>CSR-11: Study Randomization Date/time (DTM)</li>
///<li>CSR-12: Randomized Study Arm (CWE)</li>
///<li>CSR-13: Stratum for Study Randomization (CWE)</li>
///<li>CSR-14: Patient Evaluability Status (CWE)</li>
///<li>CSR-15: Date/Time Ended Study (DTM)</li>
///<li>CSR-16: Reason Ended Study (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CSR : AbstractSegment  {

  /**
   * Creates a CSR (Clinical Study Registration) segment object that belongs to the given 
   * message.  
   */
	public CSR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Sponsor Study ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Alternate Study ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Institution Registering the Patient");
       this.add(typeof(CX), true, 1, 0, new System.Object[]{message}, "Sponsor Patient ID");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Alternate Patient ID - CSR");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/Time of Patient Study Registration");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Person Performing Study Registration");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Study Authorizing Provider");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time Patient Study Consent Signed");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Study Eligibility Status");
       this.add(typeof(DTM), false, 3, 0, new System.Object[]{message}, "Study Randomization Date/time");
       this.add(typeof(CWE), false, 3, 0, new System.Object[]{message}, "Randomized Study Arm");
       this.add(typeof(CWE), false, 3, 0, new System.Object[]{message}, "Stratum for Study Randomization");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Evaluability Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time Ended Study");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Reason Ended Study");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sponsor Study ID(CSR-1).
	///</summary>
	public EI SponsorStudyID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alternate Study ID(CSR-2).
	///</summary>
	public EI AlternateStudyID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Institution Registering the Patient(CSR-3).
	///</summary>
	public CWE InstitutionRegisteringThePatient
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sponsor Patient ID(CSR-4).
	///</summary>
	public CX SponsorPatientID
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alternate Patient ID - CSR(CSR-5).
	///</summary>
	public CX AlternatePatientIDCSR
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of Patient Study Registration(CSR-6).
	///</summary>
	public DTM DateTimeOfPatientStudyRegistration
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Person Performing Study Registration(CSR-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPersonPerformingStudyRegistration(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Person Performing Study Registration (CSR-7).
   ///</summary>
  public XCN[] GetPersonPerformingStudyRegistration() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Person Performing Study Registration (CSR-7).
   ///</summary>
  public int PersonPerformingStudyRegistrationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Study Authorizing Provider(CSR-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetStudyAuthorizingProvider(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Study Authorizing Provider (CSR-8).
   ///</summary>
  public XCN[] GetStudyAuthorizingProvider() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Study Authorizing Provider (CSR-8).
   ///</summary>
  public int StudyAuthorizingProviderRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Date/Time Patient Study Consent Signed(CSR-9).
	///</summary>
	public DTM DateTimePatientStudyConsentSigned
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Study Eligibility Status(CSR-10).
	///</summary>
	public CWE PatientStudyEligibilityStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Study Randomization Date/time(CSR-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DTM GetStudyRandomizationDateTime(int rep)
	{
			DTM ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (DTM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Study Randomization Date/time (CSR-11).
   ///</summary>
  public DTM[] GetStudyRandomizationDateTime() {
     DTM[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new DTM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DTM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Study Randomization Date/time (CSR-11).
   ///</summary>
  public int StudyRandomizationDateTimeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Randomized Study Arm(CSR-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRandomizedStudyArm(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Randomized Study Arm (CSR-12).
   ///</summary>
  public CWE[] GetRandomizedStudyArm() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Randomized Study Arm (CSR-12).
   ///</summary>
  public int RandomizedStudyArmRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Stratum for Study Randomization(CSR-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetStratumForStudyRandomization(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Stratum for Study Randomization (CSR-13).
   ///</summary>
  public CWE[] GetStratumForStudyRandomization() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Stratum for Study Randomization (CSR-13).
   ///</summary>
  public int StratumForStudyRandomizationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Evaluability Status(CSR-14).
	///</summary>
	public CWE PatientEvaluabilityStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Ended Study(CSR-15).
	///</summary>
	public DTM DateTimeEndedStudy
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reason Ended Study(CSR-16).
	///</summary>
	public CWE ReasonEndedStudy
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\CSS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CSS message segment. 
/// This segment has the following fields:<ol>
///<li>CSS-1: Study Scheduled Time Point (CWE)</li>
///<li>CSS-2: Study Scheduled Patient Time Point (DTM)</li>
///<li>CSS-3: Study Quality Control Codes (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CSS : AbstractSegment  {

  /**
   * Creates a CSS (Clinical Study Data Schedule Segment) segment object that belongs to the given 
   * message.  
   */
	public CSS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Study Scheduled Time Point");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Study Scheduled Patient Time Point");
       this.add(typeof(CWE), false, 3, 0, new System.Object[]{message}, "Study Quality Control Codes");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Study Scheduled Time Point(CSS-1).
	///</summary>
	public CWE StudyScheduledTimePoint
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Study Scheduled Patient Time Point(CSS-2).
	///</summary>
	public DTM StudyScheduledPatientTimePoint
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Study Quality Control Codes(CSS-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetStudyQualityControlCodes(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Study Quality Control Codes (CSS-3).
   ///</summary>
  public CWE[] GetStudyQualityControlCodes() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Study Quality Control Codes (CSS-3).
   ///</summary>
  public int StudyQualityControlCodesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\CTD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CTD message segment. 
/// This segment has the following fields:<ol>
///<li>CTD-1: Contact Role (CWE)</li>
///<li>CTD-2: Contact Name (XPN)</li>
///<li>CTD-3: Contact Address (XAD)</li>
///<li>CTD-4: Contact Location (PL)</li>
///<li>CTD-5: Contact Communication Information (XTN)</li>
///<li>CTD-6: Preferred Method of Contact (CWE)</li>
///<li>CTD-7: Contact Identifiers (PLN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CTD : AbstractSegment  {

  /**
   * Creates a CTD (Contact Data) segment object that belongs to the given 
   * message.  
   */
	public CTD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 0, 0, new System.Object[]{message}, "Contact Role");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Contact Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Contact Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Contact Location");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Contact Communication Information");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Preferred Method of Contact");
       this.add(typeof(PLN), false, 0, 0, new System.Object[]{message}, "Contact Identifiers");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Contact Role(CTD-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetContactRole(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Role (CTD-1).
   ///</summary>
  public CWE[] GetContactRole() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Role (CTD-1).
   ///</summary>
  public int ContactRoleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Name(CTD-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetContactName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Name (CTD-2).
   ///</summary>
  public XPN[] GetContactName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Name (CTD-2).
   ///</summary>
  public int ContactNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Address(CTD-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetContactAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Address (CTD-3).
   ///</summary>
  public XAD[] GetContactAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Address (CTD-3).
   ///</summary>
  public int ContactAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Contact Location(CTD-4).
	///</summary>
	public PL ContactLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contact Communication Information(CTD-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetContactCommunicationInformation(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Communication Information (CTD-5).
   ///</summary>
  public XTN[] GetContactCommunicationInformation() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Communication Information (CTD-5).
   ///</summary>
  public int ContactCommunicationInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Preferred Method of Contact(CTD-6).
	///</summary>
	public CWE PreferredMethodOfContact
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contact Identifiers(CTD-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PLN GetContactIdentifiers(int rep)
	{
			PLN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (PLN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Identifiers (CTD-7).
   ///</summary>
  public PLN[] GetContactIdentifiers() {
     PLN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new PLN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PLN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Identifiers (CTD-7).
   ///</summary>
  public int ContactIdentifiersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\CTI.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 CTI message segment. 
/// This segment has the following fields:<ol>
///<li>CTI-1: Sponsor Study ID (EI)</li>
///<li>CTI-2: Study Phase Identifier (CWE)</li>
///<li>CTI-3: Study Scheduled Time Point (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class CTI : AbstractSegment  {

  /**
   * Creates a CTI (Clinical Trial Identification) segment object that belongs to the given 
   * message.  
   */
	public CTI(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Sponsor Study ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Study Phase Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Study Scheduled Time Point");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sponsor Study ID(CTI-1).
	///</summary>
	public EI SponsorStudyID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Study Phase Identifier(CTI-2).
	///</summary>
	public CWE StudyPhaseIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Study Scheduled Time Point(CTI-3).
	///</summary>
	public CWE StudyScheduledTimePoint
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\DB1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 DB1 message segment. 
/// This segment has the following fields:<ol>
///<li>DB1-1: Set ID - DB1 (SI)</li>
///<li>DB1-2: Disabled Person Code (CWE)</li>
///<li>DB1-3: Disabled Person Identifier (CX)</li>
///<li>DB1-4: Disability Indicator (ID)</li>
///<li>DB1-5: Disability Start Date (DT)</li>
///<li>DB1-6: Disability End Date (DT)</li>
///<li>DB1-7: Disability Return to Work Date (DT)</li>
///<li>DB1-8: Disability Unable to Work Date (DT)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class DB1 : AbstractSegment  {

  /**
   * Creates a DB1 (Disability) segment object that belongs to the given 
   * message.  
   */
	public DB1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - DB1");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Disabled Person Code");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Disabled Person Identifier");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Disability Indicator");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Disability Start Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Disability End Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Disability Return to Work Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Disability Unable to Work Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - DB1(DB1-1).
	///</summary>
	public SI SetIDDB1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Disabled Person Code(DB1-2).
	///</summary>
	public CWE DisabledPersonCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Disabled Person Identifier(DB1-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetDisabledPersonIdentifier(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Disabled Person Identifier (DB1-3).
   ///</summary>
  public CX[] GetDisabledPersonIdentifier() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Disabled Person Identifier (DB1-3).
   ///</summary>
  public int DisabledPersonIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Disability Indicator(DB1-4).
	///</summary>
	public ID DisabilityIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Disability Start Date(DB1-5).
	///</summary>
	public DT DisabilityStartDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Disability End Date(DB1-6).
	///</summary>
	public DT DisabilityEndDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Disability Return to Work Date(DB1-7).
	///</summary>
	public DT DisabilityReturnToWorkDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Disability Unable to Work Date(DB1-8).
	///</summary>
	public DT DisabilityUnableToWorkDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\DG1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 DG1 message segment. 
/// This segment has the following fields:<ol>
///<li>DG1-1: Set ID - DG1 (SI)</li>
///<li>DG1-2: Diagnosis Coding Method (-)</li>
///<li>DG1-3: Diagnosis Code - DG1 (CWE)</li>
///<li>DG1-4: Diagnosis Description (-)</li>
///<li>DG1-5: Diagnosis Date/Time (DTM)</li>
///<li>DG1-6: Diagnosis Type (CWE)</li>
///<li>DG1-7: Major Diagnostic Category (CNE)</li>
///<li>DG1-8: Diagnostic Related Group (CNE)</li>
///<li>DG1-9: DRG Approval Indicator (ID)</li>
///<li>DG1-10: DRG Grouper Review Code (CWE)</li>
///<li>DG1-11: Outlier Type (CWE)</li>
///<li>DG1-12: Outlier Days (NM)</li>
///<li>DG1-13: Outlier Cost (CP)</li>
///<li>DG1-14: Grouper Version And Type (-)</li>
///<li>DG1-15: Diagnosis Priority (NM)</li>
///<li>DG1-16: Diagnosing Clinician (XCN)</li>
///<li>DG1-17: Diagnosis Classification (CWE)</li>
///<li>DG1-18: Confidential Indicator (ID)</li>
///<li>DG1-19: Attestation Date/Time (DTM)</li>
///<li>DG1-20: Diagnosis Identifier (EI)</li>
///<li>DG1-21: Diagnosis Action Code (ID)</li>
///<li>DG1-22: Parent Diagnosis (EI)</li>
///<li>DG1-23: DRG CCL Value Code (CWE)</li>
///<li>DG1-24: DRG Grouping Usage (ID)</li>
///<li>DG1-25: DRG Diagnosis Determination Status (CWE)</li>
///<li>DG1-26: Present On Admission (POA) Indicator (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class DG1 : AbstractSegment  {

  /**
   * Creates a DG1 (Diagnosis) segment object that belongs to the given 
   * message.  
   */
	public DG1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - DG1");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Diagnosis Coding Method");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Diagnosis Code - DG1");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Diagnosis Description");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Diagnosis Date/Time");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Diagnosis Type");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Major Diagnostic Category");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Diagnostic Related Group");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "DRG Approval Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Grouper Review Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Outlier Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Outlier Days");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Outlier Cost");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Grouper Version And Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Diagnosis Priority");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Diagnosing Clinician");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Diagnosis Classification");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Confidential Indicator");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Attestation Date/Time");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Diagnosis Identifier");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Diagnosis Action Code");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Diagnosis");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG CCL Value Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "DRG Grouping Usage");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Diagnosis Determination Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Present On Admission (POA) Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - DG1(DG1-1).
	///</summary>
	public SI SetIDDG1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Coding Method(DG1-2).
	///</summary>
	public - DiagnosisCodingMethod
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Code - DG1(DG1-3).
	///</summary>
	public CWE DiagnosisCodeDG1
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Description(DG1-4).
	///</summary>
	public - DiagnosisDescription
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Date/Time(DG1-5).
	///</summary>
	public DTM DiagnosisDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Type(DG1-6).
	///</summary>
	public CWE DiagnosisType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Major Diagnostic Category(DG1-7).
	///</summary>
	public CNE MajorDiagnosticCategory
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnostic Related Group(DG1-8).
	///</summary>
	public CNE DiagnosticRelatedGroup
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Approval Indicator(DG1-9).
	///</summary>
	public ID DRGApprovalIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Grouper Review Code(DG1-10).
	///</summary>
	public CWE DRGGrouperReviewCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Type(DG1-11).
	///</summary>
	public CWE OutlierType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Days(DG1-12).
	///</summary>
	public NM OutlierDays
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Cost(DG1-13).
	///</summary>
	public CP OutlierCost
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Grouper Version And Type(DG1-14).
	///</summary>
	public - GrouperVersionAndType
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Priority(DG1-15).
	///</summary>
	public NM DiagnosisPriority
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Diagnosing Clinician(DG1-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetDiagnosingClinician(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Diagnosing Clinician (DG1-16).
   ///</summary>
  public XCN[] GetDiagnosingClinician() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Diagnosing Clinician (DG1-16).
   ///</summary>
  public int DiagnosingClinicianRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Diagnosis Classification(DG1-17).
	///</summary>
	public CWE DiagnosisClassification
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Confidential Indicator(DG1-18).
	///</summary>
	public ID ConfidentialIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Attestation Date/Time(DG1-19).
	///</summary>
	public DTM AttestationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Identifier(DG1-20).
	///</summary>
	public EI DiagnosisIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnosis Action Code(DG1-21).
	///</summary>
	public ID DiagnosisActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Diagnosis(DG1-22).
	///</summary>
	public EI ParentDiagnosis
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG CCL Value Code(DG1-23).
	///</summary>
	public CWE DRGCCLValueCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Grouping Usage(DG1-24).
	///</summary>
	public ID DRGGroupingUsage
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Diagnosis Determination Status(DG1-25).
	///</summary>
	public CWE DRGDiagnosisDeterminationStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Present On Admission (POA) Indicator(DG1-26).
	///</summary>
	public CWE PresentOnAdmissionIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\DMI.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 DMI message segment. 
/// This segment has the following fields:<ol>
///<li>DMI-1: Diagnostic Related Group (CNE)</li>
///<li>DMI-2: Major Diagnostic Category (CNE)</li>
///<li>DMI-3: Lower and Upper Trim Points (NR)</li>
///<li>DMI-4: Average Length of Stay (NM)</li>
///<li>DMI-5: Relative Weight (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class DMI : AbstractSegment  {

  /**
   * Creates a DMI (DRG Master File Information) segment object that belongs to the given 
   * message.  
   */
	public DMI(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Diagnostic Related Group");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Major Diagnostic Category");
       this.add(typeof(NR), false, 1, 0, new System.Object[]{message}, "Lower and Upper Trim Points");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Average Length of Stay");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Relative Weight");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Diagnostic Related Group(DMI-1).
	///</summary>
	public CNE DiagnosticRelatedGroup
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Major Diagnostic Category(DMI-2).
	///</summary>
	public CNE MajorDiagnosticCategory
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Lower and Upper Trim Points(DMI-3).
	///</summary>
	public NR LowerAndUpperTrimPoints
	{
		get{
			NR ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (NR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Average Length of Stay(DMI-4).
	///</summary>
	public NM AverageLengthOfStay
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relative Weight(DMI-5).
	///</summary>
	public NM RelativeWeight
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\DRG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 DRG message segment. 
/// This segment has the following fields:<ol>
///<li>DRG-1: Diagnostic Related Group (CNE)</li>
///<li>DRG-2: DRG Assigned Date/Time (DTM)</li>
///<li>DRG-3: DRG Approval Indicator (ID)</li>
///<li>DRG-4: DRG Grouper Review Code (CWE)</li>
///<li>DRG-5: Outlier Type (CWE)</li>
///<li>DRG-6: Outlier Days (NM)</li>
///<li>DRG-7: Outlier Cost (CP)</li>
///<li>DRG-8: DRG Payor (CWE)</li>
///<li>DRG-9: Outlier Reimbursement (CP)</li>
///<li>DRG-10: Confidential Indicator (ID)</li>
///<li>DRG-11: DRG Transfer Type (CWE)</li>
///<li>DRG-12: Name of Coder (XPN)</li>
///<li>DRG-13: Grouper Status (CWE)</li>
///<li>DRG-14: PCCL Value Code (CWE)</li>
///<li>DRG-15: Effective Weight (NM)</li>
///<li>DRG-16: Monetary Amount (MO)</li>
///<li>DRG-17: Status Patient (CWE)</li>
///<li>DRG-18: Grouper Software Name (ST)</li>
///<li>DRG-19: Grouper Software Version (ST)</li>
///<li>DRG-20: Status Financial Calculation (CWE)</li>
///<li>DRG-21: Relative Discount/Surcharge (MO)</li>
///<li>DRG-22: Basic Charge (MO)</li>
///<li>DRG-23: Total Charge (MO)</li>
///<li>DRG-24: Discount/Surcharge (MO)</li>
///<li>DRG-25: Calculated Days (NM)</li>
///<li>DRG-26: Status Gender (CWE)</li>
///<li>DRG-27: Status Age (CWE)</li>
///<li>DRG-28: Status Length of Stay (CWE)</li>
///<li>DRG-29: Status Same Day Flag (CWE)</li>
///<li>DRG-30: Status Separation Mode (CWE)</li>
///<li>DRG-31: Status Weight at Birth (CWE)</li>
///<li>DRG-32: Status Respiration Minutes (CWE)</li>
///<li>DRG-33: Status Admission (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class DRG : AbstractSegment  {

  /**
   * Creates a DRG (Diagnosis Related Group) segment object that belongs to the given 
   * message.  
   */
	public DRG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Diagnostic Related Group");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "DRG Assigned Date/Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "DRG Approval Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Grouper Review Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Outlier Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Outlier Days");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Outlier Cost");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Payor");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Outlier Reimbursement");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Confidential Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Transfer Type");
       this.add(typeof(XPN), false, 1, 0, new System.Object[]{message}, "Name of Coder");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Grouper Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "PCCL Value Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Effective Weight");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Monetary Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Patient");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Grouper Software Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Grouper Software Version");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Financial Calculation");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Relative Discount/Surcharge");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Basic Charge");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Total Charge");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Discount/Surcharge");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Calculated Days");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Gender");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Age");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Length of Stay");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Same Day Flag");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Separation Mode");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Weight at Birth");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Respiration Minutes");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Status Admission");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Diagnostic Related Group(DRG-1).
	///</summary>
	public CNE DiagnosticRelatedGroup
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Assigned Date/Time(DRG-2).
	///</summary>
	public DTM DRGAssignedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Approval Indicator(DRG-3).
	///</summary>
	public ID DRGApprovalIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Grouper Review Code(DRG-4).
	///</summary>
	public CWE DRGGrouperReviewCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Type(DRG-5).
	///</summary>
	public CWE OutlierType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Days(DRG-6).
	///</summary>
	public NM OutlierDays
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Cost(DRG-7).
	///</summary>
	public CP OutlierCost
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Payor(DRG-8).
	///</summary>
	public CWE DRGPayor
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Outlier Reimbursement(DRG-9).
	///</summary>
	public CP OutlierReimbursement
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Confidential Indicator(DRG-10).
	///</summary>
	public ID ConfidentialIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Transfer Type(DRG-11).
	///</summary>
	public CWE DRGTransferType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Name of Coder(DRG-12).
	///</summary>
	public XPN NameOfCoder
	{
		get{
			XPN ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (XPN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Grouper Status(DRG-13).
	///</summary>
	public CWE GrouperStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns PCCL Value Code(DRG-14).
	///</summary>
	public CWE PCCLValueCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Weight(DRG-15).
	///</summary>
	public NM EffectiveWeight
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Monetary Amount(DRG-16).
	///</summary>
	public MO MonetaryAmount
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Patient(DRG-17).
	///</summary>
	public CWE StatusPatient
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Grouper Software Name(DRG-18).
	///</summary>
	public ST GrouperSoftwareName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Grouper Software Version(DRG-19).
	///</summary>
	public ST GrouperSoftwareVersion
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Financial Calculation(DRG-20).
	///</summary>
	public CWE StatusFinancialCalculation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relative Discount/Surcharge(DRG-21).
	///</summary>
	public MO RelativeDiscountSurcharge
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Basic Charge(DRG-22).
	///</summary>
	public MO BasicCharge
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Charge(DRG-23).
	///</summary>
	public MO TotalCharge
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Discount/Surcharge(DRG-24).
	///</summary>
	public MO DiscountSurcharge
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Calculated Days(DRG-25).
	///</summary>
	public NM CalculatedDays
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Gender(DRG-26).
	///</summary>
	public CWE StatusGender
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Age(DRG-27).
	///</summary>
	public CWE StatusAge
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Length of Stay(DRG-28).
	///</summary>
	public CWE StatusLengthOfStay
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Same Day Flag(DRG-29).
	///</summary>
	public CWE StatusSameDayFlag
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Separation Mode(DRG-30).
	///</summary>
	public CWE StatusSeparationMode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Weight at Birth(DRG-31).
	///</summary>
	public CWE StatusWeightAtBirth
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Respiration Minutes(DRG-32).
	///</summary>
	public CWE StatusRespirationMinutes
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Status Admission(DRG-33).
	///</summary>
	public CWE StatusAdmission
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\DSC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 DSC message segment. 
/// This segment has the following fields:<ol>
///<li>DSC-1: Continuation Pointer (ST)</li>
///<li>DSC-2: Continuation Style (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class DSC : AbstractSegment  {

  /**
   * Creates a DSC (Continuation Pointer) segment object that belongs to the given 
   * message.  
   */
	public DSC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Continuation Pointer");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 398}, "Continuation Style");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Continuation Pointer(DSC-1).
	///</summary>
	public ST ContinuationPointer
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Continuation Style(DSC-2).
	///</summary>
	public ID ContinuationStyle
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\DSP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 DSP message segment. 
/// This segment has the following fields:<ol>
///<li>DSP-1: Set ID - DSP (SI)</li>
///<li>DSP-2: Display Level (SI)</li>
///<li>DSP-3: Data Line (TX)</li>
///<li>DSP-4: Logical Break Point (ST)</li>
///<li>DSP-5: Result ID (TX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class DSP : AbstractSegment  {

  /**
   * Creates a DSP (Display Data) segment object that belongs to the given 
   * message.  
   */
	public DSP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - DSP");
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Display Level");
       this.add(typeof(TX), true, 1, 0, new System.Object[]{message}, "Data Line");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Logical Break Point");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Result ID");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - DSP(DSP-1).
	///</summary>
	public SI SetIDDSP
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Display Level(DSP-2).
	///</summary>
	public SI DisplayLevel
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Data Line(DSP-3).
	///</summary>
	public TX DataLine
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Logical Break Point(DSP-4).
	///</summary>
	public ST LogicalBreakPoint
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Result ID(DSP-5).
	///</summary>
	public TX ResultID
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ECD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ECD message segment. 
/// This segment has the following fields:<ol>
///<li>ECD-1: Reference Command Number (NM)</li>
///<li>ECD-2: Remote Control Command (CWE)</li>
///<li>ECD-3: Response Required (ID)</li>
///<li>ECD-4: Requested Completion Time (-)</li>
///<li>ECD-5: Parameters (TX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ECD : AbstractSegment  {

  /**
   * Creates a ECD (Equipment Command) segment object that belongs to the given 
   * message.  
   */
	public ECD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Reference Command Number");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Remote Control Command");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Response Required");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Requested Completion Time");
       this.add(typeof(TX), false, 0, 0, new System.Object[]{message}, "Parameters");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Reference Command Number(ECD-1).
	///</summary>
	public NM ReferenceCommandNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Remote Control Command(ECD-2).
	///</summary>
	public CWE RemoteControlCommand
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Response Required(ECD-3).
	///</summary>
	public ID ResponseRequired
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Completion Time(ECD-4).
	///</summary>
	public - RequestedCompletionTime
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Parameters(ECD-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public TX GetParameters(int rep)
	{
			TX ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (TX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Parameters (ECD-5).
   ///</summary>
  public TX[] GetParameters() {
     TX[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new TX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (TX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Parameters (ECD-5).
   ///</summary>
  public int ParametersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ECR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ECR message segment. 
/// This segment has the following fields:<ol>
///<li>ECR-1: Command Response (CWE)</li>
///<li>ECR-2: Date/Time Completed (DTM)</li>
///<li>ECR-3: Command Response Parameters (TX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ECR : AbstractSegment  {

  /**
   * Creates a ECR (Equipment Command Response) segment object that belongs to the given 
   * message.  
   */
	public ECR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Command Response");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/Time Completed");
       this.add(typeof(TX), false, 0, 0, new System.Object[]{message}, "Command Response Parameters");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Command Response(ECR-1).
	///</summary>
	public CWE CommandResponse
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Completed(ECR-2).
	///</summary>
	public DTM DateTimeCompleted
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Command Response Parameters(ECR-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public TX GetCommandResponseParameters(int rep)
	{
			TX ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (TX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Command Response Parameters (ECR-3).
   ///</summary>
  public TX[] GetCommandResponseParameters() {
     TX[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new TX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (TX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Command Response Parameters (ECR-3).
   ///</summary>
  public int CommandResponseParametersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\EDU.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 EDU message segment. 
/// This segment has the following fields:<ol>
///<li>EDU-1: Set ID - EDU (SI)</li>
///<li>EDU-2: Academic Degree (CWE)</li>
///<li>EDU-3: Academic Degree Program Date Range (DR)</li>
///<li>EDU-4: Academic Degree Program Participation Date Range (DR)</li>
///<li>EDU-5: Academic Degree Granted Date (DT)</li>
///<li>EDU-6: School (XON)</li>
///<li>EDU-7: School Type Code (CWE)</li>
///<li>EDU-8: School Address (XAD)</li>
///<li>EDU-9: Major Field of Study (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class EDU : AbstractSegment  {

  /**
   * Creates a EDU (Educational Detail) segment object that belongs to the given 
   * message.  
   */
	public EDU(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - EDU");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Academic Degree");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Academic Degree Program Date Range");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Academic Degree Program Participation Date Range");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Academic Degree Granted Date");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "School");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "School Type Code");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "School Address");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Major Field of Study");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - EDU(EDU-1).
	///</summary>
	public SI SetIDEDU
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Academic Degree(EDU-2).
	///</summary>
	public CWE AcademicDegree
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Academic Degree Program Date Range(EDU-3).
	///</summary>
	public DR AcademicDegreeProgramDateRange
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Academic Degree Program Participation Date Range(EDU-4).
	///</summary>
	public DR AcademicDegreeProgramParticipationDateRange
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Academic Degree Granted Date(EDU-5).
	///</summary>
	public DT AcademicDegreeGrantedDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns School(EDU-6).
	///</summary>
	public XON School
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns School Type Code(EDU-7).
	///</summary>
	public CWE SchoolTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns School Address(EDU-8).
	///</summary>
	public XAD SchoolAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Major Field of Study(EDU-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetMajorFieldOfStudy(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Major Field of Study (EDU-9).
   ///</summary>
  public CWE[] GetMajorFieldOfStudy() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Major Field of Study (EDU-9).
   ///</summary>
  public int MajorFieldOfStudyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\EQP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 EQP message segment. 
/// This segment has the following fields:<ol>
///<li>EQP-1: Event type (CWE)</li>
///<li>EQP-2: File Name (ST)</li>
///<li>EQP-3: Start Date/Time (DTM)</li>
///<li>EQP-4: End Date/Time (DTM)</li>
///<li>EQP-5: Transaction Data (FT)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class EQP : AbstractSegment  {

  /**
   * Creates a EQP (Equipment/log Service) segment object that belongs to the given 
   * message.  
   */
	public EQP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Event type");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "File Name");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Start Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "End Date/Time");
       this.add(typeof(FT), true, 1, 0, new System.Object[]{message}, "Transaction Data");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Event type(EQP-1).
	///</summary>
	public CWE EventType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Name(EQP-2).
	///</summary>
	public ST FileName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date/Time(EQP-3).
	///</summary>
	public DTM StartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns End Date/Time(EQP-4).
	///</summary>
	public DTM EndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Data(EQP-5).
	///</summary>
	public FT TransactionData
	{
		get{
			FT ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (FT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\EQU.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 EQU message segment. 
/// This segment has the following fields:<ol>
///<li>EQU-1: Equipment Instance Identifier (EI)</li>
///<li>EQU-2: Event Date/Time (DTM)</li>
///<li>EQU-3: Equipment State (CWE)</li>
///<li>EQU-4: Local/Remote Control State (CWE)</li>
///<li>EQU-5: Alert Level (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class EQU : AbstractSegment  {

  /**
   * Creates a EQU (Equipment Detail) segment object that belongs to the given 
   * message.  
   */
	public EQU(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Equipment Instance Identifier");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Event Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Equipment State");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Local/Remote Control State");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Alert Level");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Equipment Instance Identifier(EQU-1).
	///</summary>
	public EI EquipmentInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Date/Time(EQU-2).
	///</summary>
	public DTM EventDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Equipment State(EQU-3).
	///</summary>
	public CWE EquipmentState
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Local/Remote Control State(EQU-4).
	///</summary>
	public CWE LocalRemoteControlState
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alert Level(EQU-5).
	///</summary>
	public CWE AlertLevel
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ERR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ERR message segment. 
/// This segment has the following fields:<ol>
///<li>ERR-1: Error Code and Location (-)</li>
///<li>ERR-2: Error Location (ERL)</li>
///<li>ERR-3: HL7 Error Code (CWE)</li>
///<li>ERR-4: Severity (ID)</li>
///<li>ERR-5: Application Error Code (CWE)</li>
///<li>ERR-6: Application Error Parameter (ST)</li>
///<li>ERR-7: Diagnostic Information (TX)</li>
///<li>ERR-8: User Message (TX)</li>
///<li>ERR-9: Inform Person Indicator (CWE)</li>
///<li>ERR-10: Override Type (CWE)</li>
///<li>ERR-11: Override Reason Code (CWE)</li>
///<li>ERR-12: Help Desk Contact Point (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ERR : AbstractSegment  {

  /**
   * Creates a ERR (Error) segment object that belongs to the given 
   * message.  
   */
	public ERR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Error Code and Location");
       this.add(typeof(ERL), false, 0, 0, new System.Object[]{message}, "Error Location");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "HL7 Error Code");
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 516}, "Severity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Application Error Code");
       this.add(typeof(ST), false, 10, 0, new System.Object[]{message}, "Application Error Parameter");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Diagnostic Information");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "User Message");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Inform Person Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Override Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Override Reason Code");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Help Desk Contact Point");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Error Code and Location(ERR-1).
	///</summary>
	public - ErrorCodeAndLocation
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Error Location(ERR-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ERL GetErrorLocation(int rep)
	{
			ERL ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (ERL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Error Location (ERR-2).
   ///</summary>
  public ERL[] GetErrorLocation() {
     ERL[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new ERL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ERL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Error Location (ERR-2).
   ///</summary>
  public int ErrorLocationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns HL7 Error Code(ERR-3).
	///</summary>
	public CWE HL7ErrorCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Severity(ERR-4).
	///</summary>
	public ID Severity
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Application Error Code(ERR-5).
	///</summary>
	public CWE ApplicationErrorCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Application Error Parameter(ERR-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetApplicationErrorParameter(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Application Error Parameter (ERR-6).
   ///</summary>
  public ST[] GetApplicationErrorParameter() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Application Error Parameter (ERR-6).
   ///</summary>
  public int ApplicationErrorParameterRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Diagnostic Information(ERR-7).
	///</summary>
	public TX DiagnosticInformation
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns User Message(ERR-8).
	///</summary>
	public TX UserMessage
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Inform Person Indicator(ERR-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetInformPersonIndicator(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Inform Person Indicator (ERR-9).
   ///</summary>
  public CWE[] GetInformPersonIndicator() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Inform Person Indicator (ERR-9).
   ///</summary>
  public int InformPersonIndicatorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Override Type(ERR-10).
	///</summary>
	public CWE OverrideType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Override Reason Code(ERR-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetOverrideReasonCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Override Reason Code (ERR-11).
   ///</summary>
  public CWE[] GetOverrideReasonCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Override Reason Code (ERR-11).
   ///</summary>
  public int OverrideReasonCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Help Desk Contact Point(ERR-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetHelpDeskContactPoint(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Help Desk Contact Point (ERR-12).
   ///</summary>
  public XTN[] GetHelpDeskContactPoint() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Help Desk Contact Point (ERR-12).
   ///</summary>
  public int HelpDeskContactPointRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\EVN.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 EVN message segment. 
/// This segment has the following fields:<ol>
///<li>EVN-1: Event Type Code (-)</li>
///<li>EVN-2: Recorded Date/Time (DTM)</li>
///<li>EVN-3: Date/Time Planned Event (DTM)</li>
///<li>EVN-4: Event Reason Code (CWE)</li>
///<li>EVN-5: Operator ID (XCN)</li>
///<li>EVN-6: Event Occurred (DTM)</li>
///<li>EVN-7: Event Facility (HD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class EVN : AbstractSegment  {

  /**
   * Creates a EVN (Event Type) segment object that belongs to the given 
   * message.  
   */
	public EVN(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Event Type Code");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Recorded Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time Planned Event");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Event Reason Code");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Operator ID");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Event Occurred");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Event Facility");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Event Type Code(EVN-1).
	///</summary>
	public - EventTypeCode
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recorded Date/Time(EVN-2).
	///</summary>
	public DTM RecordedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Planned Event(EVN-3).
	///</summary>
	public DTM DateTimePlannedEvent
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Reason Code(EVN-4).
	///</summary>
	public CWE EventReasonCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Operator ID(EVN-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOperatorID(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Operator ID (EVN-5).
   ///</summary>
  public XCN[] GetOperatorID() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Operator ID (EVN-5).
   ///</summary>
  public int OperatorIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Event Occurred(EVN-6).
	///</summary>
	public DTM EventOccurred
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Facility(EVN-7).
	///</summary>
	public HD EventFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\FAC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 FAC message segment. 
/// This segment has the following fields:<ol>
///<li>FAC-1: Facility ID-FAC (EI)</li>
///<li>FAC-2: Facility Type (ID)</li>
///<li>FAC-3: Facility Address (XAD)</li>
///<li>FAC-4: Facility Telecommunication (XTN)</li>
///<li>FAC-5: Contact Person (XCN)</li>
///<li>FAC-6: Contact Title (ST)</li>
///<li>FAC-7: Contact Address (XAD)</li>
///<li>FAC-8: Contact Telecommunication (XTN)</li>
///<li>FAC-9: Signature Authority (XCN)</li>
///<li>FAC-10: Signature Authority Title (ST)</li>
///<li>FAC-11: Signature Authority Address (XAD)</li>
///<li>FAC-12: Signature Authority Telecommunication (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class FAC : AbstractSegment  {

  /**
   * Creates a FAC (Facility) segment object that belongs to the given 
   * message.  
   */
	public FAC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Facility ID-FAC");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 331}, "Facility Type");
       this.add(typeof(XAD), true, 0, 0, new System.Object[]{message}, "Facility Address");
       this.add(typeof(XTN), true, 1, 0, new System.Object[]{message}, "Facility Telecommunication");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Contact Person");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Contact Title");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Contact Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Contact Telecommunication");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Signature Authority");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Signature Authority Title");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Signature Authority Address");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Signature Authority Telecommunication");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Facility ID-FAC(FAC-1).
	///</summary>
	public EI FacilityIDFAC
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Facility Type(FAC-2).
	///</summary>
	public ID FacilityType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Facility Address(FAC-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetFacilityAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Facility Address (FAC-3).
   ///</summary>
  public XAD[] GetFacilityAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Facility Address (FAC-3).
   ///</summary>
  public int FacilityAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Facility Telecommunication(FAC-4).
	///</summary>
	public XTN FacilityTelecommunication
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contact Person(FAC-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetContactPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Person (FAC-5).
   ///</summary>
  public XCN[] GetContactPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Person (FAC-5).
   ///</summary>
  public int ContactPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Title(FAC-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetContactTitle(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Title (FAC-6).
   ///</summary>
  public ST[] GetContactTitle() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Title (FAC-6).
   ///</summary>
  public int ContactTitleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Address(FAC-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetContactAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Address (FAC-7).
   ///</summary>
  public XAD[] GetContactAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Address (FAC-7).
   ///</summary>
  public int ContactAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Telecommunication(FAC-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetContactTelecommunication(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Telecommunication (FAC-8).
   ///</summary>
  public XTN[] GetContactTelecommunication() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Telecommunication (FAC-8).
   ///</summary>
  public int ContactTelecommunicationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Signature Authority(FAC-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetSignatureAuthority(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Signature Authority (FAC-9).
   ///</summary>
  public XCN[] GetSignatureAuthority() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Signature Authority (FAC-9).
   ///</summary>
  public int SignatureAuthorityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Signature Authority Title(FAC-10).
	///</summary>
	public ST SignatureAuthorityTitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Signature Authority Address(FAC-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetSignatureAuthorityAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Signature Authority Address (FAC-11).
   ///</summary>
  public XAD[] GetSignatureAuthorityAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Signature Authority Address (FAC-11).
   ///</summary>
  public int SignatureAuthorityAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Signature Authority Telecommunication(FAC-12).
	///</summary>
	public XTN SignatureAuthorityTelecommunication
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\FHS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 FHS message segment. 
/// This segment has the following fields:<ol>
///<li>FHS-1: File Field Separator (ST)</li>
///<li>FHS-2: File Encoding Characters (ST)</li>
///<li>FHS-3: File Sending Application (HD)</li>
///<li>FHS-4: File Sending Facility (HD)</li>
///<li>FHS-5: File Receiving Application (HD)</li>
///<li>FHS-6: File Receiving Facility (HD)</li>
///<li>FHS-7: File Creation Date/Time (DTM)</li>
///<li>FHS-8: File Security (ST)</li>
///<li>FHS-9: File Name/ID (ST)</li>
///<li>FHS-10: File Header Comment (ST)</li>
///<li>FHS-11: File Control ID (ST)</li>
///<li>FHS-12: Reference File Control ID (ST)</li>
///<li>FHS-13: File Sending Network Address (HD)</li>
///<li>FHS-14: File Receiving Network Address (HD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class FHS : AbstractSegment  {

  /**
   * Creates a FHS (File Header) segment object that belongs to the given 
   * message.  
   */
	public FHS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), true, 1, 1, new System.Object[]{message}, "File Field Separator");
       this.add(typeof(ST), true, 1, 5, new System.Object[]{message}, "File Encoding Characters");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "File Sending Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "File Sending Facility");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "File Receiving Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "File Receiving Facility");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "File Creation Date/Time");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "File Security");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "File Name/ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "File Header Comment");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "File Control ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Reference File Control ID");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "File Sending Network Address");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "File Receiving Network Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns File Field Separator(FHS-1).
	///</summary>
	public ST FileFieldSeparator
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Encoding Characters(FHS-2).
	///</summary>
	public ST FileEncodingCharacters
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Sending Application(FHS-3).
	///</summary>
	public HD FileSendingApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Sending Facility(FHS-4).
	///</summary>
	public HD FileSendingFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Receiving Application(FHS-5).
	///</summary>
	public HD FileReceivingApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Receiving Facility(FHS-6).
	///</summary>
	public HD FileReceivingFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Creation Date/Time(FHS-7).
	///</summary>
	public DTM FileCreationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Security(FHS-8).
	///</summary>
	public ST FileSecurity
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Name/ID(FHS-9).
	///</summary>
	public ST FileNameID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Header Comment(FHS-10).
	///</summary>
	public ST FileHeaderComment
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Control ID(FHS-11).
	///</summary>
	public ST FileControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reference File Control ID(FHS-12).
	///</summary>
	public ST ReferenceFileControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Sending Network Address(FHS-13).
	///</summary>
	public HD FileSendingNetworkAddress
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Receiving Network Address(FHS-14).
	///</summary>
	public HD FileReceivingNetworkAddress
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\FT1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 FT1 message segment. 
/// This segment has the following fields:<ol>
///<li>FT1-1: Set ID - FT1 (SI)</li>
///<li>FT1-2: Transaction ID (ST)</li>
///<li>FT1-3: Transaction Batch ID (ST)</li>
///<li>FT1-4: Transaction Date (DR)</li>
///<li>FT1-5: Transaction Posting Date (DTM)</li>
///<li>FT1-6: Transaction Type (CWE)</li>
///<li>FT1-7: Transaction Code (CWE)</li>
///<li>FT1-8: Transaction Description (-)</li>
///<li>FT1-9: Transaction Description - Alt (-)</li>
///<li>FT1-10: Transaction Quantity (NM)</li>
///<li>FT1-11: Transaction Amount - Extended (CP)</li>
///<li>FT1-12: Transaction amount - unit (CP)</li>
///<li>FT1-13: Department Code (CWE)</li>
///<li>FT1-14: Health Plan ID (CWE)</li>
///<li>FT1-15: Insurance Amount (CP)</li>
///<li>FT1-16: Assigned Patient Location (PL)</li>
///<li>FT1-17: Fee Schedule (CWE)</li>
///<li>FT1-18: Patient Type (CWE)</li>
///<li>FT1-19: Diagnosis Code - FT1 (CWE)</li>
///<li>FT1-20: Performed By Code (XCN)</li>
///<li>FT1-21: Ordered By Code (XCN)</li>
///<li>FT1-22: Unit Cost (CP)</li>
///<li>FT1-23: Filler Order Number (EI)</li>
///<li>FT1-24: Entered By Code (XCN)</li>
///<li>FT1-25: Procedure Code (CNE)</li>
///<li>FT1-26: Procedure Code Modifier (CNE)</li>
///<li>FT1-27: Advanced Beneficiary Notice Code (CWE)</li>
///<li>FT1-28: Medically Necessary Duplicate Procedure Reason (CWE)</li>
///<li>FT1-29: NDC Code (CWE)</li>
///<li>FT1-30: Payment Reference ID (CX)</li>
///<li>FT1-31: Transaction Reference Key (SI)</li>
///<li>FT1-32: Performing Facility (XON)</li>
///<li>FT1-33: Ordering Facility (XON)</li>
///<li>FT1-34: Item Number (CWE)</li>
///<li>FT1-35: Model Number (ST)</li>
///<li>FT1-36: Special Processing Code (CWE)</li>
///<li>FT1-37: Clinic Code (CWE)</li>
///<li>FT1-38: Referral Number (CX)</li>
///<li>FT1-39: Authorization Number (CX)</li>
///<li>FT1-40: Service Provider Taxonomy Code (CWE)</li>
///<li>FT1-41: Revenue Code (CWE)</li>
///<li>FT1-42: Prescription Number (ST)</li>
///<li>FT1-43: NDC Qty and UOM (CQ)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class FT1 : AbstractSegment  {

  /**
   * Creates a FT1 (Financial Transaction) segment object that belongs to the given 
   * message.  
   */
	public FT1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - FT1");
       this.add(typeof(ST), false, 1, 12, new System.Object[]{message}, "Transaction ID");
       this.add(typeof(ST), false, 1, 10, new System.Object[]{message}, "Transaction Batch ID");
       this.add(typeof(DR), true, 1, 0, new System.Object[]{message}, "Transaction Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Transaction Posting Date");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Transaction Type");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Transaction Code");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Transaction Description");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Transaction Description - Alt");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Transaction Quantity");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Transaction Amount - Extended");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Transaction amount - unit");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Department Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Health Plan ID");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Insurance Amount");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Assigned Patient Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Fee Schedule");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Diagnosis Code - FT1");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Performed By Code");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Ordered By Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Unit Cost");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Filler Order Number");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Entered By Code");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "Procedure Code Modifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Advanced Beneficiary Notice Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Medically Necessary Duplicate Procedure Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "NDC Code");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Payment Reference ID");
       this.add(typeof(SI), false, 0, 4, new System.Object[]{message}, "Transaction Reference Key");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Performing Facility");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Ordering Facility");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Model Number");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Special Processing Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Clinic Code");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Referral Number");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Authorization Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Service Provider Taxonomy Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Revenue Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Prescription Number");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "NDC Qty and UOM");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - FT1(FT1-1).
	///</summary>
	public SI SetIDFT1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction ID(FT1-2).
	///</summary>
	public ST TransactionID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Batch ID(FT1-3).
	///</summary>
	public ST TransactionBatchID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Date(FT1-4).
	///</summary>
	public DR TransactionDate
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Posting Date(FT1-5).
	///</summary>
	public DTM TransactionPostingDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Type(FT1-6).
	///</summary>
	public CWE TransactionType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Code(FT1-7).
	///</summary>
	public CWE TransactionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Description(FT1-8).
	///</summary>
	public - TransactionDescription
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Description - Alt(FT1-9).
	///</summary>
	public - TransactionDescriptionAlt
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Quantity(FT1-10).
	///</summary>
	public NM TransactionQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Amount - Extended(FT1-11).
	///</summary>
	public CP TransactionAmountExtended
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction amount - unit(FT1-12).
	///</summary>
	public CP TransactionAmountUnit
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Department Code(FT1-13).
	///</summary>
	public CWE DepartmentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Health Plan ID(FT1-14).
	///</summary>
	public CWE HealthPlanID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Insurance Amount(FT1-15).
	///</summary>
	public CP InsuranceAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Assigned Patient Location(FT1-16).
	///</summary>
	public PL AssignedPatientLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Fee Schedule(FT1-17).
	///</summary>
	public CWE FeeSchedule
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Type(FT1-18).
	///</summary>
	public CWE PatientType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Diagnosis Code - FT1(FT1-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetDiagnosisCodeFT1(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Diagnosis Code - FT1 (FT1-19).
   ///</summary>
  public CWE[] GetDiagnosisCodeFT1() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Diagnosis Code - FT1 (FT1-19).
   ///</summary>
  public int DiagnosisCodeFT1RepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Performed By Code(FT1-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPerformedByCode(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Performed By Code (FT1-20).
   ///</summary>
  public XCN[] GetPerformedByCode() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Performed By Code (FT1-20).
   ///</summary>
  public int PerformedByCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ordered By Code(FT1-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOrderedByCode(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordered By Code (FT1-21).
   ///</summary>
  public XCN[] GetOrderedByCode() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordered By Code (FT1-21).
   ///</summary>
  public int OrderedByCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Unit Cost(FT1-22).
	///</summary>
	public CP UnitCost
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Order Number(FT1-23).
	///</summary>
	public EI FillerOrderNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Entered By Code(FT1-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetEnteredByCode(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Entered By Code (FT1-24).
   ///</summary>
  public XCN[] GetEnteredByCode() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Entered By Code (FT1-24).
   ///</summary>
  public int EnteredByCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Procedure Code(FT1-25).
	///</summary>
	public CNE ProcedureCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Procedure Code Modifier(FT1-26).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetProcedureCodeModifier(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(26, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Procedure Code Modifier (FT1-26).
   ///</summary>
  public CNE[] GetProcedureCodeModifier() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(26);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Procedure Code Modifier (FT1-26).
   ///</summary>
  public int ProcedureCodeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(26);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Advanced Beneficiary Notice Code(FT1-27).
	///</summary>
	public CWE AdvancedBeneficiaryNoticeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Medically Necessary Duplicate Procedure Reason(FT1-28).
	///</summary>
	public CWE MedicallyNecessaryDuplicateProcedureReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns NDC Code(FT1-29).
	///</summary>
	public CWE NDCCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment Reference ID(FT1-30).
	///</summary>
	public CX PaymentReferenceID
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Transaction Reference Key(FT1-31).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SI GetTransactionReferenceKey(int rep)
	{
			SI ret = null;
			try
			{
			IType t = this.GetField(31, rep);
				ret = (SI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Transaction Reference Key (FT1-31).
   ///</summary>
  public SI[] GetTransactionReferenceKey() {
     SI[] ret = null;
    try {
        IType[] t = this.GetField(31);  
        ret = new SI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Transaction Reference Key (FT1-31).
   ///</summary>
  public int TransactionReferenceKeyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(31);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Performing Facility(FT1-32).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetPerformingFacility(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(32, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Performing Facility (FT1-32).
   ///</summary>
  public XON[] GetPerformingFacility() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(32);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Performing Facility (FT1-32).
   ///</summary>
  public int PerformingFacilityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(32);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Ordering Facility(FT1-33).
	///</summary>
	public XON OrderingFacility
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Number(FT1-34).
	///</summary>
	public CWE ItemNumber
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Model Number(FT1-35).
	///</summary>
	public ST ModelNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Special Processing Code(FT1-36).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecialProcessingCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Special Processing Code (FT1-36).
   ///</summary>
  public CWE[] GetSpecialProcessingCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(36);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Special Processing Code (FT1-36).
   ///</summary>
  public int SpecialProcessingCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(36);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Clinic Code(FT1-37).
	///</summary>
	public CWE ClinicCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Referral Number(FT1-38).
	///</summary>
	public CX ReferralNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorization Number(FT1-39).
	///</summary>
	public CX AuthorizationNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Service Provider Taxonomy Code(FT1-40).
	///</summary>
	public CWE ServiceProviderTaxonomyCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Revenue Code(FT1-41).
	///</summary>
	public CWE RevenueCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prescription Number(FT1-42).
	///</summary>
	public ST PrescriptionNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns NDC Qty and UOM(FT1-43).
	///</summary>
	public CQ NDCQtyAndUOM
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\FTS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 FTS message segment. 
/// This segment has the following fields:<ol>
///<li>FTS-1: File Batch Count (NM)</li>
///<li>FTS-2: File Trailer Comment (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class FTS : AbstractSegment  {

  /**
   * Creates a FTS (File Trailer) segment object that belongs to the given 
   * message.  
   */
	public FTS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "File Batch Count");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "File Trailer Comment");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns File Batch Count(FTS-1).
	///</summary>
	public NM FileBatchCount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns File Trailer Comment(FTS-2).
	///</summary>
	public ST FileTrailerComment
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\GOL.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 GOL message segment. 
/// This segment has the following fields:<ol>
///<li>GOL-1: Action Code (ID)</li>
///<li>GOL-2: Action Date/Time (DTM)</li>
///<li>GOL-3: Goal ID (CWE)</li>
///<li>GOL-4: Goal Instance ID (EI)</li>
///<li>GOL-5: Episode of Care ID (EI)</li>
///<li>GOL-6: Goal List Priority (NM)</li>
///<li>GOL-7: Goal Established Date/Time (DTM)</li>
///<li>GOL-8: Expected Goal Achieve Date/Time (DTM)</li>
///<li>GOL-9: Goal Classification (CWE)</li>
///<li>GOL-10: Goal Management Discipline (CWE)</li>
///<li>GOL-11: Current Goal Review Status (CWE)</li>
///<li>GOL-12: Current Goal Review Date/Time (DTM)</li>
///<li>GOL-13: Next Goal Review Date/Time (DTM)</li>
///<li>GOL-14: Previous Goal Review Date/Time (DTM)</li>
///<li>GOL-15: Goal Review Interval (-)</li>
///<li>GOL-16: Goal Evaluation (CWE)</li>
///<li>GOL-17: Goal Evaluation Comment (ST)</li>
///<li>GOL-18: Goal Life Cycle Status (CWE)</li>
///<li>GOL-19: Goal Life Cycle Status Date/Time (DTM)</li>
///<li>GOL-20: Goal Target Type (CWE)</li>
///<li>GOL-21: Goal Target Name (XPN)</li>
///<li>GOL-22: Mood Code (CNE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class GOL : AbstractSegment  {

  /**
   * Creates a GOL (Goal Detail) segment object that belongs to the given 
   * message.  
   */
	public GOL(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 287}, "Action Code");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Action Date/Time");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Goal ID");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Goal Instance ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Episode of Care ID");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Goal List Priority");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Goal Established Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected Goal Achieve Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Goal Classification");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Goal Management Discipline");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Current Goal Review Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Current Goal Review Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Next Goal Review Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Previous Goal Review Date/Time");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Goal Review Interval");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Goal Evaluation");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Goal Evaluation Comment");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Goal Life Cycle Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Goal Life Cycle Status Date/Time");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Goal Target Type");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Goal Target Name");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Mood Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Action Code(GOL-1).
	///</summary>
	public ID ActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Date/Time(GOL-2).
	///</summary>
	public DTM ActionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal ID(GOL-3).
	///</summary>
	public CWE GoalID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Instance ID(GOL-4).
	///</summary>
	public EI GoalInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Episode of Care ID(GOL-5).
	///</summary>
	public EI EpisodeOfCareID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal List Priority(GOL-6).
	///</summary>
	public NM GoalListPriority
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Established Date/Time(GOL-7).
	///</summary>
	public DTM GoalEstablishedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Goal Achieve Date/Time(GOL-8).
	///</summary>
	public DTM ExpectedGoalAchieveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Classification(GOL-9).
	///</summary>
	public CWE GoalClassification
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Management Discipline(GOL-10).
	///</summary>
	public CWE GoalManagementDiscipline
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Goal Review Status(GOL-11).
	///</summary>
	public CWE CurrentGoalReviewStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Goal Review Date/Time(GOL-12).
	///</summary>
	public DTM CurrentGoalReviewDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Next Goal Review Date/Time(GOL-13).
	///</summary>
	public DTM NextGoalReviewDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Previous Goal Review Date/Time(GOL-14).
	///</summary>
	public DTM PreviousGoalReviewDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Review Interval(GOL-15).
	///</summary>
	public - GoalReviewInterval
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Evaluation(GOL-16).
	///</summary>
	public CWE GoalEvaluation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Goal Evaluation Comment(GOL-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetGoalEvaluationComment(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Goal Evaluation Comment (GOL-17).
   ///</summary>
  public ST[] GetGoalEvaluationComment() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Goal Evaluation Comment (GOL-17).
   ///</summary>
  public int GoalEvaluationCommentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Goal Life Cycle Status(GOL-18).
	///</summary>
	public CWE GoalLifeCycleStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Goal Life Cycle Status Date/Time(GOL-19).
	///</summary>
	public DTM GoalLifeCycleStatusDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Goal Target Type(GOL-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetGoalTargetType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Goal Target Type (GOL-20).
   ///</summary>
  public CWE[] GetGoalTargetType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Goal Target Type (GOL-20).
   ///</summary>
  public int GoalTargetTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Goal Target Name(GOL-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetGoalTargetName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Goal Target Name (GOL-21).
   ///</summary>
  public XPN[] GetGoalTargetName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Goal Target Name (GOL-21).
   ///</summary>
  public int GoalTargetNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Mood Code(GOL-22).
	///</summary>
	public CNE MoodCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\GP1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 GP1 message segment. 
/// This segment has the following fields:<ol>
///<li>GP1-1: Type of Bill Code (CWE)</li>
///<li>GP1-2: Revenue Code (CWE)</li>
///<li>GP1-3: Overall Claim Disposition Code (CWE)</li>
///<li>GP1-4: OCE Edits per Visit Code (CWE)</li>
///<li>GP1-5: Outlier Cost (CP)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class GP1 : AbstractSegment  {

  /**
   * Creates a GP1 (Grouping/Reimbursement - Visit) segment object that belongs to the given 
   * message.  
   */
	public GP1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Type of Bill Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Revenue Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Overall Claim Disposition Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "OCE Edits per Visit Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Outlier Cost");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Type of Bill Code(GP1-1).
	///</summary>
	public CWE TypeOfBillCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Revenue Code(GP1-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRevenueCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Revenue Code (GP1-2).
   ///</summary>
  public CWE[] GetRevenueCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Revenue Code (GP1-2).
   ///</summary>
  public int RevenueCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Overall Claim Disposition Code(GP1-3).
	///</summary>
	public CWE OverallClaimDispositionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of OCE Edits per Visit Code(GP1-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetOCEEditsPerVisitCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of OCE Edits per Visit Code (GP1-4).
   ///</summary>
  public CWE[] GetOCEEditsPerVisitCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of OCE Edits per Visit Code (GP1-4).
   ///</summary>
  public int OCEEditsPerVisitCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Outlier Cost(GP1-5).
	///</summary>
	public CP OutlierCost
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\GP2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 GP2 message segment. 
/// This segment has the following fields:<ol>
///<li>GP2-1: Revenue Code (CWE)</li>
///<li>GP2-2: Number of Service Units (NM)</li>
///<li>GP2-3: Charge (CP)</li>
///<li>GP2-4: Reimbursement Action Code (CWE)</li>
///<li>GP2-5: Denial or Rejection Code (CWE)</li>
///<li>GP2-6: OCE Edit Code (CWE)</li>
///<li>GP2-7: Ambulatory Payment Classification Code (CWE)</li>
///<li>GP2-8: Modifier Edit Code (CWE)</li>
///<li>GP2-9: Payment Adjustment Code (CWE)</li>
///<li>GP2-10: Packaging Status Code (CWE)</li>
///<li>GP2-11: Expected CMS Payment Amount (CP)</li>
///<li>GP2-12: Reimbursement Type Code (CWE)</li>
///<li>GP2-13: Co-Pay Amount (CP)</li>
///<li>GP2-14: Pay Rate per Service Unit (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class GP2 : AbstractSegment  {

  /**
   * Creates a GP2 (Grouping/Reimbursement - Procedure Line Item) segment object that belongs to the given 
   * message.  
   */
	public GP2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Revenue Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Service Units");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Charge");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Reimbursement Action Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Denial or Rejection Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "OCE Edit Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Ambulatory Payment Classification Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Modifier Edit Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Payment Adjustment Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Packaging Status Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Expected CMS Payment Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Reimbursement Type Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Co-Pay Amount");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Pay Rate per Service Unit");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Revenue Code(GP2-1).
	///</summary>
	public CWE RevenueCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Service Units(GP2-2).
	///</summary>
	public NM NumberOfServiceUnits
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Charge(GP2-3).
	///</summary>
	public CP Charge
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reimbursement Action Code(GP2-4).
	///</summary>
	public CWE ReimbursementActionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Denial or Rejection Code(GP2-5).
	///</summary>
	public CWE DenialOrRejectionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of OCE Edit Code(GP2-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetOCEEditCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of OCE Edit Code (GP2-6).
   ///</summary>
  public CWE[] GetOCEEditCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of OCE Edit Code (GP2-6).
   ///</summary>
  public int OCEEditCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Ambulatory Payment Classification Code(GP2-7).
	///</summary>
	public CWE AmbulatoryPaymentClassificationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Modifier Edit Code(GP2-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetModifierEditCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Modifier Edit Code (GP2-8).
   ///</summary>
  public CWE[] GetModifierEditCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Modifier Edit Code (GP2-8).
   ///</summary>
  public int ModifierEditCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Payment Adjustment Code(GP2-9).
	///</summary>
	public CWE PaymentAdjustmentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Packaging Status Code(GP2-10).
	///</summary>
	public CWE PackagingStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected CMS Payment Amount(GP2-11).
	///</summary>
	public CP ExpectedCMSPaymentAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reimbursement Type Code(GP2-12).
	///</summary>
	public CWE ReimbursementTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Co-Pay Amount(GP2-13).
	///</summary>
	public CP CoPayAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pay Rate per Service Unit(GP2-14).
	///</summary>
	public NM PayRatePerServiceUnit
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\GT1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 GT1 message segment. 
/// This segment has the following fields:<ol>
///<li>GT1-1: Set ID - GT1 (SI)</li>
///<li>GT1-2: Guarantor Number (CX)</li>
///<li>GT1-3: Guarantor Name (XPN)</li>
///<li>GT1-4: Guarantor Spouse Name (XPN)</li>
///<li>GT1-5: Guarantor Address (XAD)</li>
///<li>GT1-6: Guarantor Ph Num - Home (XTN)</li>
///<li>GT1-7: Guarantor Ph Num - Business (XTN)</li>
///<li>GT1-8: Guarantor Date/Time Of Birth (DTM)</li>
///<li>GT1-9: Guarantor Administrative Sex (CWE)</li>
///<li>GT1-10: Guarantor Type (CWE)</li>
///<li>GT1-11: Guarantor Relationship (CWE)</li>
///<li>GT1-12: Guarantor SSN (ST)</li>
///<li>GT1-13: Guarantor Date - Begin (DT)</li>
///<li>GT1-14: Guarantor Date - End (DT)</li>
///<li>GT1-15: Guarantor Priority (NM)</li>
///<li>GT1-16: Guarantor Employer Name (XPN)</li>
///<li>GT1-17: Guarantor Employer Address (XAD)</li>
///<li>GT1-18: Guarantor Employer Phone Number (XTN)</li>
///<li>GT1-19: Guarantor Employee ID Number (CX)</li>
///<li>GT1-20: Guarantor Employment Status (CWE)</li>
///<li>GT1-21: Guarantor Organization Name (XON)</li>
///<li>GT1-22: Guarantor Billing Hold Flag (ID)</li>
///<li>GT1-23: Guarantor Credit Rating Code (CWE)</li>
///<li>GT1-24: Guarantor Death Date And Time (DTM)</li>
///<li>GT1-25: Guarantor Death Flag (ID)</li>
///<li>GT1-26: Guarantor Charge Adjustment Code (CWE)</li>
///<li>GT1-27: Guarantor Household Annual Income (CP)</li>
///<li>GT1-28: Guarantor Household Size (NM)</li>
///<li>GT1-29: Guarantor Employer ID Number (CX)</li>
///<li>GT1-30: Guarantor Marital Status Code (CWE)</li>
///<li>GT1-31: Guarantor Hire Effective Date (DT)</li>
///<li>GT1-32: Employment Stop Date (DT)</li>
///<li>GT1-33: Living Dependency (CWE)</li>
///<li>GT1-34: Ambulatory Status (CWE)</li>
///<li>GT1-35: Citizenship (CWE)</li>
///<li>GT1-36: Primary Language (CWE)</li>
///<li>GT1-37: Living Arrangement (CWE)</li>
///<li>GT1-38: Publicity Code (CWE)</li>
///<li>GT1-39: Protection Indicator (ID)</li>
///<li>GT1-40: Student Indicator (CWE)</li>
///<li>GT1-41: Religion (CWE)</li>
///<li>GT1-42: Mother's Maiden Name (XPN)</li>
///<li>GT1-43: Nationality (CWE)</li>
///<li>GT1-44: Ethnic Group (CWE)</li>
///<li>GT1-45: Contact Person's Name (XPN)</li>
///<li>GT1-46: Contact Person's Telephone Number (XTN)</li>
///<li>GT1-47: Contact Reason (CWE)</li>
///<li>GT1-48: Contact Relationship (CWE)</li>
///<li>GT1-49: Job Title (ST)</li>
///<li>GT1-50: Job Code/Class (JCC)</li>
///<li>GT1-51: Guarantor Employer's Organization Name (XON)</li>
///<li>GT1-52: Handicap (CWE)</li>
///<li>GT1-53: Job Status (CWE)</li>
///<li>GT1-54: Guarantor Financial Class (FC)</li>
///<li>GT1-55: Guarantor Race (CWE)</li>
///<li>GT1-56: Guarantor Birth Place (ST)</li>
///<li>GT1-57: VIP Indicator (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class GT1 : AbstractSegment  {

  /**
   * Creates a GT1 (Guarantor) segment object that belongs to the given 
   * message.  
   */
	public GT1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - GT1");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Guarantor Number");
       this.add(typeof(XPN), true, 0, 0, new System.Object[]{message}, "Guarantor Name");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Guarantor Spouse Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Guarantor Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Guarantor Ph Num - Home");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Guarantor Ph Num - Business");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Guarantor Date/Time Of Birth");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Administrative Sex");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Relationship");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Guarantor SSN");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Guarantor Date - Begin");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Guarantor Date - End");
       this.add(typeof(NM), false, 1, 2, new System.Object[]{message}, "Guarantor Priority");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Guarantor Employer Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Guarantor Employer Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Guarantor Employer Phone Number");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Guarantor Employee ID Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Employment Status");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Guarantor Organization Name");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Guarantor Billing Hold Flag");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Credit Rating Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Guarantor Death Date And Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Guarantor Death Flag");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Charge Adjustment Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Guarantor Household Annual Income");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Guarantor Household Size");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Guarantor Employer ID Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor Marital Status Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Guarantor Hire Effective Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Employment Stop Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Dependency");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ambulatory Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Citizenship");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Primary Language");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Arrangement");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Publicity Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Protection Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Student Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Religion");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Mother's Maiden Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Nationality");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ethnic Group");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Contact Person's Name");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Contact Person's Telephone Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Contact Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Contact Relationship");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Job Title");
       this.add(typeof(JCC), false, 1, 0, new System.Object[]{message}, "Job Code/Class");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Guarantor Employer's Organization Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Handicap");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Job Status");
       this.add(typeof(FC), false, 1, 0, new System.Object[]{message}, "Guarantor Financial Class");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Guarantor Race");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Guarantor Birth Place");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "VIP Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - GT1(GT1-1).
	///</summary>
	public SI SetIDGT1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Guarantor Number(GT1-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetGuarantorNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Number (GT1-2).
   ///</summary>
  public CX[] GetGuarantorNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Number (GT1-2).
   ///</summary>
  public int GuarantorNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Name(GT1-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetGuarantorName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Name (GT1-3).
   ///</summary>
  public XPN[] GetGuarantorName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Name (GT1-3).
   ///</summary>
  public int GuarantorNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Spouse Name(GT1-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetGuarantorSpouseName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Spouse Name (GT1-4).
   ///</summary>
  public XPN[] GetGuarantorSpouseName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Spouse Name (GT1-4).
   ///</summary>
  public int GuarantorSpouseNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Address(GT1-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetGuarantorAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Address (GT1-5).
   ///</summary>
  public XAD[] GetGuarantorAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Address (GT1-5).
   ///</summary>
  public int GuarantorAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Ph Num - Home(GT1-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetGuarantorPhNumHome(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Ph Num - Home (GT1-6).
   ///</summary>
  public XTN[] GetGuarantorPhNumHome() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Ph Num - Home (GT1-6).
   ///</summary>
  public int GuarantorPhNumHomeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Ph Num - Business(GT1-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetGuarantorPhNumBusiness(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Ph Num - Business (GT1-7).
   ///</summary>
  public XTN[] GetGuarantorPhNumBusiness() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Ph Num - Business (GT1-7).
   ///</summary>
  public int GuarantorPhNumBusinessRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Guarantor Date/Time Of Birth(GT1-8).
	///</summary>
	public DTM GuarantorDateTimeOfBirth
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Administrative Sex(GT1-9).
	///</summary>
	public CWE GuarantorAdministrativeSex
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Type(GT1-10).
	///</summary>
	public CWE GuarantorType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Relationship(GT1-11).
	///</summary>
	public CWE GuarantorRelationship
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor SSN(GT1-12).
	///</summary>
	public ST GuarantorSSN
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Date - Begin(GT1-13).
	///</summary>
	public DT GuarantorDateBegin
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Date - End(GT1-14).
	///</summary>
	public DT GuarantorDateEnd
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Priority(GT1-15).
	///</summary>
	public NM GuarantorPriority
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Guarantor Employer Name(GT1-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetGuarantorEmployerName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Employer Name (GT1-16).
   ///</summary>
  public XPN[] GetGuarantorEmployerName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Employer Name (GT1-16).
   ///</summary>
  public int GuarantorEmployerNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Employer Address(GT1-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetGuarantorEmployerAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Employer Address (GT1-17).
   ///</summary>
  public XAD[] GetGuarantorEmployerAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Employer Address (GT1-17).
   ///</summary>
  public int GuarantorEmployerAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Employer Phone Number(GT1-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetGuarantorEmployerPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Employer Phone Number (GT1-18).
   ///</summary>
  public XTN[] GetGuarantorEmployerPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Employer Phone Number (GT1-18).
   ///</summary>
  public int GuarantorEmployerPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Guarantor Employee ID Number(GT1-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetGuarantorEmployeeIDNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Employee ID Number (GT1-19).
   ///</summary>
  public CX[] GetGuarantorEmployeeIDNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Employee ID Number (GT1-19).
   ///</summary>
  public int GuarantorEmployeeIDNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Guarantor Employment Status(GT1-20).
	///</summary>
	public CWE GuarantorEmploymentStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Guarantor Organization Name(GT1-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetGuarantorOrganizationName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Organization Name (GT1-21).
   ///</summary>
  public XON[] GetGuarantorOrganizationName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Organization Name (GT1-21).
   ///</summary>
  public int GuarantorOrganizationNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Guarantor Billing Hold Flag(GT1-22).
	///</summary>
	public ID GuarantorBillingHoldFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Credit Rating Code(GT1-23).
	///</summary>
	public CWE GuarantorCreditRatingCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Death Date And Time(GT1-24).
	///</summary>
	public DTM GuarantorDeathDateAndTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Death Flag(GT1-25).
	///</summary>
	public ID GuarantorDeathFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Charge Adjustment Code(GT1-26).
	///</summary>
	public CWE GuarantorChargeAdjustmentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Household Annual Income(GT1-27).
	///</summary>
	public CP GuarantorHouseholdAnnualIncome
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Household Size(GT1-28).
	///</summary>
	public NM GuarantorHouseholdSize
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Guarantor Employer ID Number(GT1-29).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetGuarantorEmployerIDNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(29, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Employer ID Number (GT1-29).
   ///</summary>
  public CX[] GetGuarantorEmployerIDNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(29);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Employer ID Number (GT1-29).
   ///</summary>
  public int GuarantorEmployerIDNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(29);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Guarantor Marital Status Code(GT1-30).
	///</summary>
	public CWE GuarantorMaritalStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Hire Effective Date(GT1-31).
	///</summary>
	public DT GuarantorHireEffectiveDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Employment Stop Date(GT1-32).
	///</summary>
	public DT EmploymentStopDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Dependency(GT1-33).
	///</summary>
	public CWE LivingDependency
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ambulatory Status(GT1-34).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAmbulatoryStatus(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ambulatory Status (GT1-34).
   ///</summary>
  public CWE[] GetAmbulatoryStatus() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(34);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ambulatory Status (GT1-34).
   ///</summary>
  public int AmbulatoryStatusRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(34);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Citizenship(GT1-35).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCitizenship(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Citizenship (GT1-35).
   ///</summary>
  public CWE[] GetCitizenship() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(35);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Citizenship (GT1-35).
   ///</summary>
  public int CitizenshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(35);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Primary Language(GT1-36).
	///</summary>
	public CWE PrimaryLanguage
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Arrangement(GT1-37).
	///</summary>
	public CWE LivingArrangement
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Publicity Code(GT1-38).
	///</summary>
	public CWE PublicityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Protection Indicator(GT1-39).
	///</summary>
	public ID ProtectionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Student Indicator(GT1-40).
	///</summary>
	public CWE StudentIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Religion(GT1-41).
	///</summary>
	public CWE Religion
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Mother's Maiden Name(GT1-42).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetMotherSMaidenName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(42, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Mother's Maiden Name (GT1-42).
   ///</summary>
  public XPN[] GetMotherSMaidenName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(42);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Mother's Maiden Name (GT1-42).
   ///</summary>
  public int MotherSMaidenNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(42);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Nationality(GT1-43).
	///</summary>
	public CWE Nationality
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ethnic Group(GT1-44).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEthnicGroup(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(44, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ethnic Group (GT1-44).
   ///</summary>
  public CWE[] GetEthnicGroup() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(44);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ethnic Group (GT1-44).
   ///</summary>
  public int EthnicGroupRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(44);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Person's Name(GT1-45).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetContactPersonSName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(45, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Person's Name (GT1-45).
   ///</summary>
  public XPN[] GetContactPersonSName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(45);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Person's Name (GT1-45).
   ///</summary>
  public int ContactPersonSNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(45);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Person's Telephone Number(GT1-46).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetContactPersonSTelephoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(46, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Person's Telephone Number (GT1-46).
   ///</summary>
  public XTN[] GetContactPersonSTelephoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(46);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Person's Telephone Number (GT1-46).
   ///</summary>
  public int ContactPersonSTelephoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(46);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Contact Reason(GT1-47).
	///</summary>
	public CWE ContactReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Contact Relationship(GT1-48).
	///</summary>
	public CWE ContactRelationship
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Title(GT1-49).
	///</summary>
	public ST JobTitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(49, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Code/Class(GT1-50).
	///</summary>
	public JCC JobCodeClass
	{
		get{
			JCC ret = null;
			try
			{
			IType t = this.GetField(50, 0);
				ret = (JCC)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Guarantor Employer's Organization Name(GT1-51).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetGuarantorEmployerSOrganizationName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(51, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Employer's Organization Name (GT1-51).
   ///</summary>
  public XON[] GetGuarantorEmployerSOrganizationName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(51);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Employer's Organization Name (GT1-51).
   ///</summary>
  public int GuarantorEmployerSOrganizationNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(51);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Handicap(GT1-52).
	///</summary>
	public CWE Handicap
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(52, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Status(GT1-53).
	///</summary>
	public CWE JobStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(53, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor Financial Class(GT1-54).
	///</summary>
	public FC GuarantorFinancialClass
	{
		get{
			FC ret = null;
			try
			{
			IType t = this.GetField(54, 0);
				ret = (FC)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Guarantor Race(GT1-55).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetGuarantorRace(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(55, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Guarantor Race (GT1-55).
   ///</summary>
  public CWE[] GetGuarantorRace() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(55);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Guarantor Race (GT1-55).
   ///</summary>
  public int GuarantorRaceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(55);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Guarantor Birth Place(GT1-56).
	///</summary>
	public ST GuarantorBirthPlace
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(56, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns VIP Indicator(GT1-57).
	///</summary>
	public CWE VIPIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(57, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\Hxx.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 Hxx message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class Hxx : AbstractSegment  {

  /**
   * Creates a Hxx () segment object that belongs to the given 
   * message.  
   */
	public Hxx(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IAM.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IAM message segment. 
/// This segment has the following fields:<ol>
///<li>IAM-1: Set ID - IAM (SI)</li>
///<li>IAM-2: Allergen Type Code (CWE)</li>
///<li>IAM-3: Allergen Code/Mnemonic/Description (CWE)</li>
///<li>IAM-4: Allergy Severity Code (CWE)</li>
///<li>IAM-5: Allergy Reaction Code (ST)</li>
///<li>IAM-6: Allergy Action Code (CNE)</li>
///<li>IAM-7: Allergy Unique Identifier (EI)</li>
///<li>IAM-8: Action Reason (ST)</li>
///<li>IAM-9: Sensitivity to Causative Agent Code (CWE)</li>
///<li>IAM-10: Allergen Group Code/Mnemonic/Description (CWE)</li>
///<li>IAM-11: Onset Date (DT)</li>
///<li>IAM-12: Onset Date Text (ST)</li>
///<li>IAM-13: Reported Date/Time (DTM)</li>
///<li>IAM-14: Reported By (XPN)</li>
///<li>IAM-15: Relationship to Patient Code (CWE)</li>
///<li>IAM-16: Alert Device Code (CWE)</li>
///<li>IAM-17: Allergy Clinical Status Code (CWE)</li>
///<li>IAM-18: Statused by Person (XCN)</li>
///<li>IAM-19: Statused by Organization (XON)</li>
///<li>IAM-20: Statused at Date/Time (DTM)</li>
///<li>IAM-21: Inactivated by Person (XCN)</li>
///<li>IAM-22: Inactivated Date/Time (DTM)</li>
///<li>IAM-23: Initially Recorded by Person (XCN)</li>
///<li>IAM-24: Initially Recorded Date/Time (DTM)</li>
///<li>IAM-25: Modified by Person (XCN)</li>
///<li>IAM-26: Modified Date/Time (DTM)</li>
///<li>IAM-27: Clinician Identified Code (CWE)</li>
///<li>IAM-28: Initially Recorded by Organization (XON)</li>
///<li>IAM-29: Modified by Organization (XON)</li>
///<li>IAM-30: Inactivated by Organization (XON)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IAM : AbstractSegment  {

  /**
   * Creates a IAM (Patient Adverse Reaction Information) segment object that belongs to the given 
   * message.  
   */
	public IAM(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - IAM");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allergen Type Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Allergen Code/Mnemonic/Description");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allergy Severity Code");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Allergy Reaction Code");
       this.add(typeof(CNE), true, 1, 0, new System.Object[]{message}, "Allergy Action Code");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Allergy Unique Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Action Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Sensitivity to Causative Agent Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allergen Group Code/Mnemonic/Description");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Onset Date");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Onset Date Text");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Reported Date/Time");
       this.add(typeof(XPN), false, 1, 0, new System.Object[]{message}, "Reported By");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Relationship to Patient Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Alert Device Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Allergy Clinical Status Code");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Statused by Person");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Statused by Organization");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Statused at Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Inactivated by Person");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inactivated Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Initially Recorded by Person");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Initially Recorded Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Modified by Person");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Modified Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Clinician Identified Code");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Initially Recorded by Organization");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Modified by Organization");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Inactivated by Organization");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - IAM(IAM-1).
	///</summary>
	public SI SetIDIAM
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergen Type Code(IAM-2).
	///</summary>
	public CWE AllergenTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergen Code/Mnemonic/Description(IAM-3).
	///</summary>
	public CWE AllergenCodeMnemonicDescription
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergy Severity Code(IAM-4).
	///</summary>
	public CWE AllergySeverityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Allergy Reaction Code(IAM-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetAllergyReactionCode(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Allergy Reaction Code (IAM-5).
   ///</summary>
  public ST[] GetAllergyReactionCode() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Allergy Reaction Code (IAM-5).
   ///</summary>
  public int AllergyReactionCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Allergy Action Code(IAM-6).
	///</summary>
	public CNE AllergyActionCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergy Unique Identifier(IAM-7).
	///</summary>
	public EI AllergyUniqueIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Reason(IAM-8).
	///</summary>
	public ST ActionReason
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sensitivity to Causative Agent Code(IAM-9).
	///</summary>
	public CWE SensitivityToCausativeAgentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergen Group Code/Mnemonic/Description(IAM-10).
	///</summary>
	public CWE AllergenGroupCodeMnemonicDescription
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Onset Date(IAM-11).
	///</summary>
	public DT OnsetDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Onset Date Text(IAM-12).
	///</summary>
	public ST OnsetDateText
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reported Date/Time(IAM-13).
	///</summary>
	public DTM ReportedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reported By(IAM-14).
	///</summary>
	public XPN ReportedBy
	{
		get{
			XPN ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (XPN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relationship to Patient Code(IAM-15).
	///</summary>
	public CWE RelationshipToPatientCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alert Device Code(IAM-16).
	///</summary>
	public CWE AlertDeviceCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergy Clinical Status Code(IAM-17).
	///</summary>
	public CWE AllergyClinicalStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Statused by Person(IAM-18).
	///</summary>
	public XCN StatusedByPerson
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Statused by Organization(IAM-19).
	///</summary>
	public XON StatusedByOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Statused at Date/Time(IAM-20).
	///</summary>
	public DTM StatusedAtDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactivated by Person(IAM-21).
	///</summary>
	public XCN InactivatedByPerson
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactivated Date/Time(IAM-22).
	///</summary>
	public DTM InactivatedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Initially Recorded by Person(IAM-23).
	///</summary>
	public XCN InitiallyRecordedByPerson
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Initially Recorded Date/Time(IAM-24).
	///</summary>
	public DTM InitiallyRecordedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Modified by Person(IAM-25).
	///</summary>
	public XCN ModifiedByPerson
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Modified Date/Time(IAM-26).
	///</summary>
	public DTM ModifiedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Clinician Identified Code(IAM-27).
	///</summary>
	public CWE ClinicianIdentifiedCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Initially Recorded by Organization(IAM-28).
	///</summary>
	public XON InitiallyRecordedByOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Modified by Organization(IAM-29).
	///</summary>
	public XON ModifiedByOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactivated by Organization(IAM-30).
	///</summary>
	public XON InactivatedByOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IAR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IAR message segment. 
/// This segment has the following fields:<ol>
///<li>IAR-1: Allergy Reaction Code (CWE)</li>
///<li>IAR-2: Allergy Severity Code (CWE)</li>
///<li>IAR-3: Sensitivity to Causative Agent Code (CWE)</li>
///<li>IAR-4: Management (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IAR : AbstractSegment  {

  /**
   * Creates a IAR (allergy reaction) segment object that belongs to the given 
   * message.  
   */
	public IAR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Allergy Reaction Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Allergy Severity Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Sensitivity to Causative Agent Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Management");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Allergy Reaction Code(IAR-1).
	///</summary>
	public CWE AllergyReactionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allergy Severity Code(IAR-2).
	///</summary>
	public CWE AllergySeverityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sensitivity to Causative Agent Code(IAR-3).
	///</summary>
	public CWE SensitivityToCausativeAgentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Management(IAR-4).
	///</summary>
	public ST Management
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IIM.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IIM message segment. 
/// This segment has the following fields:<ol>
///<li>IIM-1: Primary Key Value - IIM (CWE)</li>
///<li>IIM-2: Service Item Code (CWE)</li>
///<li>IIM-3: Inventory Lot Number (ST)</li>
///<li>IIM-4: Inventory Expiration Date (DTM)</li>
///<li>IIM-5: Inventory Manufacturer Name (CWE)</li>
///<li>IIM-6: Inventory Location (CWE)</li>
///<li>IIM-7: Inventory Received Date (DTM)</li>
///<li>IIM-8: Inventory Received Quantity (NM)</li>
///<li>IIM-9: Inventory Received Quantity Unit (CWE)</li>
///<li>IIM-10: Inventory Received Item Cost (MO)</li>
///<li>IIM-11: Inventory On Hand Date (DTM)</li>
///<li>IIM-12: Inventory On Hand Quantity (NM)</li>
///<li>IIM-13: Inventory On Hand Quantity Unit (CWE)</li>
///<li>IIM-14: Procedure Code (CNE)</li>
///<li>IIM-15: Procedure Code Modifier (CNE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IIM : AbstractSegment  {

  /**
   * Creates a IIM (Inventory Item Master) segment object that belongs to the given 
   * message.  
   */
	public IIM(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Primary Key Value - IIM");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Service Item Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Inventory Lot Number");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inventory Expiration Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory Manufacturer Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory Location");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inventory Received Date");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Inventory Received Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory Received Quantity Unit");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Inventory Received Item Cost");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inventory On Hand Date");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Inventory On Hand Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory On Hand Quantity Unit");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "Procedure Code Modifier");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - IIM(IIM-1).
	///</summary>
	public CWE PrimaryKeyValueIIM
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Service Item Code(IIM-2).
	///</summary>
	public CWE ServiceItemCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Lot Number(IIM-3).
	///</summary>
	public ST InventoryLotNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Expiration Date(IIM-4).
	///</summary>
	public DTM InventoryExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Manufacturer Name(IIM-5).
	///</summary>
	public CWE InventoryManufacturerName
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Location(IIM-6).
	///</summary>
	public CWE InventoryLocation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Date(IIM-7).
	///</summary>
	public DTM InventoryReceivedDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Quantity(IIM-8).
	///</summary>
	public NM InventoryReceivedQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Quantity Unit(IIM-9).
	///</summary>
	public CWE InventoryReceivedQuantityUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Item Cost(IIM-10).
	///</summary>
	public MO InventoryReceivedItemCost
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory On Hand Date(IIM-11).
	///</summary>
	public DTM InventoryOnHandDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory On Hand Quantity(IIM-12).
	///</summary>
	public NM InventoryOnHandQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory On Hand Quantity Unit(IIM-13).
	///</summary>
	public CWE InventoryOnHandQuantityUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Code(IIM-14).
	///</summary>
	public CNE ProcedureCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Procedure Code Modifier(IIM-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetProcedureCodeModifier(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Procedure Code Modifier (IIM-15).
   ///</summary>
  public CNE[] GetProcedureCodeModifier() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Procedure Code Modifier (IIM-15).
   ///</summary>
  public int ProcedureCodeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ILT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ILT message segment. 
/// This segment has the following fields:<ol>
///<li>ILT-1: Set Id - ILT (SI)</li>
///<li>ILT-2: Inventory Lot Number (ST)</li>
///<li>ILT-3: Inventory Expiration Date (DTM)</li>
///<li>ILT-4: Inventory Received Date (DTM)</li>
///<li>ILT-5: Inventory Received Quantity (NM)</li>
///<li>ILT-6: Inventory Received Quantity Unit (CWE)</li>
///<li>ILT-7: Inventory Received Item Cost (MO)</li>
///<li>ILT-8: Inventory On Hand Date (DTM)</li>
///<li>ILT-9: Inventory On Hand Quantity (NM)</li>
///<li>ILT-10: Inventory On Hand Quantity Unit (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ILT : AbstractSegment  {

  /**
   * Creates a ILT (Material Lot) segment object that belongs to the given 
   * message.  
   */
	public ILT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set Id - ILT");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Inventory Lot Number");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inventory Expiration Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inventory Received Date");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Inventory Received Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory Received Quantity Unit");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Inventory Received Item Cost");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inventory On Hand Date");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Inventory On Hand Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory On Hand Quantity Unit");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set Id - ILT(ILT-1).
	///</summary>
	public SI SetIdILT
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Lot Number(ILT-2).
	///</summary>
	public ST InventoryLotNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Expiration Date(ILT-3).
	///</summary>
	public DTM InventoryExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Date(ILT-4).
	///</summary>
	public DTM InventoryReceivedDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Quantity(ILT-5).
	///</summary>
	public NM InventoryReceivedQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Quantity Unit(ILT-6).
	///</summary>
	public CWE InventoryReceivedQuantityUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Received Item Cost(ILT-7).
	///</summary>
	public MO InventoryReceivedItemCost
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory On Hand Date(ILT-8).
	///</summary>
	public DTM InventoryOnHandDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory On Hand Quantity(ILT-9).
	///</summary>
	public NM InventoryOnHandQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory On Hand Quantity Unit(ILT-10).
	///</summary>
	public CWE InventoryOnHandQuantityUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IN1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IN1 message segment. 
/// This segment has the following fields:<ol>
///<li>IN1-1: Set ID - IN1 (SI)</li>
///<li>IN1-2: Health Plan ID (CWE)</li>
///<li>IN1-3: Insurance Company ID (CX)</li>
///<li>IN1-4: Insurance Company Name (XON)</li>
///<li>IN1-5: Insurance Company Address (XAD)</li>
///<li>IN1-6: Insurance Co Contact Person (XPN)</li>
///<li>IN1-7: Insurance Co Phone Number (XTN)</li>
///<li>IN1-8: Group Number (ST)</li>
///<li>IN1-9: Group Name (XON)</li>
///<li>IN1-10: Insured's Group Emp ID (CX)</li>
///<li>IN1-11: Insured's Group Emp Name (XON)</li>
///<li>IN1-12: Plan Effective Date (DT)</li>
///<li>IN1-13: Plan Expiration Date (DT)</li>
///<li>IN1-14: Authorization Information (AUI)</li>
///<li>IN1-15: Plan Type (CWE)</li>
///<li>IN1-16: Name Of Insured (XPN)</li>
///<li>IN1-17: Insured's Relationship To Patient (CWE)</li>
///<li>IN1-18: Insured's Date Of Birth (DTM)</li>
///<li>IN1-19: Insured's Address (XAD)</li>
///<li>IN1-20: Assignment Of Benefits (CWE)</li>
///<li>IN1-21: Coordination Of Benefits (CWE)</li>
///<li>IN1-22: Coord Of Ben. Priority (ST)</li>
///<li>IN1-23: Notice Of Admission Flag (ID)</li>
///<li>IN1-24: Notice Of Admission Date (DT)</li>
///<li>IN1-25: Report Of Eligibility Flag (ID)</li>
///<li>IN1-26: Report Of Eligibility Date (DT)</li>
///<li>IN1-27: Release Information Code (CWE)</li>
///<li>IN1-28: Pre-Admit Cert (PAC) (ST)</li>
///<li>IN1-29: Verification Date/Time (DTM)</li>
///<li>IN1-30: Verification By (XCN)</li>
///<li>IN1-31: Type Of Agreement Code (CWE)</li>
///<li>IN1-32: Billing Status (CWE)</li>
///<li>IN1-33: Lifetime Reserve Days (NM)</li>
///<li>IN1-34: Delay Before L.R. Day (NM)</li>
///<li>IN1-35: Company Plan Code (CWE)</li>
///<li>IN1-36: Policy Number (ST)</li>
///<li>IN1-37: Policy Deductible (CP)</li>
///<li>IN1-38: Policy Limit - Amount (-)</li>
///<li>IN1-39: Policy Limit - Days (NM)</li>
///<li>IN1-40: Room Rate - Semi-Private (-)</li>
///<li>IN1-41: Room Rate - Private (-)</li>
///<li>IN1-42: Insured's Employment Status (CWE)</li>
///<li>IN1-43: Insured's Administrative Sex (CWE)</li>
///<li>IN1-44: Insured's Employer's Address (XAD)</li>
///<li>IN1-45: Verification Status (ST)</li>
///<li>IN1-46: Prior Insurance Plan ID (CWE)</li>
///<li>IN1-47: Coverage Type (CWE)</li>
///<li>IN1-48: Handicap (CWE)</li>
///<li>IN1-49: Insured's ID Number (CX)</li>
///<li>IN1-50: Signature Code (CWE)</li>
///<li>IN1-51: Signature Code Date (DT)</li>
///<li>IN1-52: Insured's Birth Place (ST)</li>
///<li>IN1-53: VIP Indicator (CWE)</li>
///<li>IN1-54: External Health Plan Identifiers (CX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IN1 : AbstractSegment  {

  /**
   * Creates a IN1 (Insurance) segment object that belongs to the given 
   * message.  
   */
	public IN1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - IN1");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Health Plan ID");
       this.add(typeof(CX), true, 0, 0, new System.Object[]{message}, "Insurance Company ID");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Insurance Company Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Insurance Company Address");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Insurance Co Contact Person");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Insurance Co Phone Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Group Number");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Group Name");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Insured's Group Emp ID");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Insured's Group Emp Name");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Plan Effective Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Plan Expiration Date");
       this.add(typeof(AUI), false, 1, 0, new System.Object[]{message}, "Authorization Information");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Plan Type");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Name Of Insured");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Insured's Relationship To Patient");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Insured's Date Of Birth");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Insured's Address");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Assignment Of Benefits");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Coordination Of Benefits");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Coord Of Ben. Priority");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Notice Of Admission Flag");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Notice Of Admission Date");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Report Of Eligibility Flag");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Report Of Eligibility Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Release Information Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Pre-Admit Cert (PAC)");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Verification Date/Time");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Verification By");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Type Of Agreement Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Billing Status");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Lifetime Reserve Days");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Delay Before L.R. Day");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Company Plan Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Policy Number");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Policy Deductible");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Policy Limit - Amount");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Policy Limit - Days");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Room Rate - Semi-Private");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Room Rate - Private");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Insured's Employment Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Insured's Administrative Sex");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Insured's Employer's Address");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Verification Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Prior Insurance Plan ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Coverage Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Handicap");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Insured's ID Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Signature Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Signature Code Date");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Insured's Birth Place");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "VIP Indicator");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "External Health Plan Identifiers");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - IN1(IN1-1).
	///</summary>
	public SI SetIDIN1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Health Plan ID(IN1-2).
	///</summary>
	public CWE HealthPlanID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insurance Company ID(IN1-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetInsuranceCompanyID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insurance Company ID (IN1-3).
   ///</summary>
  public CX[] GetInsuranceCompanyID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insurance Company ID (IN1-3).
   ///</summary>
  public int InsuranceCompanyIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insurance Company Name(IN1-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetInsuranceCompanyName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insurance Company Name (IN1-4).
   ///</summary>
  public XON[] GetInsuranceCompanyName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insurance Company Name (IN1-4).
   ///</summary>
  public int InsuranceCompanyNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insurance Company Address(IN1-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetInsuranceCompanyAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insurance Company Address (IN1-5).
   ///</summary>
  public XAD[] GetInsuranceCompanyAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insurance Company Address (IN1-5).
   ///</summary>
  public int InsuranceCompanyAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insurance Co Contact Person(IN1-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetInsuranceCoContactPerson(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insurance Co Contact Person (IN1-6).
   ///</summary>
  public XPN[] GetInsuranceCoContactPerson() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insurance Co Contact Person (IN1-6).
   ///</summary>
  public int InsuranceCoContactPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insurance Co Phone Number(IN1-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetInsuranceCoPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insurance Co Phone Number (IN1-7).
   ///</summary>
  public XTN[] GetInsuranceCoPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insurance Co Phone Number (IN1-7).
   ///</summary>
  public int InsuranceCoPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Group Number(IN1-8).
	///</summary>
	public ST GroupNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Group Name(IN1-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetGroupName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Group Name (IN1-9).
   ///</summary>
  public XON[] GetGroupName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Group Name (IN1-9).
   ///</summary>
  public int GroupNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insured's Group Emp ID(IN1-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetInsuredSGroupEmpID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Group Emp ID (IN1-10).
   ///</summary>
  public CX[] GetInsuredSGroupEmpID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Group Emp ID (IN1-10).
   ///</summary>
  public int InsuredSGroupEmpIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insured's Group Emp Name(IN1-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetInsuredSGroupEmpName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Group Emp Name (IN1-11).
   ///</summary>
  public XON[] GetInsuredSGroupEmpName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Group Emp Name (IN1-11).
   ///</summary>
  public int InsuredSGroupEmpNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Plan Effective Date(IN1-12).
	///</summary>
	public DT PlanEffectiveDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Plan Expiration Date(IN1-13).
	///</summary>
	public DT PlanExpirationDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Authorization Information(IN1-14).
	///</summary>
	public AUI AuthorizationInformation
	{
		get{
			AUI ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (AUI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Plan Type(IN1-15).
	///</summary>
	public CWE PlanType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Name Of Insured(IN1-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetNameOfInsured(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Name Of Insured (IN1-16).
   ///</summary>
  public XPN[] GetNameOfInsured() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Name Of Insured (IN1-16).
   ///</summary>
  public int NameOfInsuredRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Insured's Relationship To Patient(IN1-17).
	///</summary>
	public CWE InsuredSRelationshipToPatient
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Insured's Date Of Birth(IN1-18).
	///</summary>
	public DTM InsuredSDateOfBirth
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured's Address(IN1-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetInsuredSAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Address (IN1-19).
   ///</summary>
  public XAD[] GetInsuredSAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Address (IN1-19).
   ///</summary>
  public int InsuredSAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Assignment Of Benefits(IN1-20).
	///</summary>
	public CWE AssignmentOfBenefits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Coordination Of Benefits(IN1-21).
	///</summary>
	public CWE CoordinationOfBenefits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Coord Of Ben. Priority(IN1-22).
	///</summary>
	public ST CoordOfBenPriority
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Notice Of Admission Flag(IN1-23).
	///</summary>
	public ID NoticeOfAdmissionFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Notice Of Admission Date(IN1-24).
	///</summary>
	public DT NoticeOfAdmissionDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Of Eligibility Flag(IN1-25).
	///</summary>
	public ID ReportOfEligibilityFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Of Eligibility Date(IN1-26).
	///</summary>
	public DT ReportOfEligibilityDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Release Information Code(IN1-27).
	///</summary>
	public CWE ReleaseInformationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pre-Admit Cert (PAC)(IN1-28).
	///</summary>
	public ST PreAdmitCert
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Verification Date/Time(IN1-29).
	///</summary>
	public DTM VerificationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Verification By(IN1-30).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetVerificationBy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(30, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Verification By (IN1-30).
   ///</summary>
  public XCN[] GetVerificationBy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(30);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Verification By (IN1-30).
   ///</summary>
  public int VerificationByRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(30);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Type Of Agreement Code(IN1-31).
	///</summary>
	public CWE TypeOfAgreementCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Billing Status(IN1-32).
	///</summary>
	public CWE BillingStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Lifetime Reserve Days(IN1-33).
	///</summary>
	public NM LifetimeReserveDays
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Delay Before L.R. Day(IN1-34).
	///</summary>
	public NM DelayBeforeLRDay
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Company Plan Code(IN1-35).
	///</summary>
	public CWE CompanyPlanCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Policy Number(IN1-36).
	///</summary>
	public ST PolicyNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Policy Deductible(IN1-37).
	///</summary>
	public CP PolicyDeductible
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Policy Limit - Amount(IN1-38).
	///</summary>
	public - PolicyLimitAmount
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Policy Limit - Days(IN1-39).
	///</summary>
	public NM PolicyLimitDays
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Room Rate - Semi-Private(IN1-40).
	///</summary>
	public - RoomRateSemiPrivate
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Room Rate - Private(IN1-41).
	///</summary>
	public - RoomRatePrivate
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Insured's Employment Status(IN1-42).
	///</summary>
	public CWE InsuredSEmploymentStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Insured's Administrative Sex(IN1-43).
	///</summary>
	public CWE InsuredSAdministrativeSex
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured's Employer's Address(IN1-44).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetInsuredSEmployerSAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(44, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Employer's Address (IN1-44).
   ///</summary>
  public XAD[] GetInsuredSEmployerSAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(44);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Employer's Address (IN1-44).
   ///</summary>
  public int InsuredSEmployerSAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(44);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Verification Status(IN1-45).
	///</summary>
	public ST VerificationStatus
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(45, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Insurance Plan ID(IN1-46).
	///</summary>
	public CWE PriorInsurancePlanID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(46, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Coverage Type(IN1-47).
	///</summary>
	public CWE CoverageType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Handicap(IN1-48).
	///</summary>
	public CWE Handicap
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured's ID Number(IN1-49).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetInsuredSIDNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(49, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's ID Number (IN1-49).
   ///</summary>
  public CX[] GetInsuredSIDNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(49);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's ID Number (IN1-49).
   ///</summary>
  public int InsuredSIDNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(49);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Signature Code(IN1-50).
	///</summary>
	public CWE SignatureCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(50, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Signature Code Date(IN1-51).
	///</summary>
	public DT SignatureCodeDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(51, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Insured's Birth Place(IN1-52).
	///</summary>
	public ST InsuredSBirthPlace
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(52, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns VIP Indicator(IN1-53).
	///</summary>
	public CWE VIPIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(53, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of External Health Plan Identifiers(IN1-54).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetExternalHealthPlanIdentifiers(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(54, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of External Health Plan Identifiers (IN1-54).
   ///</summary>
  public CX[] GetExternalHealthPlanIdentifiers() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(54);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of External Health Plan Identifiers (IN1-54).
   ///</summary>
  public int ExternalHealthPlanIdentifiersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(54);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\IN2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IN2 message segment. 
/// This segment has the following fields:<ol>
///<li>IN2-1: Insured's Employee ID (CX)</li>
///<li>IN2-2: Insured's Social Security Number (ST)</li>
///<li>IN2-3: Insured's Employer's Name and ID (XCN)</li>
///<li>IN2-4: Employer Information Data (CWE)</li>
///<li>IN2-5: Mail Claim Party (CWE)</li>
///<li>IN2-6: Medicare Health Ins Card Number (ST)</li>
///<li>IN2-7: Medicaid Case Name (XPN)</li>
///<li>IN2-8: Medicaid Case Number (ST)</li>
///<li>IN2-9: Military Sponsor Name (XPN)</li>
///<li>IN2-10: Military ID Number (ST)</li>
///<li>IN2-11: Dependent Of Military Recipient (CWE)</li>
///<li>IN2-12: Military Organization (ST)</li>
///<li>IN2-13: Military Station (ST)</li>
///<li>IN2-14: Military Service (CWE)</li>
///<li>IN2-15: Military Rank/Grade (CWE)</li>
///<li>IN2-16: Military Status (CWE)</li>
///<li>IN2-17: Military Retire Date (DT)</li>
///<li>IN2-18: Military Non-Avail Cert On File (ID)</li>
///<li>IN2-19: Baby Coverage (ID)</li>
///<li>IN2-20: Combine Baby Bill (ID)</li>
///<li>IN2-21: Blood Deductible (ST)</li>
///<li>IN2-22: Special Coverage Approval Name (XPN)</li>
///<li>IN2-23: Special Coverage Approval Title (ST)</li>
///<li>IN2-24: Non-Covered Insurance Code (CWE)</li>
///<li>IN2-25: Payor ID (CX)</li>
///<li>IN2-26: Payor Subscriber ID (CX)</li>
///<li>IN2-27: Eligibility Source (CWE)</li>
///<li>IN2-28: Room Coverage Type/Amount (RMC)</li>
///<li>IN2-29: Policy Type/Amount (PTA)</li>
///<li>IN2-30: Daily Deductible (DDI)</li>
///<li>IN2-31: Living Dependency (CWE)</li>
///<li>IN2-32: Ambulatory Status (CWE)</li>
///<li>IN2-33: Citizenship (CWE)</li>
///<li>IN2-34: Primary Language (CWE)</li>
///<li>IN2-35: Living Arrangement (CWE)</li>
///<li>IN2-36: Publicity Code (CWE)</li>
///<li>IN2-37: Protection Indicator (ID)</li>
///<li>IN2-38: Student Indicator (CWE)</li>
///<li>IN2-39: Religion (CWE)</li>
///<li>IN2-40: Mother's Maiden Name (XPN)</li>
///<li>IN2-41: Nationality (CWE)</li>
///<li>IN2-42: Ethnic Group (CWE)</li>
///<li>IN2-43: Marital Status (CWE)</li>
///<li>IN2-44: Insured's Employment Start Date (DT)</li>
///<li>IN2-45: Employment Stop Date (DT)</li>
///<li>IN2-46: Job Title (ST)</li>
///<li>IN2-47: Job Code/Class (JCC)</li>
///<li>IN2-48: Job Status (CWE)</li>
///<li>IN2-49: Employer Contact Person Name (XPN)</li>
///<li>IN2-50: Employer Contact Person Phone Number (XTN)</li>
///<li>IN2-51: Employer Contact Reason (CWE)</li>
///<li>IN2-52: Insured's Contact Person's Name (XPN)</li>
///<li>IN2-53: Insured's Contact Person Phone Number (XTN)</li>
///<li>IN2-54: Insured's Contact Person Reason (CWE)</li>
///<li>IN2-55: Relationship to the Patient Start Date (DT)</li>
///<li>IN2-56: Relationship to the Patient Stop Date (DT)</li>
///<li>IN2-57: Insurance Co Contact Reason (CWE)</li>
///<li>IN2-58: Insurance Co Contact Phone Number (XTN)</li>
///<li>IN2-59: Policy Scope (CWE)</li>
///<li>IN2-60: Policy Source (CWE)</li>
///<li>IN2-61: Patient Member Number (CX)</li>
///<li>IN2-62: Guarantor's Relationship to Insured (CWE)</li>
///<li>IN2-63: Insured's Phone Number - Home (XTN)</li>
///<li>IN2-64: Insured's Employer Phone Number (XTN)</li>
///<li>IN2-65: Military Handicapped Program (CWE)</li>
///<li>IN2-66: Suspend Flag (ID)</li>
///<li>IN2-67: Copay Limit Flag (ID)</li>
///<li>IN2-68: Stoploss Limit Flag (ID)</li>
///<li>IN2-69: Insured Organization Name and ID (XON)</li>
///<li>IN2-70: Insured Employer Organization Name and ID (XON)</li>
///<li>IN2-71: Race (CWE)</li>
///<li>IN2-72: Patient's Relationship to Insured (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IN2 : AbstractSegment  {

  /**
   * Creates a IN2 (Insurance Additional Information) segment object that belongs to the given 
   * message.  
   */
	public IN2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Insured's Employee ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Insured's Social Security Number");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Insured's Employer's Name and ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Employer Information Data");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Mail Claim Party");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Medicare Health Ins Card Number");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Medicaid Case Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Medicaid Case Number");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Military Sponsor Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Military ID Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dependent Of Military Recipient");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Military Organization");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Military Station");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Service");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Rank/Grade");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Status");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Military Retire Date");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Military Non-Avail Cert On File");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Baby Coverage");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Combine Baby Bill");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Blood Deductible");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Special Coverage Approval Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Special Coverage Approval Title");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Non-Covered Insurance Code");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Payor ID");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Payor Subscriber ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Eligibility Source");
       this.add(typeof(RMC), false, 0, 0, new System.Object[]{message}, "Room Coverage Type/Amount");
       this.add(typeof(PTA), false, 0, 0, new System.Object[]{message}, "Policy Type/Amount");
       this.add(typeof(DDI), false, 1, 0, new System.Object[]{message}, "Daily Deductible");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Dependency");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ambulatory Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Citizenship");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Primary Language");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Arrangement");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Publicity Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Protection Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Student Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Religion");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Mother's Maiden Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Nationality");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ethnic Group");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Marital Status");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Insured's Employment Start Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Employment Stop Date");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Job Title");
       this.add(typeof(JCC), false, 1, 0, new System.Object[]{message}, "Job Code/Class");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Job Status");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Employer Contact Person Name");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Employer Contact Person Phone Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Employer Contact Reason");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Insured's Contact Person's Name");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Insured's Contact Person Phone Number");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Insured's Contact Person Reason");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Relationship to the Patient Start Date");
       this.add(typeof(DT), false, 0, 0, new System.Object[]{message}, "Relationship to the Patient Stop Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Insurance Co Contact Reason");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Insurance Co Contact Phone Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Policy Scope");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Policy Source");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Patient Member Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Guarantor's Relationship to Insured");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Insured's Phone Number - Home");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Insured's Employer Phone Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Handicapped Program");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Suspend Flag");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Copay Limit Flag");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Stoploss Limit Flag");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Insured Organization Name and ID");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Insured Employer Organization Name and ID");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Race");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient's Relationship to Insured");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Insured's Employee ID(IN2-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetInsuredSEmployeeID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Employee ID (IN2-1).
   ///</summary>
  public CX[] GetInsuredSEmployeeID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Employee ID (IN2-1).
   ///</summary>
  public int InsuredSEmployeeIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Insured's Social Security Number(IN2-2).
	///</summary>
	public ST InsuredSSocialSecurityNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured's Employer's Name and ID(IN2-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetInsuredSEmployerSNameAndID(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Employer's Name and ID (IN2-3).
   ///</summary>
  public XCN[] GetInsuredSEmployerSNameAndID() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Employer's Name and ID (IN2-3).
   ///</summary>
  public int InsuredSEmployerSNameAndIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Employer Information Data(IN2-4).
	///</summary>
	public CWE EmployerInformationData
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Mail Claim Party(IN2-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetMailClaimParty(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Mail Claim Party (IN2-5).
   ///</summary>
  public CWE[] GetMailClaimParty() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Mail Claim Party (IN2-5).
   ///</summary>
  public int MailClaimPartyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Medicare Health Ins Card Number(IN2-6).
	///</summary>
	public ST MedicareHealthInsCardNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Medicaid Case Name(IN2-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetMedicaidCaseName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Medicaid Case Name (IN2-7).
   ///</summary>
  public XPN[] GetMedicaidCaseName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Medicaid Case Name (IN2-7).
   ///</summary>
  public int MedicaidCaseNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Medicaid Case Number(IN2-8).
	///</summary>
	public ST MedicaidCaseNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Military Sponsor Name(IN2-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetMilitarySponsorName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Military Sponsor Name (IN2-9).
   ///</summary>
  public XPN[] GetMilitarySponsorName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Military Sponsor Name (IN2-9).
   ///</summary>
  public int MilitarySponsorNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Military ID Number(IN2-10).
	///</summary>
	public ST MilitaryIDNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dependent Of Military Recipient(IN2-11).
	///</summary>
	public CWE DependentOfMilitaryRecipient
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Organization(IN2-12).
	///</summary>
	public ST MilitaryOrganization
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Station(IN2-13).
	///</summary>
	public ST MilitaryStation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Service(IN2-14).
	///</summary>
	public CWE MilitaryService
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Rank/Grade(IN2-15).
	///</summary>
	public CWE MilitaryRankGrade
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Status(IN2-16).
	///</summary>
	public CWE MilitaryStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Retire Date(IN2-17).
	///</summary>
	public DT MilitaryRetireDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Non-Avail Cert On File(IN2-18).
	///</summary>
	public ID MilitaryNonAvailCertOnFile
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Baby Coverage(IN2-19).
	///</summary>
	public ID BabyCoverage
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Combine Baby Bill(IN2-20).
	///</summary>
	public ID CombineBabyBill
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Blood Deductible(IN2-21).
	///</summary>
	public ST BloodDeductible
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Special Coverage Approval Name(IN2-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetSpecialCoverageApprovalName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Special Coverage Approval Name (IN2-22).
   ///</summary>
  public XPN[] GetSpecialCoverageApprovalName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Special Coverage Approval Name (IN2-22).
   ///</summary>
  public int SpecialCoverageApprovalNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Special Coverage Approval Title(IN2-23).
	///</summary>
	public ST SpecialCoverageApprovalTitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Non-Covered Insurance Code(IN2-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetNonCoveredInsuranceCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Non-Covered Insurance Code (IN2-24).
   ///</summary>
  public CWE[] GetNonCoveredInsuranceCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Non-Covered Insurance Code (IN2-24).
   ///</summary>
  public int NonCoveredInsuranceCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Payor ID(IN2-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetPayorID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Payor ID (IN2-25).
   ///</summary>
  public CX[] GetPayorID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Payor ID (IN2-25).
   ///</summary>
  public int PayorIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Payor Subscriber ID(IN2-26).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetPayorSubscriberID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(26, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Payor Subscriber ID (IN2-26).
   ///</summary>
  public CX[] GetPayorSubscriberID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(26);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Payor Subscriber ID (IN2-26).
   ///</summary>
  public int PayorSubscriberIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(26);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Eligibility Source(IN2-27).
	///</summary>
	public CWE EligibilitySource
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Room Coverage Type/Amount(IN2-28).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public RMC GetRoomCoverageTypeAmount(int rep)
	{
			RMC ret = null;
			try
			{
			IType t = this.GetField(28, rep);
				ret = (RMC)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Room Coverage Type/Amount (IN2-28).
   ///</summary>
  public RMC[] GetRoomCoverageTypeAmount() {
     RMC[] ret = null;
    try {
        IType[] t = this.GetField(28);  
        ret = new RMC[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (RMC)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Room Coverage Type/Amount (IN2-28).
   ///</summary>
  public int RoomCoverageTypeAmountRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(28);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Policy Type/Amount(IN2-29).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PTA GetPolicyTypeAmount(int rep)
	{
			PTA ret = null;
			try
			{
			IType t = this.GetField(29, rep);
				ret = (PTA)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Policy Type/Amount (IN2-29).
   ///</summary>
  public PTA[] GetPolicyTypeAmount() {
     PTA[] ret = null;
    try {
        IType[] t = this.GetField(29);  
        ret = new PTA[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PTA)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Policy Type/Amount (IN2-29).
   ///</summary>
  public int PolicyTypeAmountRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(29);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Daily Deductible(IN2-30).
	///</summary>
	public DDI DailyDeductible
	{
		get{
			DDI ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (DDI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Dependency(IN2-31).
	///</summary>
	public CWE LivingDependency
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ambulatory Status(IN2-32).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAmbulatoryStatus(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(32, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ambulatory Status (IN2-32).
   ///</summary>
  public CWE[] GetAmbulatoryStatus() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(32);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ambulatory Status (IN2-32).
   ///</summary>
  public int AmbulatoryStatusRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(32);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Citizenship(IN2-33).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCitizenship(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Citizenship (IN2-33).
   ///</summary>
  public CWE[] GetCitizenship() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(33);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Citizenship (IN2-33).
   ///</summary>
  public int CitizenshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(33);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Primary Language(IN2-34).
	///</summary>
	public CWE PrimaryLanguage
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Arrangement(IN2-35).
	///</summary>
	public CWE LivingArrangement
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Publicity Code(IN2-36).
	///</summary>
	public CWE PublicityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Protection Indicator(IN2-37).
	///</summary>
	public ID ProtectionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Student Indicator(IN2-38).
	///</summary>
	public CWE StudentIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Religion(IN2-39).
	///</summary>
	public CWE Religion
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Mother's Maiden Name(IN2-40).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetMotherSMaidenName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(40, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Mother's Maiden Name (IN2-40).
   ///</summary>
  public XPN[] GetMotherSMaidenName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(40);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Mother's Maiden Name (IN2-40).
   ///</summary>
  public int MotherSMaidenNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(40);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Nationality(IN2-41).
	///</summary>
	public CWE Nationality
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ethnic Group(IN2-42).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEthnicGroup(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(42, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ethnic Group (IN2-42).
   ///</summary>
  public CWE[] GetEthnicGroup() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(42);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ethnic Group (IN2-42).
   ///</summary>
  public int EthnicGroupRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(42);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Marital Status(IN2-43).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetMaritalStatus(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Marital Status (IN2-43).
   ///</summary>
  public CWE[] GetMaritalStatus() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(43);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Marital Status (IN2-43).
   ///</summary>
  public int MaritalStatusRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(43);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Insured's Employment Start Date(IN2-44).
	///</summary>
	public DT InsuredSEmploymentStartDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Employment Stop Date(IN2-45).
	///</summary>
	public DT EmploymentStopDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(45, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Title(IN2-46).
	///</summary>
	public ST JobTitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(46, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Code/Class(IN2-47).
	///</summary>
	public JCC JobCodeClass
	{
		get{
			JCC ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (JCC)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Status(IN2-48).
	///</summary>
	public CWE JobStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Employer Contact Person Name(IN2-49).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetEmployerContactPersonName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(49, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Employer Contact Person Name (IN2-49).
   ///</summary>
  public XPN[] GetEmployerContactPersonName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(49);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Employer Contact Person Name (IN2-49).
   ///</summary>
  public int EmployerContactPersonNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(49);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Employer Contact Person Phone Number(IN2-50).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetEmployerContactPersonPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(50, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Employer Contact Person Phone Number (IN2-50).
   ///</summary>
  public XTN[] GetEmployerContactPersonPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(50);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Employer Contact Person Phone Number (IN2-50).
   ///</summary>
  public int EmployerContactPersonPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(50);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Employer Contact Reason(IN2-51).
	///</summary>
	public CWE EmployerContactReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(51, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured's Contact Person's Name(IN2-52).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetInsuredSContactPersonSName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(52, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Contact Person's Name (IN2-52).
   ///</summary>
  public XPN[] GetInsuredSContactPersonSName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(52);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Contact Person's Name (IN2-52).
   ///</summary>
  public int InsuredSContactPersonSNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(52);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insured's Contact Person Phone Number(IN2-53).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetInsuredSContactPersonPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(53, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Contact Person Phone Number (IN2-53).
   ///</summary>
  public XTN[] GetInsuredSContactPersonPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(53);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Contact Person Phone Number (IN2-53).
   ///</summary>
  public int InsuredSContactPersonPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(53);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insured's Contact Person Reason(IN2-54).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetInsuredSContactPersonReason(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(54, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Contact Person Reason (IN2-54).
   ///</summary>
  public CWE[] GetInsuredSContactPersonReason() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(54);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Contact Person Reason (IN2-54).
   ///</summary>
  public int InsuredSContactPersonReasonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(54);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Relationship to the Patient Start Date(IN2-55).
	///</summary>
	public DT RelationshipToThePatientStartDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(55, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Relationship to the Patient Stop Date(IN2-56).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DT GetRelationshipToThePatientStopDate(int rep)
	{
			DT ret = null;
			try
			{
			IType t = this.GetField(56, rep);
				ret = (DT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Relationship to the Patient Stop Date (IN2-56).
   ///</summary>
  public DT[] GetRelationshipToThePatientStopDate() {
     DT[] ret = null;
    try {
        IType[] t = this.GetField(56);  
        ret = new DT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Relationship to the Patient Stop Date (IN2-56).
   ///</summary>
  public int RelationshipToThePatientStopDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(56);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Insurance Co Contact Reason(IN2-57).
	///</summary>
	public CWE InsuranceCoContactReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(57, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insurance Co Contact Phone Number(IN2-58).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetInsuranceCoContactPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(58, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insurance Co Contact Phone Number (IN2-58).
   ///</summary>
  public XTN[] GetInsuranceCoContactPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(58);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insurance Co Contact Phone Number (IN2-58).
   ///</summary>
  public int InsuranceCoContactPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(58);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Policy Scope(IN2-59).
	///</summary>
	public CWE PolicyScope
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(59, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Policy Source(IN2-60).
	///</summary>
	public CWE PolicySource
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(60, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Member Number(IN2-61).
	///</summary>
	public CX PatientMemberNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(61, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Guarantor's Relationship to Insured(IN2-62).
	///</summary>
	public CWE GuarantorSRelationshipToInsured
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(62, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured's Phone Number - Home(IN2-63).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetInsuredSPhoneNumberHome(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(63, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Phone Number - Home (IN2-63).
   ///</summary>
  public XTN[] GetInsuredSPhoneNumberHome() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(63);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Phone Number - Home (IN2-63).
   ///</summary>
  public int InsuredSPhoneNumberHomeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(63);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insured's Employer Phone Number(IN2-64).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetInsuredSEmployerPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(64, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured's Employer Phone Number (IN2-64).
   ///</summary>
  public XTN[] GetInsuredSEmployerPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(64);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured's Employer Phone Number (IN2-64).
   ///</summary>
  public int InsuredSEmployerPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(64);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Military Handicapped Program(IN2-65).
	///</summary>
	public CWE MilitaryHandicappedProgram
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(65, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Suspend Flag(IN2-66).
	///</summary>
	public ID SuspendFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(66, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Copay Limit Flag(IN2-67).
	///</summary>
	public ID CopayLimitFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(67, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Stoploss Limit Flag(IN2-68).
	///</summary>
	public ID StoplossLimitFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(68, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Insured Organization Name and ID(IN2-69).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetInsuredOrganizationNameAndID(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(69, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured Organization Name and ID (IN2-69).
   ///</summary>
  public XON[] GetInsuredOrganizationNameAndID() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(69);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured Organization Name and ID (IN2-69).
   ///</summary>
  public int InsuredOrganizationNameAndIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(69);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Insured Employer Organization Name and ID(IN2-70).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetInsuredEmployerOrganizationNameAndID(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(70, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Insured Employer Organization Name and ID (IN2-70).
   ///</summary>
  public XON[] GetInsuredEmployerOrganizationNameAndID() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(70);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Insured Employer Organization Name and ID (IN2-70).
   ///</summary>
  public int InsuredEmployerOrganizationNameAndIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(70);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Race(IN2-71).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRace(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(71, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Race (IN2-71).
   ///</summary>
  public CWE[] GetRace() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(71);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Race (IN2-71).
   ///</summary>
  public int RaceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(71);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient's Relationship to Insured(IN2-72).
	///</summary>
	public CWE PatientSRelationshipToInsured
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(72, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IN3.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IN3 message segment. 
/// This segment has the following fields:<ol>
///<li>IN3-1: Set ID - IN3 (SI)</li>
///<li>IN3-2: Certification Number (CX)</li>
///<li>IN3-3: Certified By (XCN)</li>
///<li>IN3-4: Certification Required (ID)</li>
///<li>IN3-5: Penalty (MOP)</li>
///<li>IN3-6: Certification Date/Time (DTM)</li>
///<li>IN3-7: Certification Modify Date/Time (DTM)</li>
///<li>IN3-8: Operator (XCN)</li>
///<li>IN3-9: Certification Begin Date (DT)</li>
///<li>IN3-10: Certification End Date (DT)</li>
///<li>IN3-11: Days (DTN)</li>
///<li>IN3-12: Non-Concur Code/Description (CWE)</li>
///<li>IN3-13: Non-Concur Effective Date/Time (DTM)</li>
///<li>IN3-14: Physician Reviewer (XCN)</li>
///<li>IN3-15: Certification Contact (ST)</li>
///<li>IN3-16: Certification Contact Phone Number (XTN)</li>
///<li>IN3-17: Appeal Reason (CWE)</li>
///<li>IN3-18: Certification Agency (CWE)</li>
///<li>IN3-19: Certification Agency Phone Number (XTN)</li>
///<li>IN3-20: Pre-Certification Requirement (ICD)</li>
///<li>IN3-21: Case Manager (ST)</li>
///<li>IN3-22: Second Opinion Date (DT)</li>
///<li>IN3-23: Second Opinion Status (CWE)</li>
///<li>IN3-24: Second Opinion Documentation Received (CWE)</li>
///<li>IN3-25: Second Opinion Physician (XCN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IN3 : AbstractSegment  {

  /**
   * Creates a IN3 (Insurance Additional Information, Certification) segment object that belongs to the given 
   * message.  
   */
	public IN3(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - IN3");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Certification Number");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Certified By");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Certification Required");
       this.add(typeof(MOP), false, 1, 0, new System.Object[]{message}, "Penalty");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Certification Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Certification Modify Date/Time");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Operator");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Certification Begin Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Certification End Date");
       this.add(typeof(DTN), false, 1, 0, new System.Object[]{message}, "Days");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Non-Concur Code/Description");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Non-Concur Effective Date/Time");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Physician Reviewer");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Certification Contact");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Certification Contact Phone Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Appeal Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Certification Agency");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Certification Agency Phone Number");
       this.add(typeof(ICD), false, 0, 0, new System.Object[]{message}, "Pre-Certification Requirement");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Case Manager");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Second Opinion Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Second Opinion Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Second Opinion Documentation Received");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Second Opinion Physician");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - IN3(IN3-1).
	///</summary>
	public SI SetIDIN3
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certification Number(IN3-2).
	///</summary>
	public CX CertificationNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Certified By(IN3-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetCertifiedBy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Certified By (IN3-3).
   ///</summary>
  public XCN[] GetCertifiedBy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Certified By (IN3-3).
   ///</summary>
  public int CertifiedByRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Certification Required(IN3-4).
	///</summary>
	public ID CertificationRequired
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Penalty(IN3-5).
	///</summary>
	public MOP Penalty
	{
		get{
			MOP ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (MOP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certification Date/Time(IN3-6).
	///</summary>
	public DTM CertificationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certification Modify Date/Time(IN3-7).
	///</summary>
	public DTM CertificationModifyDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Operator(IN3-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOperator(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Operator (IN3-8).
   ///</summary>
  public XCN[] GetOperator() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Operator (IN3-8).
   ///</summary>
  public int OperatorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Certification Begin Date(IN3-9).
	///</summary>
	public DT CertificationBeginDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certification End Date(IN3-10).
	///</summary>
	public DT CertificationEndDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Days(IN3-11).
	///</summary>
	public DTN Days
	{
		get{
			DTN ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Non-Concur Code/Description(IN3-12).
	///</summary>
	public CWE NonConcurCodeDescription
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Non-Concur Effective Date/Time(IN3-13).
	///</summary>
	public DTM NonConcurEffectiveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Physician Reviewer(IN3-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPhysicianReviewer(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Physician Reviewer (IN3-14).
   ///</summary>
  public XCN[] GetPhysicianReviewer() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Physician Reviewer (IN3-14).
   ///</summary>
  public int PhysicianReviewerRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Certification Contact(IN3-15).
	///</summary>
	public ST CertificationContact
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Certification Contact Phone Number(IN3-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetCertificationContactPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Certification Contact Phone Number (IN3-16).
   ///</summary>
  public XTN[] GetCertificationContactPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Certification Contact Phone Number (IN3-16).
   ///</summary>
  public int CertificationContactPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Appeal Reason(IN3-17).
	///</summary>
	public CWE AppealReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certification Agency(IN3-18).
	///</summary>
	public CWE CertificationAgency
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Certification Agency Phone Number(IN3-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetCertificationAgencyPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Certification Agency Phone Number (IN3-19).
   ///</summary>
  public XTN[] GetCertificationAgencyPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Certification Agency Phone Number (IN3-19).
   ///</summary>
  public int CertificationAgencyPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Pre-Certification Requirement(IN3-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ICD GetPreCertificationRequirement(int rep)
	{
			ICD ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (ICD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pre-Certification Requirement (IN3-20).
   ///</summary>
  public ICD[] GetPreCertificationRequirement() {
     ICD[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new ICD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ICD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pre-Certification Requirement (IN3-20).
   ///</summary>
  public int PreCertificationRequirementRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Case Manager(IN3-21).
	///</summary>
	public ST CaseManager
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Second Opinion Date(IN3-22).
	///</summary>
	public DT SecondOpinionDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Second Opinion Status(IN3-23).
	///</summary>
	public CWE SecondOpinionStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Second Opinion Documentation Received(IN3-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSecondOpinionDocumentationReceived(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Second Opinion Documentation Received (IN3-24).
   ///</summary>
  public CWE[] GetSecondOpinionDocumentationReceived() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Second Opinion Documentation Received (IN3-24).
   ///</summary>
  public int SecondOpinionDocumentationReceivedRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Second Opinion Physician(IN3-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetSecondOpinionPhysician(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Second Opinion Physician (IN3-25).
   ///</summary>
  public XCN[] GetSecondOpinionPhysician() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Second Opinion Physician (IN3-25).
   ///</summary>
  public int SecondOpinionPhysicianRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\INV.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 INV message segment. 
/// This segment has the following fields:<ol>
///<li>INV-1: Substance Identifier (CWE)</li>
///<li>INV-2: Substance Status (CWE)</li>
///<li>INV-3: Substance Type (CWE)</li>
///<li>INV-4: Inventory Container Identifier (CWE)</li>
///<li>INV-5: Container Carrier Identifier (CWE)</li>
///<li>INV-6: Position on Carrier (CWE)</li>
///<li>INV-7: Initial Quantity (NM)</li>
///<li>INV-8: Current Quantity (NM)</li>
///<li>INV-9: Available Quantity (NM)</li>
///<li>INV-10: Consumption Quantity (NM)</li>
///<li>INV-11: Quantity Units (CWE)</li>
///<li>INV-12: Expiration Date/Time (DTM)</li>
///<li>INV-13: First Used Date/Time (DTM)</li>
///<li>INV-14: On Board Stability Duration (-)</li>
///<li>INV-15: Test/Fluid Identifier(s) (CWE)</li>
///<li>INV-16: Manufacturer Lot Number (ST)</li>
///<li>INV-17: Manufacturer Identifier (CWE)</li>
///<li>INV-18: Supplier Identifier (CWE)</li>
///<li>INV-19: On Board Stability Time (CQ)</li>
///<li>INV-20: Target Value (CQ)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class INV : AbstractSegment  {

  /**
   * Creates a INV (Inventory Detail) segment object that belongs to the given 
   * message.  
   */
	public INV(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Substance Identifier");
       this.add(typeof(CWE), true, 0, 0, new System.Object[]{message}, "Substance Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Substance Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inventory Container Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Container Carrier Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Position on Carrier");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Initial Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Current Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Available Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Consumption Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Quantity Units");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expiration Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "First Used Date/Time");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "On Board Stability Duration");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Test/Fluid Identifier(s)");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Manufacturer Lot Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Manufacturer Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Supplier Identifier");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "On Board Stability Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Target Value");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Substance Identifier(INV-1).
	///</summary>
	public CWE SubstanceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Substance Status(INV-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSubstanceStatus(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Status (INV-2).
   ///</summary>
  public CWE[] GetSubstanceStatus() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Status (INV-2).
   ///</summary>
  public int SubstanceStatusRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Substance Type(INV-3).
	///</summary>
	public CWE SubstanceType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Container Identifier(INV-4).
	///</summary>
	public CWE InventoryContainerIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Carrier Identifier(INV-5).
	///</summary>
	public CWE ContainerCarrierIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Position on Carrier(INV-6).
	///</summary>
	public CWE PositionOnCarrier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Initial Quantity(INV-7).
	///</summary>
	public NM InitialQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Quantity(INV-8).
	///</summary>
	public NM CurrentQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Available Quantity(INV-9).
	///</summary>
	public NM AvailableQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consumption Quantity(INV-10).
	///</summary>
	public NM ConsumptionQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity Units(INV-11).
	///</summary>
	public CWE QuantityUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expiration Date/Time(INV-12).
	///</summary>
	public DTM ExpirationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns First Used Date/Time(INV-13).
	///</summary>
	public DTM FirstUsedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns On Board Stability Duration(INV-14).
	///</summary>
	public - OnBoardStabilityDuration
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Test/Fluid Identifier(s)(INV-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetTestFluidIdentifierS(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Test/Fluid Identifier(s) (INV-15).
   ///</summary>
  public CWE[] GetTestFluidIdentifierS() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Test/Fluid Identifier(s) (INV-15).
   ///</summary>
  public int TestFluidIdentifierSRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Manufacturer Lot Number(INV-16).
	///</summary>
	public ST ManufacturerLotNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer Identifier(INV-17).
	///</summary>
	public CWE ManufacturerIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Supplier Identifier(INV-18).
	///</summary>
	public CWE SupplierIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns On Board Stability Time(INV-19).
	///</summary>
	public CQ OnBoardStabilityTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Target Value(INV-20).
	///</summary>
	public CQ TargetValue
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IPC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IPC message segment. 
/// This segment has the following fields:<ol>
///<li>IPC-1: Accession Identifier (EI)</li>
///<li>IPC-2: Requested Procedure ID (EI)</li>
///<li>IPC-3: Study Instance UID (EI)</li>
///<li>IPC-4: Scheduled Procedure Step ID (EI)</li>
///<li>IPC-5: Modality (CWE)</li>
///<li>IPC-6: Protocol Code (CWE)</li>
///<li>IPC-7: Scheduled Station Name (EI)</li>
///<li>IPC-8: Scheduled Procedure Step Location (CWE)</li>
///<li>IPC-9: Scheduled Station AE Title (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IPC : AbstractSegment  {

  /**
   * Creates a IPC (Imaging Procedure Control Segment) segment object that belongs to the given 
   * message.  
   */
	public IPC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Accession Identifier");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Requested Procedure ID");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Study Instance UID");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Scheduled Procedure Step ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Modality");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Protocol Code");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Scheduled Station Name");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Scheduled Procedure Step Location");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Scheduled Station AE Title");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Accession Identifier(IPC-1).
	///</summary>
	public EI AccessionIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Procedure ID(IPC-2).
	///</summary>
	public EI RequestedProcedureID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Study Instance UID(IPC-3).
	///</summary>
	public EI StudyInstanceUID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Scheduled Procedure Step ID(IPC-4).
	///</summary>
	public EI ScheduledProcedureStepID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Modality(IPC-5).
	///</summary>
	public CWE Modality
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Protocol Code(IPC-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProtocolCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Protocol Code (IPC-6).
   ///</summary>
  public CWE[] GetProtocolCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Protocol Code (IPC-6).
   ///</summary>
  public int ProtocolCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Scheduled Station Name(IPC-7).
	///</summary>
	public EI ScheduledStationName
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Scheduled Procedure Step Location(IPC-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetScheduledProcedureStepLocation(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Scheduled Procedure Step Location (IPC-8).
   ///</summary>
  public CWE[] GetScheduledProcedureStepLocation() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Scheduled Procedure Step Location (IPC-8).
   ///</summary>
  public int ScheduledProcedureStepLocationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Scheduled Station AE Title(IPC-9).
	///</summary>
	public ST ScheduledStationAETitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IPR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IPR message segment. 
/// This segment has the following fields:<ol>
///<li>IPR-1: IPR Identifier (EI)</li>
///<li>IPR-2: Provider Cross Reference Identifier (EI)</li>
///<li>IPR-3: Payer Cross Reference Identifier (EI)</li>
///<li>IPR-4: IPR Status (CWE)</li>
///<li>IPR-5: IPR Date/Time (DTM)</li>
///<li>IPR-6: Adjudicated/Paid Amount (CP)</li>
///<li>IPR-7: Expected Payment Date/Time (DTM)</li>
///<li>IPR-8: IPR Checksum (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IPR : AbstractSegment  {

  /**
   * Creates a IPR (Invoice Processing Results) segment object that belongs to the given 
   * message.  
   */
	public IPR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "IPR Identifier");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Provider Cross Reference Identifier");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Payer Cross Reference Identifier");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "IPR Status");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "IPR Date/Time");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Adjudicated/Paid Amount");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected Payment Date/Time");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "IPR Checksum");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns IPR Identifier(IPR-1).
	///</summary>
	public EI IPRIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Cross Reference Identifier(IPR-2).
	///</summary>
	public EI ProviderCrossReferenceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Cross Reference Identifier(IPR-3).
	///</summary>
	public EI PayerCrossReferenceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns IPR Status(IPR-4).
	///</summary>
	public CWE IPRStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns IPR Date/Time(IPR-5).
	///</summary>
	public DTM IPRDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjudicated/Paid Amount(IPR-6).
	///</summary>
	public CP AdjudicatedPaidAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Payment Date/Time(IPR-7).
	///</summary>
	public DTM ExpectedPaymentDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns IPR Checksum(IPR-8).
	///</summary>
	public ST IPRChecksum
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ISD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ISD message segment. 
/// This segment has the following fields:<ol>
///<li>ISD-1: Reference Interaction Number (NM)</li>
///<li>ISD-2: Interaction Type Identifier (CWE)</li>
///<li>ISD-3: Interaction Active State (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ISD : AbstractSegment  {

  /**
   * Creates a ISD (Interaction Status Detail) segment object that belongs to the given 
   * message.  
   */
	public ISD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Reference Interaction Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Interaction Type Identifier");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Interaction Active State");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Reference Interaction Number(ISD-1).
	///</summary>
	public NM ReferenceInteractionNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Interaction Type Identifier(ISD-2).
	///</summary>
	public CWE InteractionTypeIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Interaction Active State(ISD-3).
	///</summary>
	public CWE InteractionActiveState
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ITM.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ITM message segment. 
/// This segment has the following fields:<ol>
///<li>ITM-1: Item Identifier (EI)</li>
///<li>ITM-2: Item Description (ST)</li>
///<li>ITM-3: Item Status (CWE)</li>
///<li>ITM-4: Item Type (CWE)</li>
///<li>ITM-5: Item Category (CWE)</li>
///<li>ITM-6: Subject to Expiration Indicator (CNE)</li>
///<li>ITM-7: Manufacturer Identifier (EI)</li>
///<li>ITM-8: Manufacturer Name (ST)</li>
///<li>ITM-9: Manufacturer Catalog Number (ST)</li>
///<li>ITM-10: Manufacturer Labeler Identification Code (CWE)</li>
///<li>ITM-11: Patient Chargeable Indicator (CNE)</li>
///<li>ITM-12: Transaction Code (CWE)</li>
///<li>ITM-13: Transaction amount - unit (CP)</li>
///<li>ITM-14: Stocked Item Indicator (CNE)</li>
///<li>ITM-15: Supply Risk Codes (CWE)</li>
///<li>ITM-16: Approving Regulatory Agency (XON)</li>
///<li>ITM-17: Latex Indicator (CNE)</li>
///<li>ITM-18: Ruling Act (CWE)</li>
///<li>ITM-19: Item Natural Account Code (CWE)</li>
///<li>ITM-20: Approved To Buy Quantity (NM)</li>
///<li>ITM-21: Approved To Buy Price (MO)</li>
///<li>ITM-22: Taxable Item Indicator (CNE)</li>
///<li>ITM-23: Freight Charge Indicator (CNE)</li>
///<li>ITM-24: Item Set Indicator (CNE)</li>
///<li>ITM-25: Item Set Identifier (EI)</li>
///<li>ITM-26: Track Department Usage Indicator (CNE)</li>
///<li>ITM-27: Procedure Code (CNE)</li>
///<li>ITM-28: Procedure Code Modifier (CNE)</li>
///<li>ITM-29: Special Handling Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ITM : AbstractSegment  {

  /**
   * Creates a ITM (Material Item) segment object that belongs to the given 
   * message.  
   */
	public ITM(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Item Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Item Description");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Category");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Subject to Expiration Indicator");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Manufacturer Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Manufacturer Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Manufacturer Catalog Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Manufacturer Labeler Identification Code");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Patient Chargeable Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transaction Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Transaction amount - unit");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Stocked Item Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Supply Risk Codes");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Approving Regulatory Agency");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Latex Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ruling Act");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Natural Account Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Approved To Buy Quantity");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Approved To Buy Price");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Taxable Item Indicator");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Freight Charge Indicator");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Item Set Indicator");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Item Set Identifier");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Track Department Usage Indicator");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "Procedure Code Modifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Special Handling Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Item Identifier(ITM-1).
	///</summary>
	public EI ItemIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Description(ITM-2).
	///</summary>
	public ST ItemDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Status(ITM-3).
	///</summary>
	public CWE ItemStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Type(ITM-4).
	///</summary>
	public CWE ItemType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Category(ITM-5).
	///</summary>
	public CWE ItemCategory
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Subject to Expiration Indicator(ITM-6).
	///</summary>
	public CNE SubjectToExpirationIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer Identifier(ITM-7).
	///</summary>
	public EI ManufacturerIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer Name(ITM-8).
	///</summary>
	public ST ManufacturerName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer Catalog Number(ITM-9).
	///</summary>
	public ST ManufacturerCatalogNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer Labeler Identification Code(ITM-10).
	///</summary>
	public CWE ManufacturerLabelerIdentificationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Chargeable Indicator(ITM-11).
	///</summary>
	public CNE PatientChargeableIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Code(ITM-12).
	///</summary>
	public CWE TransactionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction amount - unit(ITM-13).
	///</summary>
	public CP TransactionAmountUnit
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Stocked Item Indicator(ITM-14).
	///</summary>
	public CNE StockedItemIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Supply Risk Codes(ITM-15).
	///</summary>
	public CWE SupplyRiskCodes
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Approving Regulatory Agency(ITM-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetApprovingRegulatoryAgency(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Approving Regulatory Agency (ITM-16).
   ///</summary>
  public XON[] GetApprovingRegulatoryAgency() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Approving Regulatory Agency (ITM-16).
   ///</summary>
  public int ApprovingRegulatoryAgencyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Latex Indicator(ITM-17).
	///</summary>
	public CNE LatexIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ruling Act(ITM-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRulingAct(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ruling Act (ITM-18).
   ///</summary>
  public CWE[] GetRulingAct() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ruling Act (ITM-18).
   ///</summary>
  public int RulingActRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Item Natural Account Code(ITM-19).
	///</summary>
	public CWE ItemNaturalAccountCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Approved To Buy Quantity(ITM-20).
	///</summary>
	public NM ApprovedToBuyQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Approved To Buy Price(ITM-21).
	///</summary>
	public MO ApprovedToBuyPrice
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Taxable Item Indicator(ITM-22).
	///</summary>
	public CNE TaxableItemIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Freight Charge Indicator(ITM-23).
	///</summary>
	public CNE FreightChargeIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Set Indicator(ITM-24).
	///</summary>
	public CNE ItemSetIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Set Identifier(ITM-25).
	///</summary>
	public EI ItemSetIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Track Department Usage Indicator(ITM-26).
	///</summary>
	public CNE TrackDepartmentUsageIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Code(ITM-27).
	///</summary>
	public CNE ProcedureCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Procedure Code Modifier(ITM-28).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetProcedureCodeModifier(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(28, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Procedure Code Modifier (ITM-28).
   ///</summary>
  public CNE[] GetProcedureCodeModifier() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(28);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Procedure Code Modifier (ITM-28).
   ///</summary>
  public int ProcedureCodeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(28);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Special Handling Code(ITM-29).
	///</summary>
	public CWE SpecialHandlingCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IVC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IVC message segment. 
/// This segment has the following fields:<ol>
///<li>IVC-1: Provider Invoice Number (EI)</li>
///<li>IVC-2: Payer Invoice Number (EI)</li>
///<li>IVC-3: Contract/Agreement Number (EI)</li>
///<li>IVC-4: Invoice Control (CWE)</li>
///<li>IVC-5: Invoice Reason (CWE)</li>
///<li>IVC-6: Invoice Type (CWE)</li>
///<li>IVC-7: Invoice Date/Time (DTM)</li>
///<li>IVC-8: Invoice Amount (CP)</li>
///<li>IVC-9: Payment Terms (ST)</li>
///<li>IVC-10: Provider Organization (XON)</li>
///<li>IVC-11: Payer Organization (XON)</li>
///<li>IVC-12: Attention (XCN)</li>
///<li>IVC-13: Last Invoice Indicator (ID)</li>
///<li>IVC-14: Invoice Booking Period (DTM)</li>
///<li>IVC-15: Origin (ST)</li>
///<li>IVC-16: Invoice Fixed Amount (CP)</li>
///<li>IVC-17: Special Costs (CP)</li>
///<li>IVC-18: Amount for Doctors Treatment (CP)</li>
///<li>IVC-19: Responsible Physician (XCN)</li>
///<li>IVC-20: Cost Center (CX)</li>
///<li>IVC-21: Invoice Prepaid Amount (CP)</li>
///<li>IVC-22: Total Invoice Amount without Prepaid Amount (CP)</li>
///<li>IVC-23: Total-Amount of VAT (CP)</li>
///<li>IVC-24: VAT-Rates applied (NM)</li>
///<li>IVC-25: Benefit Group (CWE)</li>
///<li>IVC-26: Provider Tax ID (ST)</li>
///<li>IVC-27: Payer Tax ID (ST)</li>
///<li>IVC-28: Provider Tax Status (CWE)</li>
///<li>IVC-29: Payer Tax Status (CWE)</li>
///<li>IVC-30: Sales Tax ID (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IVC : AbstractSegment  {

  /**
   * Creates a IVC (Invoice Segment) segment object that belongs to the given 
   * message.  
   */
	public IVC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Provider Invoice Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Payer Invoice Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Contract/Agreement Number");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Invoice Control");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Invoice Reason");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Invoice Type");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Invoice Date/Time");
       this.add(typeof(CP), true, 1, 0, new System.Object[]{message}, "Invoice Amount");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Payment Terms");
       this.add(typeof(XON), true, 1, 0, new System.Object[]{message}, "Provider Organization");
       this.add(typeof(XON), true, 1, 0, new System.Object[]{message}, "Payer Organization");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Attention");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Last Invoice Indicator");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Invoice Booking Period");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Origin");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Invoice Fixed Amount");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Special Costs");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Amount for Doctors Treatment");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Responsible Physician");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Cost Center");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Invoice Prepaid Amount");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Total Invoice Amount without Prepaid Amount");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Total-Amount of VAT");
       this.add(typeof(NM), false, 0, 0, new System.Object[]{message}, "VAT-Rates applied");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Benefit Group");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Provider Tax ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Payer Tax ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Provider Tax Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Payer Tax Status");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Sales Tax ID");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Provider Invoice Number(IVC-1).
	///</summary>
	public EI ProviderInvoiceNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Invoice Number(IVC-2).
	///</summary>
	public EI PayerInvoiceNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Contract/Agreement Number(IVC-3).
	///</summary>
	public EI ContractAgreementNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Control(IVC-4).
	///</summary>
	public CWE InvoiceControl
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Reason(IVC-5).
	///</summary>
	public CWE InvoiceReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Type(IVC-6).
	///</summary>
	public CWE InvoiceType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Date/Time(IVC-7).
	///</summary>
	public DTM InvoiceDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Amount(IVC-8).
	///</summary>
	public CP InvoiceAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment Terms(IVC-9).
	///</summary>
	public ST PaymentTerms
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Organization(IVC-10).
	///</summary>
	public XON ProviderOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Organization(IVC-11).
	///</summary>
	public XON PayerOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Attention(IVC-12).
	///</summary>
	public XCN Attention
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Last Invoice Indicator(IVC-13).
	///</summary>
	public ID LastInvoiceIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Booking Period(IVC-14).
	///</summary>
	public DTM InvoiceBookingPeriod
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Origin(IVC-15).
	///</summary>
	public ST Origin
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Fixed Amount(IVC-16).
	///</summary>
	public CP InvoiceFixedAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Special Costs(IVC-17).
	///</summary>
	public CP SpecialCosts
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Amount for Doctors Treatment(IVC-18).
	///</summary>
	public CP AmountForDoctorsTreatment
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Responsible Physician(IVC-19).
	///</summary>
	public XCN ResponsiblePhysician
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cost Center(IVC-20).
	///</summary>
	public CX CostCenter
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Invoice Prepaid Amount(IVC-21).
	///</summary>
	public CP InvoicePrepaidAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Invoice Amount without Prepaid Amount(IVC-22).
	///</summary>
	public CP TotalInvoiceAmountWithoutPrepaidAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total-Amount of VAT(IVC-23).
	///</summary>
	public CP TotalAmountOfVAT
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of VAT-Rates applied(IVC-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetVATRatesApplied(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of VAT-Rates applied (IVC-24).
   ///</summary>
  public NM[] GetVATRatesApplied() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of VAT-Rates applied (IVC-24).
   ///</summary>
  public int VATRatesAppliedRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Benefit Group(IVC-25).
	///</summary>
	public CWE BenefitGroup
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Tax ID(IVC-26).
	///</summary>
	public ST ProviderTaxID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Tax ID(IVC-27).
	///</summary>
	public ST PayerTaxID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Tax Status(IVC-28).
	///</summary>
	public CWE ProviderTaxStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Tax Status(IVC-29).
	///</summary>
	public CWE PayerTaxStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sales Tax ID(IVC-30).
	///</summary>
	public ST SalesTaxID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\IVT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 IVT message segment. 
/// This segment has the following fields:<ol>
///<li>IVT-1: Set Id - IVT (SI)</li>
///<li>IVT-2: Inventory Location Identifier (EI)</li>
///<li>IVT-3: Inventory Location Name (ST)</li>
///<li>IVT-4: Source Location Identifier (EI)</li>
///<li>IVT-5: Source Location Name (ST)</li>
///<li>IVT-6: Item Status (CWE)</li>
///<li>IVT-7: Bin Location Identifier (EI)</li>
///<li>IVT-8: Order Packaging (CWE)</li>
///<li>IVT-9: Issue Packaging (CWE)</li>
///<li>IVT-10: Default Inventory Asset Account (EI)</li>
///<li>IVT-11: Patient Chargeable Indicator (CNE)</li>
///<li>IVT-12: Transaction Code (CWE)</li>
///<li>IVT-13: Transaction amount - unit (CP)</li>
///<li>IVT-14: Item Importance Code (CWE)</li>
///<li>IVT-15: Stocked Item Indicator (CNE)</li>
///<li>IVT-16: Consignment Item Indicator (CNE)</li>
///<li>IVT-17: Reusable Item Indicator (CNE)</li>
///<li>IVT-18: Reusable Cost (CP)</li>
///<li>IVT-19: Substitute Item Identifier (EI)</li>
///<li>IVT-20: Latex-Free Substitute Item Identifier (EI)</li>
///<li>IVT-21: Recommended Reorder Theory (CWE)</li>
///<li>IVT-22: Recommended Safety Stock Days (NM)</li>
///<li>IVT-23: Recommended Maximum Days Inventory (NM)</li>
///<li>IVT-24: Recommended Order Point (NM)</li>
///<li>IVT-25: Recommended Order Amount (NM)</li>
///<li>IVT-26: Operating Room Par Level Indicator (CNE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class IVT : AbstractSegment  {

  /**
   * Creates a IVT (Material Location) segment object that belongs to the given 
   * message.  
   */
	public IVT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set Id - IVT");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Inventory Location Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Inventory Location Name");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Source Location Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Source Location Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Status");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Bin Location Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Order Packaging");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Issue Packaging");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Default Inventory Asset Account");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Patient Chargeable Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transaction Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Transaction amount - unit");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Importance Code");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Stocked Item Indicator");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Consignment Item Indicator");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Reusable Item Indicator");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Reusable Cost");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Substitute Item Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Latex-Free Substitute Item Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Recommended Reorder Theory");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Recommended Safety Stock Days");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Recommended Maximum Days Inventory");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Recommended Order Point");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Recommended Order Amount");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Operating Room Par Level Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set Id - IVT(IVT-1).
	///</summary>
	public SI SetIdIVT
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Location Identifier(IVT-2).
	///</summary>
	public EI InventoryLocationIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Location Name(IVT-3).
	///</summary>
	public ST InventoryLocationName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Source Location Identifier(IVT-4).
	///</summary>
	public EI SourceLocationIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Source Location Name(IVT-5).
	///</summary>
	public ST SourceLocationName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Status(IVT-6).
	///</summary>
	public CWE ItemStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Bin Location Identifier(IVT-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetBinLocationIdentifier(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Bin Location Identifier (IVT-7).
   ///</summary>
  public EI[] GetBinLocationIdentifier() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Bin Location Identifier (IVT-7).
   ///</summary>
  public int BinLocationIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Order Packaging(IVT-8).
	///</summary>
	public CWE OrderPackaging
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Issue Packaging(IVT-9).
	///</summary>
	public CWE IssuePackaging
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Default Inventory Asset Account(IVT-10).
	///</summary>
	public EI DefaultInventoryAssetAccount
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Chargeable Indicator(IVT-11).
	///</summary>
	public CNE PatientChargeableIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Code(IVT-12).
	///</summary>
	public CWE TransactionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction amount - unit(IVT-13).
	///</summary>
	public CP TransactionAmountUnit
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Importance Code(IVT-14).
	///</summary>
	public CWE ItemImportanceCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Stocked Item Indicator(IVT-15).
	///</summary>
	public CNE StockedItemIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consignment Item Indicator(IVT-16).
	///</summary>
	public CNE ConsignmentItemIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reusable Item Indicator(IVT-17).
	///</summary>
	public CNE ReusableItemIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reusable Cost(IVT-18).
	///</summary>
	public CP ReusableCost
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Substitute Item Identifier(IVT-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetSubstituteItemIdentifier(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substitute Item Identifier (IVT-19).
   ///</summary>
  public EI[] GetSubstituteItemIdentifier() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substitute Item Identifier (IVT-19).
   ///</summary>
  public int SubstituteItemIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Latex-Free Substitute Item Identifier(IVT-20).
	///</summary>
	public EI LatexFreeSubstituteItemIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recommended Reorder Theory(IVT-21).
	///</summary>
	public CWE RecommendedReorderTheory
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recommended Safety Stock Days(IVT-22).
	///</summary>
	public NM RecommendedSafetyStockDays
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recommended Maximum Days Inventory(IVT-23).
	///</summary>
	public NM RecommendedMaximumDaysInventory
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recommended Order Point(IVT-24).
	///</summary>
	public NM RecommendedOrderPoint
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recommended Order Amount(IVT-25).
	///</summary>
	public NM RecommendedOrderAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Operating Room Par Level Indicator(IVT-26).
	///</summary>
	public CNE OperatingRoomParLevelIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\LAN.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 LAN message segment. 
/// This segment has the following fields:<ol>
///<li>LAN-1: Set ID - LAN (SI)</li>
///<li>LAN-2: Language Code (CWE)</li>
///<li>LAN-3: Language Ability Code (CWE)</li>
///<li>LAN-4: Language Proficiency Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class LAN : AbstractSegment  {

  /**
   * Creates a LAN (Language Detail) segment object that belongs to the given 
   * message.  
   */
	public LAN(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - LAN");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Language Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Language Ability Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Language Proficiency Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - LAN(LAN-1).
	///</summary>
	public SI SetIDLAN
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Language Code(LAN-2).
	///</summary>
	public CWE LanguageCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Language Ability Code(LAN-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLanguageAbilityCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Language Ability Code (LAN-3).
   ///</summary>
  public CWE[] GetLanguageAbilityCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Language Ability Code (LAN-3).
   ///</summary>
  public int LanguageAbilityCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Language Proficiency Code(LAN-4).
	///</summary>
	public CWE LanguageProficiencyCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\LCC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 LCC message segment. 
/// This segment has the following fields:<ol>
///<li>LCC-1: Primary Key Value - LCC (PL)</li>
///<li>LCC-2: Location Department (CWE)</li>
///<li>LCC-3: Accommodation Type (CWE)</li>
///<li>LCC-4: Charge Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class LCC : AbstractSegment  {

  /**
   * Creates a LCC (Location Charge Code) segment object that belongs to the given 
   * message.  
   */
	public LCC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), true, 1, 0, new System.Object[]{message}, "Primary Key Value - LCC");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Location Department");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Accommodation Type");
       this.add(typeof(CWE), true, 0, 0, new System.Object[]{message}, "Charge Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - LCC(LCC-1).
	///</summary>
	public PL PrimaryKeyValueLCC
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Department(LCC-2).
	///</summary>
	public CWE LocationDepartment
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Accommodation Type(LCC-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAccommodationType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Accommodation Type (LCC-3).
   ///</summary>
  public CWE[] GetAccommodationType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Accommodation Type (LCC-3).
   ///</summary>
  public int AccommodationTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Charge Code(LCC-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetChargeCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Charge Code (LCC-4).
   ///</summary>
  public CWE[] GetChargeCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Charge Code (LCC-4).
   ///</summary>
  public int ChargeCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\LCH.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 LCH message segment. 
/// This segment has the following fields:<ol>
///<li>LCH-1: Primary Key Value - LCH (PL)</li>
///<li>LCH-2: Segment Action Code (ID)</li>
///<li>LCH-3: Segment Unique Key (EI)</li>
///<li>LCH-4: Location Characteristic ID (CWE)</li>
///<li>LCH-5: Location Characteristic Value - LCH (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class LCH : AbstractSegment  {

  /**
   * Creates a LCH (Location Characteristic) segment object that belongs to the given 
   * message.  
   */
	public LCH(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), true, 1, 0, new System.Object[]{message}, "Primary Key Value - LCH");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Segment Unique Key");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Location Characteristic ID");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Location Characteristic Value - LCH");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - LCH(LCH-1).
	///</summary>
	public PL PrimaryKeyValueLCH
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(LCH-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Unique Key(LCH-3).
	///</summary>
	public EI SegmentUniqueKey
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Characteristic ID(LCH-4).
	///</summary>
	public CWE LocationCharacteristicID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Characteristic Value - LCH(LCH-5).
	///</summary>
	public CWE LocationCharacteristicValueLCH
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\LDP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 LDP message segment. 
/// This segment has the following fields:<ol>
///<li>LDP-1: Primary Key Value - LDP (PL)</li>
///<li>LDP-2: Location Department (CWE)</li>
///<li>LDP-3: Location Service (CWE)</li>
///<li>LDP-4: Specialty Type (CWE)</li>
///<li>LDP-5: Valid Patient Classes (CWE)</li>
///<li>LDP-6: Active/Inactive Flag (ID)</li>
///<li>LDP-7: Activation Date - LDP (DTM)</li>
///<li>LDP-8: Inactivation Date - LDP (DTM)</li>
///<li>LDP-9: Inactivated Reason (ST)</li>
///<li>LDP-10: Visiting Hours (VH)</li>
///<li>LDP-11: Contact Phone (XTN)</li>
///<li>LDP-12: Location Cost Center (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class LDP : AbstractSegment  {

  /**
   * Creates a LDP (Location Department) segment object that belongs to the given 
   * message.  
   */
	public LDP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), true, 1, 0, new System.Object[]{message}, "Primary Key Value - LDP");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Location Department");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Location Service");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specialty Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Valid Patient Classes");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 183}, "Active/Inactive Flag");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Activation Date - LDP");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Inactivation Date - LDP");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Inactivated Reason");
       this.add(typeof(VH), false, 0, 0, new System.Object[]{message}, "Visiting Hours");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Contact Phone");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Location Cost Center");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - LDP(LDP-1).
	///</summary>
	public PL PrimaryKeyValueLDP
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Department(LDP-2).
	///</summary>
	public CWE LocationDepartment
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Location Service(LDP-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLocationService(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Service (LDP-3).
   ///</summary>
  public CWE[] GetLocationService() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Service (LDP-3).
   ///</summary>
  public int LocationServiceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Specialty Type(LDP-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecialtyType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specialty Type (LDP-4).
   ///</summary>
  public CWE[] GetSpecialtyType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specialty Type (LDP-4).
   ///</summary>
  public int SpecialtyTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Valid Patient Classes(LDP-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetValidPatientClasses(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Valid Patient Classes (LDP-5).
   ///</summary>
  public CWE[] GetValidPatientClasses() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Valid Patient Classes (LDP-5).
   ///</summary>
  public int ValidPatientClassesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Active/Inactive Flag(LDP-6).
	///</summary>
	public ID ActiveInactiveFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Activation Date - LDP(LDP-7).
	///</summary>
	public DTM ActivationDateLDP
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactivation Date - LDP(LDP-8).
	///</summary>
	public DTM InactivationDateLDP
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactivated Reason(LDP-9).
	///</summary>
	public ST InactivatedReason
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Visiting Hours(LDP-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public VH GetVisitingHours(int rep)
	{
			VH ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (VH)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Visiting Hours (LDP-10).
   ///</summary>
  public VH[] GetVisitingHours() {
     VH[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new VH[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (VH)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Visiting Hours (LDP-10).
   ///</summary>
  public int VisitingHoursRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Contact Phone(LDP-11).
	///</summary>
	public XTN ContactPhone
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Cost Center(LDP-12).
	///</summary>
	public CWE LocationCostCenter
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\LOC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 LOC message segment. 
/// This segment has the following fields:<ol>
///<li>LOC-1: Primary Key Value - LOC (PL)</li>
///<li>LOC-2: Location Description (ST)</li>
///<li>LOC-3: Location Type - LOC (CWE)</li>
///<li>LOC-4: Organization Name - LOC (XON)</li>
///<li>LOC-5: Location Address (XAD)</li>
///<li>LOC-6: Location Phone (XTN)</li>
///<li>LOC-7: License Number (CWE)</li>
///<li>LOC-8: Location Equipment (CWE)</li>
///<li>LOC-9: Location Service Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class LOC : AbstractSegment  {

  /**
   * Creates a LOC (Location Identification) segment object that belongs to the given 
   * message.  
   */
	public LOC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), true, 1, 0, new System.Object[]{message}, "Primary Key Value - LOC");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Location Description");
       this.add(typeof(CWE), true, 0, 0, new System.Object[]{message}, "Location Type - LOC");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Organization Name - LOC");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Location Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Location Phone");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "License Number");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Location Equipment");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Location Service Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - LOC(LOC-1).
	///</summary>
	public PL PrimaryKeyValueLOC
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Description(LOC-2).
	///</summary>
	public ST LocationDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Location Type - LOC(LOC-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLocationTypeLOC(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Type - LOC (LOC-3).
   ///</summary>
  public CWE[] GetLocationTypeLOC() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Type - LOC (LOC-3).
   ///</summary>
  public int LocationTypeLOCRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Organization Name - LOC(LOC-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetOrganizationNameLOC(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Organization Name - LOC (LOC-4).
   ///</summary>
  public XON[] GetOrganizationNameLOC() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Organization Name - LOC (LOC-4).
   ///</summary>
  public int OrganizationNameLOCRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Location Address(LOC-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetLocationAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Address (LOC-5).
   ///</summary>
  public XAD[] GetLocationAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Address (LOC-5).
   ///</summary>
  public int LocationAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Location Phone(LOC-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetLocationPhone(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Phone (LOC-6).
   ///</summary>
  public XTN[] GetLocationPhone() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Phone (LOC-6).
   ///</summary>
  public int LocationPhoneRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of License Number(LOC-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLicenseNumber(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of License Number (LOC-7).
   ///</summary>
  public CWE[] GetLicenseNumber() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of License Number (LOC-7).
   ///</summary>
  public int LicenseNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Location Equipment(LOC-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLocationEquipment(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location Equipment (LOC-8).
   ///</summary>
  public CWE[] GetLocationEquipment() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location Equipment (LOC-8).
   ///</summary>
  public int LocationEquipmentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Location Service Code(LOC-9).
	///</summary>
	public CWE LocationServiceCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\LRL.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 LRL message segment. 
/// This segment has the following fields:<ol>
///<li>LRL-1: Primary Key Value - LRL (PL)</li>
///<li>LRL-2: Segment Action Code (ID)</li>
///<li>LRL-3: Segment Unique Key (EI)</li>
///<li>LRL-4: Location Relationship ID (CWE)</li>
///<li>LRL-5: Organizational Location Relationship Value (XON)</li>
///<li>LRL-6: Patient Location Relationship Value (PL)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class LRL : AbstractSegment  {

  /**
   * Creates a LRL (Location Relationship) segment object that belongs to the given 
   * message.  
   */
	public LRL(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), true, 1, 0, new System.Object[]{message}, "Primary Key Value - LRL");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Segment Unique Key");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Location Relationship ID");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Organizational Location Relationship Value");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Patient Location Relationship Value");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - LRL(LRL-1).
	///</summary>
	public PL PrimaryKeyValueLRL
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(LRL-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Unique Key(LRL-3).
	///</summary>
	public EI SegmentUniqueKey
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Location Relationship ID(LRL-4).
	///</summary>
	public CWE LocationRelationshipID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Organizational Location Relationship Value(LRL-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetOrganizationalLocationRelationshipValue(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Organizational Location Relationship Value (LRL-5).
   ///</summary>
  public XON[] GetOrganizationalLocationRelationshipValue() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Organizational Location Relationship Value (LRL-5).
   ///</summary>
  public int OrganizationalLocationRelationshipValueRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Location Relationship Value(LRL-6).
	///</summary>
	public PL PatientLocationRelationshipValue
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\MFA.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 MFA message segment. 
/// This segment has the following fields:<ol>
///<li>MFA-1: Record-Level Event Code (ID)</li>
///<li>MFA-2: MFN Control ID (ST)</li>
///<li>MFA-3: Event Completion Date/Time (DTM)</li>
///<li>MFA-4: MFN Record Level Error Return (CWE)</li>
///<li>MFA-5: Primary Key Value - MFA (varies)</li>
///<li>MFA-6: Primary Key Value Type - MFA (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class MFA : AbstractSegment  {

  /**
   * Creates a MFA (Master File Acknowledgment) segment object that belongs to the given 
   * message.  
   */
	public MFA(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 3, new System.Object[]{message, 180}, "Record-Level Event Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "MFN Control ID");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Event Completion Date/Time");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "MFN Record Level Error Return");
       this.add(typeof(Varies), true, 0, 0, new System.Object[]{message}, "Primary Key Value - MFA");
       this.add(typeof(ID), true, 0, 3, new System.Object[]{message, 355}, "Primary Key Value Type - MFA");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Record-Level Event Code(MFA-1).
	///</summary>
	public ID RecordLevelEventCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns MFN Control ID(MFA-2).
	///</summary>
	public ST MFNControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Completion Date/Time(MFA-3).
	///</summary>
	public DTM EventCompletionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns MFN Record Level Error Return(MFA-4).
	///</summary>
	public CWE MFNRecordLevelErrorReturn
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Primary Key Value - MFA(MFA-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public Varies GetPrimaryKeyValueMFA(int rep)
	{
			Varies ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (Varies)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Key Value - MFA (MFA-5).
   ///</summary>
  public Varies[] GetPrimaryKeyValueMFA() {
     Varies[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new Varies[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (Varies)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Key Value - MFA (MFA-5).
   ///</summary>
  public int PrimaryKeyValueMFARepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Primary Key Value Type - MFA(MFA-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetPrimaryKeyValueTypeMFA(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Key Value Type - MFA (MFA-6).
   ///</summary>
  public ID[] GetPrimaryKeyValueTypeMFA() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Key Value Type - MFA (MFA-6).
   ///</summary>
  public int PrimaryKeyValueTypeMFARepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\MFE.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 MFE message segment. 
/// This segment has the following fields:<ol>
///<li>MFE-1: Record-Level Event Code (ID)</li>
///<li>MFE-2: MFN Control ID (ST)</li>
///<li>MFE-3: Effective Date/Time (DTM)</li>
///<li>MFE-4: Primary Key Value - MFE (varies)</li>
///<li>MFE-5: Primary Key Value Type (ID)</li>
///<li>MFE-6: Entered Date/Time (DTM)</li>
///<li>MFE-7: Entered By (XCN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class MFE : AbstractSegment  {

  /**
   * Creates a MFE (Master File Entry) segment object that belongs to the given 
   * message.  
   */
	public MFE(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 3, new System.Object[]{message, 180}, "Record-Level Event Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "MFN Control ID");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Date/Time");
       this.add(typeof(Varies), true, 0, 0, new System.Object[]{message}, "Primary Key Value - MFE");
       this.add(typeof(ID), true, 0, 3, new System.Object[]{message, 355}, "Primary Key Value Type");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Entered Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Entered By");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Record-Level Event Code(MFE-1).
	///</summary>
	public ID RecordLevelEventCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns MFN Control ID(MFE-2).
	///</summary>
	public ST MFNControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date/Time(MFE-3).
	///</summary>
	public DTM EffectiveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Primary Key Value - MFE(MFE-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public Varies GetPrimaryKeyValueMFE(int rep)
	{
			Varies ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (Varies)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Key Value - MFE (MFE-4).
   ///</summary>
  public Varies[] GetPrimaryKeyValueMFE() {
     Varies[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new Varies[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (Varies)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Key Value - MFE (MFE-4).
   ///</summary>
  public int PrimaryKeyValueMFERepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Primary Key Value Type(MFE-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetPrimaryKeyValueType(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Key Value Type (MFE-5).
   ///</summary>
  public ID[] GetPrimaryKeyValueType() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Key Value Type (MFE-5).
   ///</summary>
  public int PrimaryKeyValueTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Entered Date/Time(MFE-6).
	///</summary>
	public DTM EnteredDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entered By(MFE-7).
	///</summary>
	public XCN EnteredBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\MFI.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 MFI message segment. 
/// This segment has the following fields:<ol>
///<li>MFI-1: Master File Identifier (CWE)</li>
///<li>MFI-2: Master File Application Identifier (HD)</li>
///<li>MFI-3: File-Level Event Code (ID)</li>
///<li>MFI-4: Entered Date/Time (DTM)</li>
///<li>MFI-5: Effective Date/Time (DTM)</li>
///<li>MFI-6: Response Level Code (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class MFI : AbstractSegment  {

  /**
   * Creates a MFI (Master File Identification) segment object that belongs to the given 
   * message.  
   */
	public MFI(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Master File Identifier");
       this.add(typeof(HD), false, 0, 0, new System.Object[]{message}, "Master File Application Identifier");
       this.add(typeof(ID), true, 1, 3, new System.Object[]{message, 178}, "File-Level Event Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Entered Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Date/Time");
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 179}, "Response Level Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Master File Identifier(MFI-1).
	///</summary>
	public CWE MasterFileIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Master File Application Identifier(MFI-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public HD GetMasterFileApplicationIdentifier(int rep)
	{
			HD ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (HD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Master File Application Identifier (MFI-2).
   ///</summary>
  public HD[] GetMasterFileApplicationIdentifier() {
     HD[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new HD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (HD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Master File Application Identifier (MFI-2).
   ///</summary>
  public int MasterFileApplicationIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns File-Level Event Code(MFI-3).
	///</summary>
	public ID FileLevelEventCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entered Date/Time(MFI-4).
	///</summary>
	public DTM EnteredDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date/Time(MFI-5).
	///</summary>
	public DTM EffectiveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Response Level Code(MFI-6).
	///</summary>
	public ID ResponseLevelCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\MRG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 MRG message segment. 
/// This segment has the following fields:<ol>
///<li>MRG-1: Prior Patient Identifier List (CX)</li>
///<li>MRG-2: Prior Alternate Patient ID (-)</li>
///<li>MRG-3: Prior Patient Account Number (CX)</li>
///<li>MRG-4: Prior Patient ID (-)</li>
///<li>MRG-5: Prior Visit Number (CX)</li>
///<li>MRG-6: Prior Alternate Visit ID (CX)</li>
///<li>MRG-7: Prior Patient Name (XPN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class MRG : AbstractSegment  {

  /**
   * Creates a MRG (Merge Patient Information) segment object that belongs to the given 
   * message.  
   */
	public MRG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CX), true, 0, 0, new System.Object[]{message}, "Prior Patient Identifier List");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Prior Alternate Patient ID");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Prior Patient Account Number");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Prior Patient ID");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Prior Visit Number");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Prior Alternate Visit ID");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Prior Patient Name");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Prior Patient Identifier List(MRG-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetPriorPatientIdentifierList(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Prior Patient Identifier List (MRG-1).
   ///</summary>
  public CX[] GetPriorPatientIdentifierList() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Prior Patient Identifier List (MRG-1).
   ///</summary>
  public int PriorPatientIdentifierListRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Prior Alternate Patient ID(MRG-2).
	///</summary>
	public - PriorAlternatePatientID
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Patient Account Number(MRG-3).
	///</summary>
	public CX PriorPatientAccountNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Patient ID(MRG-4).
	///</summary>
	public - PriorPatientID
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Visit Number(MRG-5).
	///</summary>
	public CX PriorVisitNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Alternate Visit ID(MRG-6).
	///</summary>
	public CX PriorAlternateVisitID
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Prior Patient Name(MRG-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetPriorPatientName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Prior Patient Name (MRG-7).
   ///</summary>
  public XPN[] GetPriorPatientName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Prior Patient Name (MRG-7).
   ///</summary>
  public int PriorPatientNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\MSA.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 MSA message segment. 
/// This segment has the following fields:<ol>
///<li>MSA-1: Acknowledgment Code (ID)</li>
///<li>MSA-2: Message Control ID (ST)</li>
///<li>MSA-3: Text Message (-)</li>
///<li>MSA-4: Expected Sequence Number (NM)</li>
///<li>MSA-5: Delayed Acknowledgment Type (-)</li>
///<li>MSA-6: Error Condition (-)</li>
///<li>MSA-7: Message Waiting Number (NM)</li>
///<li>MSA-8: Message Waiting Priority (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class MSA : AbstractSegment  {

  /**
   * Creates a MSA (Message Acknowledgment) segment object that belongs to the given 
   * message.  
   */
	public MSA(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 8}, "Acknowledgment Code");
       this.add(typeof(ST), true, 1, 199, new System.Object[]{message}, "Message Control ID");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Text Message");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Expected Sequence Number");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Delayed Acknowledgment Type");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Error Condition");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Message Waiting Number");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 520}, "Message Waiting Priority");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Acknowledgment Code(MSA-1).
	///</summary>
	public ID AcknowledgmentCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Control ID(MSA-2).
	///</summary>
	public ST MessageControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Text Message(MSA-3).
	///</summary>
	public - TextMessage
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Sequence Number(MSA-4).
	///</summary>
	public NM ExpectedSequenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Delayed Acknowledgment Type(MSA-5).
	///</summary>
	public - DelayedAcknowledgmentType
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Error Condition(MSA-6).
	///</summary>
	public - ErrorCondition
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Waiting Number(MSA-7).
	///</summary>
	public NM MessageWaitingNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Waiting Priority(MSA-8).
	///</summary>
	public ID MessageWaitingPriority
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\MSH.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 MSH message segment. 
/// This segment has the following fields:<ol>
///<li>MSH-1: Field Separator (ST)</li>
///<li>MSH-2: Encoding Characters (ST)</li>
///<li>MSH-3: Sending Application (HD)</li>
///<li>MSH-4: Sending Facility (HD)</li>
///<li>MSH-5: Receiving Application (HD)</li>
///<li>MSH-6: Receiving Facility (HD)</li>
///<li>MSH-7: Date/Time of Message (DTM)</li>
///<li>MSH-8: Security (ST)</li>
///<li>MSH-9: Message Type (MSG)</li>
///<li>MSH-10: Message Control ID (ST)</li>
///<li>MSH-11: Processing ID (PT)</li>
///<li>MSH-12: Version ID (VID)</li>
///<li>MSH-13: Sequence Number (NM)</li>
///<li>MSH-14: Continuation Pointer (ST)</li>
///<li>MSH-15: Accept Acknowledgment Type (ID)</li>
///<li>MSH-16: Application Acknowledgment Type (ID)</li>
///<li>MSH-17: Country Code (ID)</li>
///<li>MSH-18: Character Set (ID)</li>
///<li>MSH-19: Principal Language Of Message (CWE)</li>
///<li>MSH-20: Alternate Character Set Handling Scheme (ID)</li>
///<li>MSH-21: Message Profile Identifier (EI)</li>
///<li>MSH-22: Sending Responsible Organization (XON)</li>
///<li>MSH-23: Receiving Responsible Organization (XON)</li>
///<li>MSH-24: Sending Network Address (HD)</li>
///<li>MSH-25: Receiving Network Address (HD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class MSH : AbstractSegment  {

  /**
   * Creates a MSH (Message Header) segment object that belongs to the given 
   * message.  
   */
	public MSH(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), true, 1, 1, new System.Object[]{message}, "Field Separator");
       this.add(typeof(ST), true, 1, 5, new System.Object[]{message}, "Encoding Characters");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Sending Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Sending Facility");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Receiving Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Receiving Facility");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/Time of Message");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Security");
       this.add(typeof(MSG), true, 1, 0, new System.Object[]{message}, "Message Type");
       this.add(typeof(ST), true, 1, 199, new System.Object[]{message}, "Message Control ID");
       this.add(typeof(PT), true, 1, 0, new System.Object[]{message}, "Processing ID");
       this.add(typeof(VID), true, 1, 0, new System.Object[]{message}, "Version ID");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sequence Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Continuation Pointer");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 155}, "Accept Acknowledgment Type");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 155}, "Application Acknowledgment Type");
       this.add(typeof(ID), false, 1, 3, new System.Object[]{message, 399}, "Country Code");
       this.add(typeof(ID), false, 0, 15, new System.Object[]{message, 211}, "Character Set");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Principal Language Of Message");
       this.add(typeof(ID), false, 1, 13, new System.Object[]{message, 356}, "Alternate Character Set Handling Scheme");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Message Profile Identifier");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Sending Responsible Organization");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Receiving Responsible Organization");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Sending Network Address");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Receiving Network Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Field Separator(MSH-1).
	///</summary>
	public ST FieldSeparator
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Encoding Characters(MSH-2).
	///</summary>
	public ST EncodingCharacters
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sending Application(MSH-3).
	///</summary>
	public HD SendingApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sending Facility(MSH-4).
	///</summary>
	public HD SendingFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Receiving Application(MSH-5).
	///</summary>
	public HD ReceivingApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Receiving Facility(MSH-6).
	///</summary>
	public HD ReceivingFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of Message(MSH-7).
	///</summary>
	public DTM DateTimeOfMessage
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Security(MSH-8).
	///</summary>
	public ST Security
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Type(MSH-9).
	///</summary>
	public MSG MessageType
	{
		get{
			MSG ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (MSG)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Control ID(MSH-10).
	///</summary>
	public ST MessageControlID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Processing ID(MSH-11).
	///</summary>
	public PT ProcessingID
	{
		get{
			PT ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (PT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Version ID(MSH-12).
	///</summary>
	public VID VersionID
	{
		get{
			VID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (VID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sequence Number(MSH-13).
	///</summary>
	public NM SequenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Continuation Pointer(MSH-14).
	///</summary>
	public ST ContinuationPointer
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accept Acknowledgment Type(MSH-15).
	///</summary>
	public ID AcceptAcknowledgmentType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Application Acknowledgment Type(MSH-16).
	///</summary>
	public ID ApplicationAcknowledgmentType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Country Code(MSH-17).
	///</summary>
	public ID CountryCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Character Set(MSH-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetCharacterSet(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Character Set (MSH-18).
   ///</summary>
  public ID[] GetCharacterSet() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Character Set (MSH-18).
   ///</summary>
  public int CharacterSetRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Principal Language Of Message(MSH-19).
	///</summary>
	public CWE PrincipalLanguageOfMessage
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alternate Character Set Handling Scheme(MSH-20).
	///</summary>
	public ID AlternateCharacterSetHandlingScheme
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Message Profile Identifier(MSH-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetMessageProfileIdentifier(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Message Profile Identifier (MSH-21).
   ///</summary>
  public EI[] GetMessageProfileIdentifier() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Message Profile Identifier (MSH-21).
   ///</summary>
  public int MessageProfileIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Sending Responsible Organization(MSH-22).
	///</summary>
	public XON SendingResponsibleOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Receiving Responsible Organization(MSH-23).
	///</summary>
	public XON ReceivingResponsibleOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sending Network Address(MSH-24).
	///</summary>
	public HD SendingNetworkAddress
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Receiving Network Address(MSH-25).
	///</summary>
	public HD ReceivingNetworkAddress
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NCK.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NCK message segment. 
/// This segment has the following fields:<ol>
///<li>NCK-1: System Date/Time (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NCK : AbstractSegment  {

  /**
   * Creates a NCK (System Clock) segment object that belongs to the given 
   * message.  
   */
	public NCK(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(DTM), true, 1, 24, new System.Object[]{message}, "System Date/Time");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns System Date/Time(NCK-1).
	///</summary>
	public DTM SystemDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NDS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NDS message segment. 
/// This segment has the following fields:<ol>
///<li>NDS-1: Notification Reference Number (NM)</li>
///<li>NDS-2: Notification Date/Time (DTM)</li>
///<li>NDS-3: Notification Alert Severity (CWE)</li>
///<li>NDS-4: Notification Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NDS : AbstractSegment  {

  /**
   * Creates a NDS (Notification Detail) segment object that belongs to the given 
   * message.  
   */
	public NDS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Notification Reference Number");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Notification Date/Time");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Notification Alert Severity");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Notification Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Notification Reference Number(NDS-1).
	///</summary>
	public NM NotificationReferenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Notification Date/Time(NDS-2).
	///</summary>
	public DTM NotificationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Notification Alert Severity(NDS-3).
	///</summary>
	public CWE NotificationAlertSeverity
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Notification Code(NDS-4).
	///</summary>
	public CWE NotificationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NK1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NK1 message segment. 
/// This segment has the following fields:<ol>
///<li>NK1-1: Set ID - NK1 (SI)</li>
///<li>NK1-2: Name (XPN)</li>
///<li>NK1-3: Relationship (CWE)</li>
///<li>NK1-4: Address (XAD)</li>
///<li>NK1-5: Phone Number (XTN)</li>
///<li>NK1-6: Business Phone Number (XTN)</li>
///<li>NK1-7: Contact Role (CWE)</li>
///<li>NK1-8: Start Date (DT)</li>
///<li>NK1-9: End Date (DT)</li>
///<li>NK1-10: Next of Kin / Associated Parties Job Title (ST)</li>
///<li>NK1-11: Next of Kin / Associated Parties Job Code/Class (JCC)</li>
///<li>NK1-12: Next of Kin / Associated Parties Employee Number (CX)</li>
///<li>NK1-13: Organization Name - NK1 (XON)</li>
///<li>NK1-14: Marital Status (CWE)</li>
///<li>NK1-15: Administrative Sex (CWE)</li>
///<li>NK1-16: Date/Time of Birth (DTM)</li>
///<li>NK1-17: Living Dependency (CWE)</li>
///<li>NK1-18: Ambulatory Status (CWE)</li>
///<li>NK1-19: Citizenship (CWE)</li>
///<li>NK1-20: Primary Language (CWE)</li>
///<li>NK1-21: Living Arrangement (CWE)</li>
///<li>NK1-22: Publicity Code (CWE)</li>
///<li>NK1-23: Protection Indicator (ID)</li>
///<li>NK1-24: Student Indicator (CWE)</li>
///<li>NK1-25: Religion (CWE)</li>
///<li>NK1-26: Mother's Maiden Name (XPN)</li>
///<li>NK1-27: Nationality (CWE)</li>
///<li>NK1-28: Ethnic Group (CWE)</li>
///<li>NK1-29: Contact Reason (CWE)</li>
///<li>NK1-30: Contact Person's Name (XPN)</li>
///<li>NK1-31: Contact Person's Telephone Number (XTN)</li>
///<li>NK1-32: Contact Person's Address (XAD)</li>
///<li>NK1-33: Next of Kin/Associated Party's Identifiers (CX)</li>
///<li>NK1-34: Job Status (CWE)</li>
///<li>NK1-35: Race (CWE)</li>
///<li>NK1-36: Handicap (CWE)</li>
///<li>NK1-37: Contact Person Social Security Number (ST)</li>
///<li>NK1-38: Next of Kin Birth Place (ST)</li>
///<li>NK1-39: VIP Indicator (CWE)</li>
///<li>NK1-40: Next of Kin Telecommunication Information (XTN)</li>
///<li>NK1-41: Contact Person's Telecommunication Information (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NK1 : AbstractSegment  {

  /**
   * Creates a NK1 (Next of Kin / Associated Parties) segment object that belongs to the given 
   * message.  
   */
	public NK1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - NK1");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Relationship");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Phone Number");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Business Phone Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Contact Role");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Start Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "End Date");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Next of Kin / Associated Parties Job Title");
       this.add(typeof(JCC), false, 1, 0, new System.Object[]{message}, "Next of Kin / Associated Parties Job Code/Class");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Next of Kin / Associated Parties Employee Number");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Organization Name - NK1");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Marital Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administrative Sex");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of Birth");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Living Dependency");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ambulatory Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Citizenship");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Primary Language");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Arrangement");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Publicity Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Protection Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Student Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Religion");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Mother's Maiden Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Nationality");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ethnic Group");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Contact Reason");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Contact Person's Name");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Contact Person's Telephone Number");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Contact Person's Address");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Next of Kin/Associated Party's Identifiers");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Job Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Race");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Handicap");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Contact Person Social Security Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Next of Kin Birth Place");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "VIP Indicator");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Next of Kin Telecommunication Information");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Contact Person's Telecommunication Information");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - NK1(NK1-1).
	///</summary>
	public SI SetIDNK1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Name(NK1-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Name (NK1-2).
   ///</summary>
  public XPN[] GetName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Name (NK1-2).
   ///</summary>
  public int NameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Relationship(NK1-3).
	///</summary>
	public CWE Relationship
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Address(NK1-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Address (NK1-4).
   ///</summary>
  public XAD[] GetAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Address (NK1-4).
   ///</summary>
  public int AddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Phone Number(NK1-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Phone Number (NK1-5).
   ///</summary>
  public XTN[] GetPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Phone Number (NK1-5).
   ///</summary>
  public int PhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Business Phone Number(NK1-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetBusinessPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Business Phone Number (NK1-6).
   ///</summary>
  public XTN[] GetBusinessPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Business Phone Number (NK1-6).
   ///</summary>
  public int BusinessPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Contact Role(NK1-7).
	///</summary>
	public CWE ContactRole
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start Date(NK1-8).
	///</summary>
	public DT StartDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns End Date(NK1-9).
	///</summary>
	public DT EndDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Next of Kin / Associated Parties Job Title(NK1-10).
	///</summary>
	public ST NextOfKinAssociatedPartiesJobTitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Next of Kin / Associated Parties Job Code/Class(NK1-11).
	///</summary>
	public JCC NextOfKinAssociatedPartiesJobCodeClass
	{
		get{
			JCC ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (JCC)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Next of Kin / Associated Parties Employee Number(NK1-12).
	///</summary>
	public CX NextOfKinAssociatedPartiesEmployeeNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Organization Name - NK1(NK1-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetOrganizationNameNK1(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Organization Name - NK1 (NK1-13).
   ///</summary>
  public XON[] GetOrganizationNameNK1() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Organization Name - NK1 (NK1-13).
   ///</summary>
  public int OrganizationNameNK1RepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Marital Status(NK1-14).
	///</summary>
	public CWE MaritalStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administrative Sex(NK1-15).
	///</summary>
	public CWE AdministrativeSex
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of Birth(NK1-16).
	///</summary>
	public DTM DateTimeOfBirth
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Living Dependency(NK1-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLivingDependency(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Living Dependency (NK1-17).
   ///</summary>
  public CWE[] GetLivingDependency() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Living Dependency (NK1-17).
   ///</summary>
  public int LivingDependencyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ambulatory Status(NK1-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAmbulatoryStatus(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ambulatory Status (NK1-18).
   ///</summary>
  public CWE[] GetAmbulatoryStatus() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ambulatory Status (NK1-18).
   ///</summary>
  public int AmbulatoryStatusRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Citizenship(NK1-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCitizenship(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Citizenship (NK1-19).
   ///</summary>
  public CWE[] GetCitizenship() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Citizenship (NK1-19).
   ///</summary>
  public int CitizenshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Primary Language(NK1-20).
	///</summary>
	public CWE PrimaryLanguage
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Arrangement(NK1-21).
	///</summary>
	public CWE LivingArrangement
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Publicity Code(NK1-22).
	///</summary>
	public CWE PublicityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Protection Indicator(NK1-23).
	///</summary>
	public ID ProtectionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Student Indicator(NK1-24).
	///</summary>
	public CWE StudentIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Religion(NK1-25).
	///</summary>
	public CWE Religion
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Mother's Maiden Name(NK1-26).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetMotherSMaidenName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(26, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Mother's Maiden Name (NK1-26).
   ///</summary>
  public XPN[] GetMotherSMaidenName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(26);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Mother's Maiden Name (NK1-26).
   ///</summary>
  public int MotherSMaidenNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(26);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Nationality(NK1-27).
	///</summary>
	public CWE Nationality
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ethnic Group(NK1-28).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEthnicGroup(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ethnic Group (NK1-28).
   ///</summary>
  public CWE[] GetEthnicGroup() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(28);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ethnic Group (NK1-28).
   ///</summary>
  public int EthnicGroupRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(28);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Reason(NK1-29).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetContactReason(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Reason (NK1-29).
   ///</summary>
  public CWE[] GetContactReason() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(29);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Reason (NK1-29).
   ///</summary>
  public int ContactReasonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(29);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Person's Name(NK1-30).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetContactPersonSName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(30, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Person's Name (NK1-30).
   ///</summary>
  public XPN[] GetContactPersonSName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(30);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Person's Name (NK1-30).
   ///</summary>
  public int ContactPersonSNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(30);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Person's Telephone Number(NK1-31).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetContactPersonSTelephoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(31, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Person's Telephone Number (NK1-31).
   ///</summary>
  public XTN[] GetContactPersonSTelephoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(31);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Person's Telephone Number (NK1-31).
   ///</summary>
  public int ContactPersonSTelephoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(31);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contact Person's Address(NK1-32).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetContactPersonSAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(32, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contact Person's Address (NK1-32).
   ///</summary>
  public XAD[] GetContactPersonSAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(32);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contact Person's Address (NK1-32).
   ///</summary>
  public int ContactPersonSAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(32);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Next of Kin/Associated Party's Identifiers(NK1-33).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetNextOfKinAssociatedPartySIdentifiers(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(33, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Next of Kin/Associated Party's Identifiers (NK1-33).
   ///</summary>
  public CX[] GetNextOfKinAssociatedPartySIdentifiers() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(33);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Next of Kin/Associated Party's Identifiers (NK1-33).
   ///</summary>
  public int NextOfKinAssociatedPartySIdentifiersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(33);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Job Status(NK1-34).
	///</summary>
	public CWE JobStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Race(NK1-35).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRace(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Race (NK1-35).
   ///</summary>
  public CWE[] GetRace() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(35);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Race (NK1-35).
   ///</summary>
  public int RaceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(35);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Handicap(NK1-36).
	///</summary>
	public CWE Handicap
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Contact Person Social Security Number(NK1-37).
	///</summary>
	public ST ContactPersonSocialSecurityNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Next of Kin Birth Place(NK1-38).
	///</summary>
	public ST NextOfKinBirthPlace
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns VIP Indicator(NK1-39).
	///</summary>
	public CWE VIPIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Next of Kin Telecommunication Information(NK1-40).
	///</summary>
	public XTN NextOfKinTelecommunicationInformation
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Contact Person's Telecommunication Information(NK1-41).
	///</summary>
	public XTN ContactPersonSTelecommunicationInformation
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NPU.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NPU message segment. 
/// This segment has the following fields:<ol>
///<li>NPU-1: Bed Location (PL)</li>
///<li>NPU-2: Bed Status (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NPU : AbstractSegment  {

  /**
   * Creates a NPU (Bed Status Update) segment object that belongs to the given 
   * message.  
   */
	public NPU(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), true, 1, 0, new System.Object[]{message}, "Bed Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Bed Status");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Bed Location(NPU-1).
	///</summary>
	public PL BedLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bed Status(NPU-2).
	///</summary>
	public CWE BedStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NSC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NSC message segment. 
/// This segment has the following fields:<ol>
///<li>NSC-1: Application Change Type (CWE)</li>
///<li>NSC-2: Current CPU (ST)</li>
///<li>NSC-3: Current Fileserver (ST)</li>
///<li>NSC-4: Current Application (HD)</li>
///<li>NSC-5: Current Facility (HD)</li>
///<li>NSC-6: New CPU (ST)</li>
///<li>NSC-7: New Fileserver (ST)</li>
///<li>NSC-8: New Application (HD)</li>
///<li>NSC-9: New Facility (HD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NSC : AbstractSegment  {

  /**
   * Creates a NSC (Application Status Change) segment object that belongs to the given 
   * message.  
   */
	public NSC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Application Change Type");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Current CPU");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Current Fileserver");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Current Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Current Facility");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "New CPU");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "New Fileserver");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "New Application");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "New Facility");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Application Change Type(NSC-1).
	///</summary>
	public CWE ApplicationChangeType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current CPU(NSC-2).
	///</summary>
	public ST CurrentCPU
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Fileserver(NSC-3).
	///</summary>
	public ST CurrentFileserver
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Application(NSC-4).
	///</summary>
	public HD CurrentApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Facility(NSC-5).
	///</summary>
	public HD CurrentFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns New CPU(NSC-6).
	///</summary>
	public ST NewCPU
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns New Fileserver(NSC-7).
	///</summary>
	public ST NewFileserver
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns New Application(NSC-8).
	///</summary>
	public HD NewApplication
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns New Facility(NSC-9).
	///</summary>
	public HD NewFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NST.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NST message segment. 
/// This segment has the following fields:<ol>
///<li>NST-1: Statistics Available (ID)</li>
///<li>NST-2: Source Identifier (ST)</li>
///<li>NST-3: Source Type (ID)</li>
///<li>NST-4: Statistics Start (DTM)</li>
///<li>NST-5: Statistics End (DTM)</li>
///<li>NST-6: Receive Character Count (NM)</li>
///<li>NST-7: Send Character Count (NM)</li>
///<li>NST-8: Messages Received (NM)</li>
///<li>NST-9: Messages Sent (NM)</li>
///<li>NST-10: Checksum Errors Received (NM)</li>
///<li>NST-11: Length Errors Received (NM)</li>
///<li>NST-12: Other Errors Received (NM)</li>
///<li>NST-13: Connect Timeouts (NM)</li>
///<li>NST-14: Receive Timeouts (NM)</li>
///<li>NST-15: Application control-level Errors (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NST : AbstractSegment  {

  /**
   * Creates a NST (Application control level statistics) segment object that belongs to the given 
   * message.  
   */
	public NST(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 136}, "Statistics Available");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Source Identifier");
       this.add(typeof(ID), false, 1, 0, new System.Object[]{message, 332}, "Source Type");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Statistics Start");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Statistics End");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Receive Character Count");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Send Character Count");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Messages Received");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Messages Sent");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Checksum Errors Received");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Length Errors Received");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Other Errors Received");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Connect Timeouts");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Receive Timeouts");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Application control-level Errors");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Statistics Available(NST-1).
	///</summary>
	public ID StatisticsAvailable
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Source Identifier(NST-2).
	///</summary>
	public ST SourceIdentifier
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Source Type(NST-3).
	///</summary>
	public ID SourceType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Statistics Start(NST-4).
	///</summary>
	public DTM StatisticsStart
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Statistics End(NST-5).
	///</summary>
	public DTM StatisticsEnd
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Receive Character Count(NST-6).
	///</summary>
	public NM ReceiveCharacterCount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Send Character Count(NST-7).
	///</summary>
	public NM SendCharacterCount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Messages Received(NST-8).
	///</summary>
	public NM MessagesReceived
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Messages Sent(NST-9).
	///</summary>
	public NM MessagesSent
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Checksum Errors Received(NST-10).
	///</summary>
	public NM ChecksumErrorsReceived
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Length Errors Received(NST-11).
	///</summary>
	public NM LengthErrorsReceived
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Other Errors Received(NST-12).
	///</summary>
	public NM OtherErrorsReceived
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Connect Timeouts(NST-13).
	///</summary>
	public NM ConnectTimeouts
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Receive Timeouts(NST-14).
	///</summary>
	public NM ReceiveTimeouts
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Application control-level Errors(NST-15).
	///</summary>
	public NM ApplicationControlLevelErrors
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\NTE.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 NTE message segment. 
/// This segment has the following fields:<ol>
///<li>NTE-1: Set ID - NTE (SI)</li>
///<li>NTE-2: Source of Comment (ID)</li>
///<li>NTE-3: Comment (FT)</li>
///<li>NTE-4: Comment Type (CWE)</li>
///<li>NTE-5: Entered By (XCN)</li>
///<li>NTE-6: Entered Date/Time (DTM)</li>
///<li>NTE-7: Effective Start Date (DTM)</li>
///<li>NTE-8: Expiration Date (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class NTE : AbstractSegment  {

  /**
   * Creates a NTE (Notes and Comments) segment object that belongs to the given 
   * message.  
   */
	public NTE(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 0, new System.Object[]{message}, "Set ID - NTE");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 105}, "Source of Comment");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Comment");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Comment Type");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Entered By");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Entered Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Start Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expiration Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - NTE(NTE-1).
	///</summary>
	public SI SetIDNTE
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Source of Comment(NTE-2).
	///</summary>
	public ID SourceOfComment
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Comment(NTE-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetComment(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Comment (NTE-3).
   ///</summary>
  public FT[] GetComment() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Comment (NTE-3).
   ///</summary>
  public int CommentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Comment Type(NTE-4).
	///</summary>
	public CWE CommentType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entered By(NTE-5).
	///</summary>
	public XCN EnteredBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entered Date/Time(NTE-6).
	///</summary>
	public DTM EnteredDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Start Date(NTE-7).
	///</summary>
	public DTM EffectiveStartDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expiration Date(NTE-8).
	///</summary>
	public DTM ExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OBR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OBR message segment. 
/// This segment has the following fields:<ol>
///<li>OBR-1: Set ID - OBR (SI)</li>
///<li>OBR-2: Placer Order Number (EI)</li>
///<li>OBR-3: Filler Order Number (EI)</li>
///<li>OBR-4: Universal Service Identifier (CWE)</li>
///<li>OBR-5: Priority (-)</li>
///<li>OBR-6: Requested Date/Time (-)</li>
///<li>OBR-7: Observation Date/Time # (DTM)</li>
///<li>OBR-8: Observation End Date/Time # (DTM)</li>
///<li>OBR-9: Collection Volume * (CQ)</li>
///<li>OBR-10: Collector Identifier * (XCN)</li>
///<li>OBR-11: Specimen Action Code * (ID)</li>
///<li>OBR-12: Danger Code (CWE)</li>
///<li>OBR-13: Relevant Clinical Information (ST)</li>
///<li>OBR-14: Specimen Received Date/Time (DTM)</li>
///<li>OBR-15: Specimen Source (-)</li>
///<li>OBR-16: Ordering Provider (XCN)</li>
///<li>OBR-17: Order Callback Phone Number (XTN)</li>
///<li>OBR-18: Placer Field 1 (ST)</li>
///<li>OBR-19: Placer Field 2 (ST)</li>
///<li>OBR-20: Filler Field 1 + (ST)</li>
///<li>OBR-21: Filler Field 2 + (ST)</li>
///<li>OBR-22: Results Rpt/Status Chng - Date/Time + (DTM)</li>
///<li>OBR-23: Charge to Practice + (MOC)</li>
///<li>OBR-24: Diagnostic Serv Sect ID (ID)</li>
///<li>OBR-25: Result Status + (ID)</li>
///<li>OBR-26: Parent Result + (PRL)</li>
///<li>OBR-27: Quantity/Timing (-)</li>
///<li>OBR-28: Result Copies To (XCN)</li>
///<li>OBR-29: Parent (EIP)</li>
///<li>OBR-30: Transportation Mode (ID)</li>
///<li>OBR-31: Reason for Study (CWE)</li>
///<li>OBR-32: Principal Result Interpreter + (NDL)</li>
///<li>OBR-33: Assistant Result Interpreter + (NDL)</li>
///<li>OBR-34: Technician + (NDL)</li>
///<li>OBR-35: Transcriptionist + (NDL)</li>
///<li>OBR-36: Scheduled Date/Time + (DTM)</li>
///<li>OBR-37: Number of Sample Containers * (NM)</li>
///<li>OBR-38: Transport Logistics of Collected Sample * (CWE)</li>
///<li>OBR-39: Collector's Comment * (CWE)</li>
///<li>OBR-40: Transport Arrangement Responsibility (CWE)</li>
///<li>OBR-41: Transport Arranged (ID)</li>
///<li>OBR-42: Escort Required (ID)</li>
///<li>OBR-43: Planned Patient Transport Comment (CWE)</li>
///<li>OBR-44: Procedure Code (CNE)</li>
///<li>OBR-45: Procedure Code Modifier (CNE)</li>
///<li>OBR-46: Placer Supplemental Service Information (CWE)</li>
///<li>OBR-47: Filler Supplemental Service Information (CWE)</li>
///<li>OBR-48: Medically Necessary Duplicate Procedure Reason (CWE)</li>
///<li>OBR-49: Result Handling (CWE)</li>
///<li>OBR-50: Parent Universal Service Identifier (CWE)</li>
///<li>OBR-51: Observation Group ID (EI)</li>
///<li>OBR-52: Parent Observation Group ID (EI)</li>
///<li>OBR-53: Alternate Placer Order Number (CX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OBR : AbstractSegment  {

  /**
   * Creates a OBR (Observation Request) segment object that belongs to the given 
   * message.  
   */
	public OBR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - OBR");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Placer Order Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Filler Order Number");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Universal Service Identifier");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Priority");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Requested Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Observation Date/Time #");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Observation End Date/Time #");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Collection Volume *");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Collector Identifier *");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 65}, "Specimen Action Code *");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Danger Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Relevant Clinical Information");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Specimen Received Date/Time");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Specimen Source");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Ordering Provider");
       this.add(typeof(XTN), false, 2, 0, new System.Object[]{message}, "Order Callback Phone Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Placer Field 1");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Placer Field 2");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Filler Field 1 +");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Filler Field 2 +");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Results Rpt/Status Chng - Date/Time +");
       this.add(typeof(MOC), false, 1, 0, new System.Object[]{message}, "Charge to Practice +");
       this.add(typeof(ID), false, 1, 3, new System.Object[]{message, 74}, "Diagnostic Serv Sect ID");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 123}, "Result Status +");
       this.add(typeof(PRL), false, 1, 0, new System.Object[]{message}, "Parent Result +");
       this.add(typeof(-), false, 0, 0, new System.Object[]{message}, "Quantity/Timing");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Result Copies To");
       this.add(typeof(EIP), false, 1, 0, new System.Object[]{message}, "Parent");
       this.add(typeof(ID), false, 1, 4, new System.Object[]{message, 124}, "Transportation Mode");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Reason for Study");
       this.add(typeof(NDL), false, 1, 0, new System.Object[]{message}, "Principal Result Interpreter +");
       this.add(typeof(NDL), false, 0, 0, new System.Object[]{message}, "Assistant Result Interpreter +");
       this.add(typeof(NDL), false, 0, 0, new System.Object[]{message}, "Technician +");
       this.add(typeof(NDL), false, 0, 0, new System.Object[]{message}, "Transcriptionist +");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Scheduled Date/Time +");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Sample Containers *");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Transport Logistics of Collected Sample *");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Collector's Comment *");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transport Arrangement Responsibility");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 224}, "Transport Arranged");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 225}, "Escort Required");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Planned Patient Transport Comment");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "Procedure Code Modifier");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Placer Supplemental Service Information");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Filler Supplemental Service Information");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Medically Necessary Duplicate Procedure Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Result Handling");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Parent Universal Service Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Observation Group ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Observation Group ID");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Alternate Placer Order Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - OBR(OBR-1).
	///</summary>
	public SI SetIDOBR
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Placer Order Number(OBR-2).
	///</summary>
	public EI PlacerOrderNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Order Number(OBR-3).
	///</summary>
	public EI FillerOrderNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Universal Service Identifier(OBR-4).
	///</summary>
	public CWE UniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Priority(OBR-5).
	///</summary>
	public - Priority
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Date/Time(OBR-6).
	///</summary>
	public - RequestedDateTime
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observation Date/Time #(OBR-7).
	///</summary>
	public DTM ObservationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observation End Date/Time #(OBR-8).
	///</summary>
	public DTM ObservationEndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Collection Volume *(OBR-9).
	///</summary>
	public CQ CollectionVolume
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Collector Identifier *(OBR-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetCollectorIdentifier(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Collector Identifier * (OBR-10).
   ///</summary>
  public XCN[] GetCollectorIdentifier() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Collector Identifier * (OBR-10).
   ///</summary>
  public int CollectorIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Action Code *(OBR-11).
	///</summary>
	public ID SpecimenActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Danger Code(OBR-12).
	///</summary>
	public CWE DangerCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relevant Clinical Information(OBR-13).
	///</summary>
	public ST RelevantClinicalInformation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Received Date/Time(OBR-14).
	///</summary>
	public DTM SpecimenReceivedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Source(OBR-15).
	///</summary>
	public - SpecimenSource
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ordering Provider(OBR-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOrderingProvider(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Provider (OBR-16).
   ///</summary>
  public XCN[] GetOrderingProvider() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Provider (OBR-16).
   ///</summary>
  public int OrderingProviderRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Order Callback Phone Number(OBR-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetOrderCallbackPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Order Callback Phone Number (OBR-17).
   ///</summary>
  public XTN[] GetOrderCallbackPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Order Callback Phone Number (OBR-17).
   ///</summary>
  public int OrderCallbackPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Placer Field 1(OBR-18).
	///</summary>
	public ST PlacerField1
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Placer Field 2(OBR-19).
	///</summary>
	public ST PlacerField2
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Field 1 +(OBR-20).
	///</summary>
	public ST FillerField1
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Field 2 +(OBR-21).
	///</summary>
	public ST FillerField2
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Results Rpt/Status Chng - Date/Time +(OBR-22).
	///</summary>
	public DTM ResultsRptStatusChngDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Charge to Practice +(OBR-23).
	///</summary>
	public MOC ChargeToPractice
	{
		get{
			MOC ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (MOC)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diagnostic Serv Sect ID(OBR-24).
	///</summary>
	public ID DiagnosticServSectID
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Result Status +(OBR-25).
	///</summary>
	public ID ResultStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Result +(OBR-26).
	///</summary>
	public PRL ParentResult
	{
		get{
			PRL ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (PRL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Quantity/Timing(OBR-27).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public - GetQuantityTiming(int rep)
	{
			- ret = null;
			try
			{
			IType t = this.GetField(27, rep);
				ret = (-)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Quantity/Timing (OBR-27).
   ///</summary>
  public -[] GetQuantityTiming() {
     -[] ret = null;
    try {
        IType[] t = this.GetField(27);  
        ret = new -[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (-)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Quantity/Timing (OBR-27).
   ///</summary>
  public int QuantityTimingRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(27);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Result Copies To(OBR-28).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetResultCopiesTo(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(28, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Result Copies To (OBR-28).
   ///</summary>
  public XCN[] GetResultCopiesTo() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(28);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Result Copies To (OBR-28).
   ///</summary>
  public int ResultCopiesToRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(28);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Parent(OBR-29).
	///</summary>
	public EIP Parent
	{
		get{
			EIP ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (EIP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transportation Mode(OBR-30).
	///</summary>
	public ID TransportationMode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Reason for Study(OBR-31).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetReasonForStudy(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Reason for Study (OBR-31).
   ///</summary>
  public CWE[] GetReasonForStudy() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(31);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Reason for Study (OBR-31).
   ///</summary>
  public int ReasonForStudyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(31);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Principal Result Interpreter +(OBR-32).
	///</summary>
	public NDL PrincipalResultInterpreter
	{
		get{
			NDL ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (NDL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Assistant Result Interpreter +(OBR-33).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NDL GetAssistantResultInterpreter(int rep)
	{
			NDL ret = null;
			try
			{
			IType t = this.GetField(33, rep);
				ret = (NDL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Assistant Result Interpreter + (OBR-33).
   ///</summary>
  public NDL[] GetAssistantResultInterpreter() {
     NDL[] ret = null;
    try {
        IType[] t = this.GetField(33);  
        ret = new NDL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NDL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Assistant Result Interpreter + (OBR-33).
   ///</summary>
  public int AssistantResultInterpreterRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(33);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Technician +(OBR-34).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NDL GetTechnician(int rep)
	{
			NDL ret = null;
			try
			{
			IType t = this.GetField(34, rep);
				ret = (NDL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Technician + (OBR-34).
   ///</summary>
  public NDL[] GetTechnician() {
     NDL[] ret = null;
    try {
        IType[] t = this.GetField(34);  
        ret = new NDL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NDL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Technician + (OBR-34).
   ///</summary>
  public int TechnicianRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(34);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Transcriptionist +(OBR-35).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NDL GetTranscriptionist(int rep)
	{
			NDL ret = null;
			try
			{
			IType t = this.GetField(35, rep);
				ret = (NDL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Transcriptionist + (OBR-35).
   ///</summary>
  public NDL[] GetTranscriptionist() {
     NDL[] ret = null;
    try {
        IType[] t = this.GetField(35);  
        ret = new NDL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NDL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Transcriptionist + (OBR-35).
   ///</summary>
  public int TranscriptionistRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(35);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Scheduled Date/Time +(OBR-36).
	///</summary>
	public DTM ScheduledDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Sample Containers *(OBR-37).
	///</summary>
	public NM NumberOfSampleContainers
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Transport Logistics of Collected Sample *(OBR-38).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetTransportLogisticsOfCollectedSample(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Transport Logistics of Collected Sample * (OBR-38).
   ///</summary>
  public CWE[] GetTransportLogisticsOfCollectedSample() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(38);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Transport Logistics of Collected Sample * (OBR-38).
   ///</summary>
  public int TransportLogisticsOfCollectedSampleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(38);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Collector's Comment *(OBR-39).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCollectorSComment(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Collector's Comment * (OBR-39).
   ///</summary>
  public CWE[] GetCollectorSComment() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(39);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Collector's Comment * (OBR-39).
   ///</summary>
  public int CollectorSCommentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(39);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Transport Arrangement Responsibility(OBR-40).
	///</summary>
	public CWE TransportArrangementResponsibility
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transport Arranged(OBR-41).
	///</summary>
	public ID TransportArranged
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Escort Required(OBR-42).
	///</summary>
	public ID EscortRequired
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Planned Patient Transport Comment(OBR-43).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPlannedPatientTransportComment(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Planned Patient Transport Comment (OBR-43).
   ///</summary>
  public CWE[] GetPlannedPatientTransportComment() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(43);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Planned Patient Transport Comment (OBR-43).
   ///</summary>
  public int PlannedPatientTransportCommentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(43);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Procedure Code(OBR-44).
	///</summary>
	public CNE ProcedureCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Procedure Code Modifier(OBR-45).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetProcedureCodeModifier(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(45, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Procedure Code Modifier (OBR-45).
   ///</summary>
  public CNE[] GetProcedureCodeModifier() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(45);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Procedure Code Modifier (OBR-45).
   ///</summary>
  public int ProcedureCodeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(45);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Placer Supplemental Service Information(OBR-46).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPlacerSupplementalServiceInformation(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(46, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Supplemental Service Information (OBR-46).
   ///</summary>
  public CWE[] GetPlacerSupplementalServiceInformation() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(46);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Supplemental Service Information (OBR-46).
   ///</summary>
  public int PlacerSupplementalServiceInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(46);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Filler Supplemental Service Information(OBR-47).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetFillerSupplementalServiceInformation(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(47, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Supplemental Service Information (OBR-47).
   ///</summary>
  public CWE[] GetFillerSupplementalServiceInformation() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(47);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Supplemental Service Information (OBR-47).
   ///</summary>
  public int FillerSupplementalServiceInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(47);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Medically Necessary Duplicate Procedure Reason(OBR-48).
	///</summary>
	public CWE MedicallyNecessaryDuplicateProcedureReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Result Handling(OBR-49).
	///</summary>
	public CWE ResultHandling
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(49, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Universal Service Identifier(OBR-50).
	///</summary>
	public CWE ParentUniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(50, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observation Group ID(OBR-51).
	///</summary>
	public EI ObservationGroupID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(51, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Observation Group ID(OBR-52).
	///</summary>
	public EI ParentObservationGroupID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(52, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Alternate Placer Order Number(OBR-53).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetAlternatePlacerOrderNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(53, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Alternate Placer Order Number (OBR-53).
   ///</summary>
  public CX[] GetAlternatePlacerOrderNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(53);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Alternate Placer Order Number (OBR-53).
   ///</summary>
  public int AlternatePlacerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(53);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\OBX.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OBX message segment. 
/// This segment has the following fields:<ol>
///<li>OBX-1: Set ID - OBX (SI)</li>
///<li>OBX-2: Value Type (ID)</li>
///<li>OBX-3: Observation Identifier (CWE)</li>
///<li>OBX-4: Observation Sub-ID (ST)</li>
///<li>OBX-5: Observation Value (varies)</li>
///<li>OBX-6: Units (CWE)</li>
///<li>OBX-7: References Range (ST)</li>
///<li>OBX-8: Interpretation Codes (CWE)</li>
///<li>OBX-9: Probability (NM)</li>
///<li>OBX-10: Nature of Abnormal Test (ID)</li>
///<li>OBX-11: Observation Result Status (ID)</li>
///<li>OBX-12: Effective Date of Reference Range (DTM)</li>
///<li>OBX-13: User Defined Access Checks (ST)</li>
///<li>OBX-14: Date/Time of the Observation (DTM)</li>
///<li>OBX-15: Producer's ID (CWE)</li>
///<li>OBX-16: Responsible Observer (XCN)</li>
///<li>OBX-17: Observation Method (CWE)</li>
///<li>OBX-18: Equipment Instance Identifier (EI)</li>
///<li>OBX-19: Date/Time of the Analysis (DTM)</li>
///<li>OBX-20: Observation Site (CWE)</li>
///<li>OBX-21: Observation Instance Identifier (EI)</li>
///<li>OBX-22: Mood Code (CNE)</li>
///<li>OBX-23: Performing Organization Name (XON)</li>
///<li>OBX-24: Performing Organization Address (XAD)</li>
///<li>OBX-25: Performing Organization Medical Director (XCN)</li>
///<li>OBX-26: Patient Results Release Category (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OBX : AbstractSegment  {

  /**
   * Creates a OBX (Observation/Result) segment object that belongs to the given 
   * message.  
   */
	public OBX(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - OBX");
       this.add(typeof(ID), false, 1, 3, new System.Object[]{message, 125}, "Value Type");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Observation Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Observation Sub-ID");
       this.add(typeof(Varies), false, 0, 0, new System.Object[]{message}, "Observation Value");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Units");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "References Range");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Interpretation Codes");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Probability");
       this.add(typeof(ID), false, 0, 2, new System.Object[]{message, 80}, "Nature of Abnormal Test");
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 85}, "Observation Result Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Date of Reference Range");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "User Defined Access Checks");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of the Observation");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Producer's ID");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Responsible Observer");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Observation Method");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Equipment Instance Identifier");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of the Analysis");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Observation Site");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Observation Instance Identifier");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Mood Code");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Performing Organization Name");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Performing Organization Address");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Performing Organization Medical Director");
       this.add(typeof(ID), false, 1, 10, new System.Object[]{message, 909}, "Patient Results Release Category");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - OBX(OBX-1).
	///</summary>
	public SI SetIDOBX
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Value Type(OBX-2).
	///</summary>
	public ID ValueType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observation Identifier(OBX-3).
	///</summary>
	public CWE ObservationIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observation Sub-ID(OBX-4).
	///</summary>
	public ST ObservationSubID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Observation Value(OBX-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public Varies GetObservationValue(int rep)
	{
			Varies ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (Varies)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Observation Value (OBX-5).
   ///</summary>
  public Varies[] GetObservationValue() {
     Varies[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new Varies[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (Varies)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Observation Value (OBX-5).
   ///</summary>
  public int ObservationValueRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Units(OBX-6).
	///</summary>
	public CWE Units
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns References Range(OBX-7).
	///</summary>
	public ST ReferencesRange
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Interpretation Codes(OBX-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetInterpretationCodes(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Interpretation Codes (OBX-8).
   ///</summary>
  public CWE[] GetInterpretationCodes() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Interpretation Codes (OBX-8).
   ///</summary>
  public int InterpretationCodesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Probability(OBX-9).
	///</summary>
	public NM Probability
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Nature of Abnormal Test(OBX-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetNatureOfAbnormalTest(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Nature of Abnormal Test (OBX-10).
   ///</summary>
  public ID[] GetNatureOfAbnormalTest() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Nature of Abnormal Test (OBX-10).
   ///</summary>
  public int NatureOfAbnormalTestRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Observation Result Status(OBX-11).
	///</summary>
	public ID ObservationResultStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date of Reference Range(OBX-12).
	///</summary>
	public DTM EffectiveDateOfReferenceRange
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns User Defined Access Checks(OBX-13).
	///</summary>
	public ST UserDefinedAccessChecks
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of the Observation(OBX-14).
	///</summary>
	public DTM DateTimeOfTheObservation
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Producer's ID(OBX-15).
	///</summary>
	public CWE ProducerSID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Responsible Observer(OBX-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetResponsibleObserver(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Responsible Observer (OBX-16).
   ///</summary>
  public XCN[] GetResponsibleObserver() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Responsible Observer (OBX-16).
   ///</summary>
  public int ResponsibleObserverRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Observation Method(OBX-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetObservationMethod(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Observation Method (OBX-17).
   ///</summary>
  public CWE[] GetObservationMethod() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Observation Method (OBX-17).
   ///</summary>
  public int ObservationMethodRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Equipment Instance Identifier(OBX-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetEquipmentInstanceIdentifier(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Equipment Instance Identifier (OBX-18).
   ///</summary>
  public EI[] GetEquipmentInstanceIdentifier() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Equipment Instance Identifier (OBX-18).
   ///</summary>
  public int EquipmentInstanceIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Date/Time of the Analysis(OBX-19).
	///</summary>
	public DTM DateTimeOfTheAnalysis
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Observation Site(OBX-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetObservationSite(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Observation Site (OBX-20).
   ///</summary>
  public CWE[] GetObservationSite() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Observation Site (OBX-20).
   ///</summary>
  public int ObservationSiteRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Observation Instance Identifier(OBX-21).
	///</summary>
	public EI ObservationInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Mood Code(OBX-22).
	///</summary>
	public CNE MoodCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Performing Organization Name(OBX-23).
	///</summary>
	public XON PerformingOrganizationName
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Performing Organization Address(OBX-24).
	///</summary>
	public XAD PerformingOrganizationAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Performing Organization Medical Director(OBX-25).
	///</summary>
	public XCN PerformingOrganizationMedicalDirector
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Results Release Category(OBX-26).
	///</summary>
	public ID PatientResultsReleaseCategory
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ODS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ODS message segment. 
/// This segment has the following fields:<ol>
///<li>ODS-1: Type (ID)</li>
///<li>ODS-2: Service Period (CWE)</li>
///<li>ODS-3: Diet, Supplement, or Preference Code (CWE)</li>
///<li>ODS-4: Text Instruction (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ODS : AbstractSegment  {

  /**
   * Creates a ODS (Dietary Orders, Supplements, and Preferences) segment object that belongs to the given 
   * message.  
   */
	public ODS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 159}, "Type");
       this.add(typeof(CWE), false, 10, 0, new System.Object[]{message}, "Service Period");
       this.add(typeof(CWE), true, 20, 0, new System.Object[]{message}, "Diet, Supplement, or Preference Code");
       this.add(typeof(ST), false, 2, 0, new System.Object[]{message}, "Text Instruction");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Type(ODS-1).
	///</summary>
	public ID Type
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Service Period(ODS-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetServicePeriod(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Service Period (ODS-2).
   ///</summary>
  public CWE[] GetServicePeriod() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Service Period (ODS-2).
   ///</summary>
  public int ServicePeriodRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Diet, Supplement, or Preference Code(ODS-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetDietSupplementOrPreferenceCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Diet, Supplement, or Preference Code (ODS-3).
   ///</summary>
  public CWE[] GetDietSupplementOrPreferenceCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Diet, Supplement, or Preference Code (ODS-3).
   ///</summary>
  public int DietSupplementOrPreferenceCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Text Instruction(ODS-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetTextInstruction(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Text Instruction (ODS-4).
   ///</summary>
  public ST[] GetTextInstruction() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Text Instruction (ODS-4).
   ///</summary>
  public int TextInstructionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ODT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ODT message segment. 
/// This segment has the following fields:<ol>
///<li>ODT-1: Tray Type (CWE)</li>
///<li>ODT-2: Service Period (CWE)</li>
///<li>ODT-3: Text Instruction (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ODT : AbstractSegment  {

  /**
   * Creates a ODT (Diet Tray Instructions) segment object that belongs to the given 
   * message.  
   */
	public ODT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Tray Type");
       this.add(typeof(CWE), false, 10, 0, new System.Object[]{message}, "Service Period");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Text Instruction");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Tray Type(ODT-1).
	///</summary>
	public CWE TrayType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Service Period(ODT-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetServicePeriod(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Service Period (ODT-2).
   ///</summary>
  public CWE[] GetServicePeriod() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Service Period (ODT-2).
   ///</summary>
  public int ServicePeriodRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Text Instruction(ODT-3).
	///</summary>
	public ST TextInstruction
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM1 message segment. 
/// This segment has the following fields:<ol>
///<li>OM1-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM1-2: Producer's Service/Test/Observation ID (CWE)</li>
///<li>OM1-3: Permitted Data Types (ID)</li>
///<li>OM1-4: Specimen Required (ID)</li>
///<li>OM1-5: Producer ID (CWE)</li>
///<li>OM1-6: Observation Description (TX)</li>
///<li>OM1-7: Other Service/Test/Observation IDs for the Observation (CWE)</li>
///<li>OM1-8: Other Names (ST)</li>
///<li>OM1-9: Preferred Report Name for the Observation (ST)</li>
///<li>OM1-10: Preferred Short Name or Mnemonic for the Observation (ST)</li>
///<li>OM1-11: Preferred Long Name for the Observation (ST)</li>
///<li>OM1-12: Orderability (ID)</li>
///<li>OM1-13: Identity of Instrument Used to Perform this Study (CWE)</li>
///<li>OM1-14: Coded Representation of Method (CWE)</li>
///<li>OM1-15: Portable Device Indicator (ID)</li>
///<li>OM1-16: Observation Producing Department/Section (CWE)</li>
///<li>OM1-17: Telephone Number of Section (XTN)</li>
///<li>OM1-18: Nature of Service/Test/Observation (CWE)</li>
///<li>OM1-19: Report Subheader (CWE)</li>
///<li>OM1-20: Report Display Order (ST)</li>
///<li>OM1-21: Date/Time Stamp for Any Change in Definition for the Observation (DTM)</li>
///<li>OM1-22: Effective Date/Time of Change (DTM)</li>
///<li>OM1-23: Typical Turn-Around Time (NM)</li>
///<li>OM1-24: Processing Time (NM)</li>
///<li>OM1-25: Processing Priority (ID)</li>
///<li>OM1-26: Reporting Priority (ID)</li>
///<li>OM1-27: Outside Site(s) Where Observation May Be Performed (CWE)</li>
///<li>OM1-28: Address of Outside Site(s) (XAD)</li>
///<li>OM1-29: Phone Number of Outside Site (XTN)</li>
///<li>OM1-30: Confidentiality Code (CWE)</li>
///<li>OM1-31: Observations Required to Interpret this Observation (CWE)</li>
///<li>OM1-32: Interpretation of Observations (TX)</li>
///<li>OM1-33: Contraindications to Observations (CWE)</li>
///<li>OM1-34: Reflex Tests/Observations (CWE)</li>
///<li>OM1-35: Rules that Trigger Reflex Testing (TX)</li>
///<li>OM1-36: Fixed Canned Message (CWE)</li>
///<li>OM1-37: Patient Preparation (TX)</li>
///<li>OM1-38: Procedure Medication (CWE)</li>
///<li>OM1-39: Factors that may Affect the Observation (TX)</li>
///<li>OM1-40: Service/Test/Observation Performance Schedule (ST)</li>
///<li>OM1-41: Description of Test Methods (TX)</li>
///<li>OM1-42: Kind of Quantity Observed (CWE)</li>
///<li>OM1-43: Point Versus Interval (CWE)</li>
///<li>OM1-44: Challenge Information (TX)</li>
///<li>OM1-45: Relationship Modifier (CWE)</li>
///<li>OM1-46: Target Anatomic Site Of Test (CWE)</li>
///<li>OM1-47: Modality of Imaging Measurement (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM1 : AbstractSegment  {

  /**
   * Creates a OM1 (General Segment) segment object that belongs to the given 
   * message.  
   */
	public OM1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Producer's Service/Test/Observation ID");
       this.add(typeof(ID), false, 0, 3, new System.Object[]{message, 125}, "Permitted Data Types");
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 136}, "Specimen Required");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Producer ID");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Observation Description");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Other Service/Test/Observation IDs for the Observation");
       this.add(typeof(ST), true, 0, 0, new System.Object[]{message}, "Other Names");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Preferred Report Name for the Observation");
       this.add(typeof(ST), false, 1, 8, new System.Object[]{message}, "Preferred Short Name or Mnemonic for the Observation");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Preferred Long Name for the Observation");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Orderability");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Identity of Instrument Used to Perform this Study");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Coded Representation of Method");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Portable Device Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Observation Producing Department/Section");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Telephone Number of Section");
       this.add(typeof(CWE), true, 1, 1, new System.Object[]{message}, "Nature of Service/Test/Observation");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Report Subheader");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Report Display Order");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time Stamp for Any Change in Definition for the Observation");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Date/Time of Change");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Typical Turn-Around Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Processing Time");
       this.add(typeof(ID), false, 0, 1, new System.Object[]{message, 168}, "Processing Priority");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 169}, "Reporting Priority");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Outside Site(s) Where Observation May Be Performed");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Address of Outside Site(s)");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Phone Number of Outside Site");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Confidentiality Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Observations Required to Interpret this Observation");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Interpretation of Observations");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Contraindications to Observations");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Reflex Tests/Observations");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Rules that Trigger Reflex Testing");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Fixed Canned Message");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Patient Preparation");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Procedure Medication");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Factors that may Affect the Observation");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Service/Test/Observation Performance Schedule");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Description of Test Methods");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Kind of Quantity Observed");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Point Versus Interval");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Challenge Information");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Relationship Modifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Target Anatomic Site Of Test");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Modality of Imaging Measurement");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM1-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Producer's Service/Test/Observation ID(OM1-2).
	///</summary>
	public CWE ProducerSServiceTestObservationID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Permitted Data Types(OM1-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetPermittedDataTypes(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Permitted Data Types (OM1-3).
   ///</summary>
  public ID[] GetPermittedDataTypes() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Permitted Data Types (OM1-3).
   ///</summary>
  public int PermittedDataTypesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Required(OM1-4).
	///</summary>
	public ID SpecimenRequired
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Producer ID(OM1-5).
	///</summary>
	public CWE ProducerID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observation Description(OM1-6).
	///</summary>
	public TX ObservationDescription
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Other Service/Test/Observation IDs for the Observation(OM1-7).
	///</summary>
	public CWE OtherServiceTestObservationIDsForTheObservation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Other Names(OM1-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetOtherNames(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Other Names (OM1-8).
   ///</summary>
  public ST[] GetOtherNames() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Other Names (OM1-8).
   ///</summary>
  public int OtherNamesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Preferred Report Name for the Observation(OM1-9).
	///</summary>
	public ST PreferredReportNameForTheObservation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Preferred Short Name or Mnemonic for the Observation(OM1-10).
	///</summary>
	public ST PreferredShortNameOrMnemonicForTheObservation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Preferred Long Name for the Observation(OM1-11).
	///</summary>
	public ST PreferredLongNameForTheObservation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Orderability(OM1-12).
	///</summary>
	public ID Orderability
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Identity of Instrument Used to Perform this Study(OM1-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetIdentityOfInstrumentUsedToPerformThisStudy(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Identity of Instrument Used to Perform this Study (OM1-13).
   ///</summary>
  public CWE[] GetIdentityOfInstrumentUsedToPerformThisStudy() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Identity of Instrument Used to Perform this Study (OM1-13).
   ///</summary>
  public int IdentityOfInstrumentUsedToPerformThisStudyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Coded Representation of Method(OM1-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCodedRepresentationOfMethod(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Coded Representation of Method (OM1-14).
   ///</summary>
  public CWE[] GetCodedRepresentationOfMethod() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Coded Representation of Method (OM1-14).
   ///</summary>
  public int CodedRepresentationOfMethodRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Portable Device Indicator(OM1-15).
	///</summary>
	public ID PortableDeviceIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Observation Producing Department/Section(OM1-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetObservationProducingDepartmentSection(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Observation Producing Department/Section (OM1-16).
   ///</summary>
  public CWE[] GetObservationProducingDepartmentSection() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Observation Producing Department/Section (OM1-16).
   ///</summary>
  public int ObservationProducingDepartmentSectionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Telephone Number of Section(OM1-17).
	///</summary>
	public XTN TelephoneNumberOfSection
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Nature of Service/Test/Observation(OM1-18).
	///</summary>
	public CWE NatureOfServiceTestObservation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Subheader(OM1-19).
	///</summary>
	public CWE ReportSubheader
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Display Order(OM1-20).
	///</summary>
	public ST ReportDisplayOrder
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Stamp for Any Change in Definition for the Observation(OM1-21).
	///</summary>
	public DTM DateTimeStampForAnyChangeInDefinitionForTheObservation
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date/Time of Change(OM1-22).
	///</summary>
	public DTM EffectiveDateTimeOfChange
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Typical Turn-Around Time(OM1-23).
	///</summary>
	public NM TypicalTurnAroundTime
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Processing Time(OM1-24).
	///</summary>
	public NM ProcessingTime
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Processing Priority(OM1-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetProcessingPriority(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Processing Priority (OM1-25).
   ///</summary>
  public ID[] GetProcessingPriority() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Processing Priority (OM1-25).
   ///</summary>
  public int ProcessingPriorityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Reporting Priority(OM1-26).
	///</summary>
	public ID ReportingPriority
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Outside Site(s) Where Observation May Be Performed(OM1-27).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetOutsideSiteSWhereObservationMayBePerformed(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Outside Site(s) Where Observation May Be Performed (OM1-27).
   ///</summary>
  public CWE[] GetOutsideSiteSWhereObservationMayBePerformed() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(27);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Outside Site(s) Where Observation May Be Performed (OM1-27).
   ///</summary>
  public int OutsideSiteSWhereObservationMayBePerformedRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(27);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Address of Outside Site(s)(OM1-28).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetAddressOfOutsideSiteS(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(28, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Address of Outside Site(s) (OM1-28).
   ///</summary>
  public XAD[] GetAddressOfOutsideSiteS() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(28);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Address of Outside Site(s) (OM1-28).
   ///</summary>
  public int AddressOfOutsideSiteSRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(28);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Phone Number of Outside Site(OM1-29).
	///</summary>
	public XTN PhoneNumberOfOutsideSite
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Confidentiality Code(OM1-30).
	///</summary>
	public CWE ConfidentialityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Observations Required to Interpret this Observation(OM1-31).
	///</summary>
	public CWE ObservationsRequiredToInterpretThisObservation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Interpretation of Observations(OM1-32).
	///</summary>
	public TX InterpretationOfObservations
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Contraindications to Observations(OM1-33).
	///</summary>
	public CWE ContraindicationsToObservations
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Reflex Tests/Observations(OM1-34).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetReflexTestsObservations(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Reflex Tests/Observations (OM1-34).
   ///</summary>
  public CWE[] GetReflexTestsObservations() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(34);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Reflex Tests/Observations (OM1-34).
   ///</summary>
  public int ReflexTestsObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(34);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Rules that Trigger Reflex Testing(OM1-35).
	///</summary>
	public TX RulesThatTriggerReflexTesting
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Fixed Canned Message(OM1-36).
	///</summary>
	public CWE FixedCannedMessage
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Preparation(OM1-37).
	///</summary>
	public TX PatientPreparation
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Medication(OM1-38).
	///</summary>
	public CWE ProcedureMedication
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Factors that may Affect the Observation(OM1-39).
	///</summary>
	public TX FactorsThatMayAffectTheObservation
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Service/Test/Observation Performance Schedule(OM1-40).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetServiceTestObservationPerformanceSchedule(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(40, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Service/Test/Observation Performance Schedule (OM1-40).
   ///</summary>
  public ST[] GetServiceTestObservationPerformanceSchedule() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(40);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Service/Test/Observation Performance Schedule (OM1-40).
   ///</summary>
  public int ServiceTestObservationPerformanceScheduleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(40);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Description of Test Methods(OM1-41).
	///</summary>
	public TX DescriptionOfTestMethods
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Kind of Quantity Observed(OM1-42).
	///</summary>
	public CWE KindOfQuantityObserved
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Point Versus Interval(OM1-43).
	///</summary>
	public CWE PointVersusInterval
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Challenge Information(OM1-44).
	///</summary>
	public TX ChallengeInformation
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relationship Modifier(OM1-45).
	///</summary>
	public CWE RelationshipModifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(45, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Target Anatomic Site Of Test(OM1-46).
	///</summary>
	public CWE TargetAnatomicSiteOfTest
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(46, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Modality of Imaging Measurement(OM1-47).
	///</summary>
	public CWE ModalityOfImagingMeasurement
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM2 message segment. 
/// This segment has the following fields:<ol>
///<li>OM2-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM2-2: Units of Measure (CWE)</li>
///<li>OM2-3: Range of Decimal Precision (NM)</li>
///<li>OM2-4: Corresponding SI Units of Measure (CWE)</li>
///<li>OM2-5: SI Conversion Factor (TX)</li>
///<li>OM2-6: Reference (Normal) Range for Ordinal and Continuous Observations (RFR)</li>
///<li>OM2-7: Critical Range for Ordinal and Continuous Observations (RFR)</li>
///<li>OM2-8: Absolute Range for Ordinal and Continuous Observations (RFR)</li>
///<li>OM2-9: Delta Check Criteria (DLT)</li>
///<li>OM2-10: Minimum Meaningful Increments (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM2 : AbstractSegment  {

  /**
   * Creates a OM2 (Numeric Observation) segment object that belongs to the given 
   * message.  
   */
	public OM2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Units of Measure");
       this.add(typeof(NM), false, 0, 0, new System.Object[]{message}, "Range of Decimal Precision");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Corresponding SI Units of Measure");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "SI Conversion Factor");
       this.add(typeof(RFR), false, 0, 0, new System.Object[]{message}, "Reference (Normal) Range for Ordinal and Continuous Observations");
       this.add(typeof(RFR), false, 0, 0, new System.Object[]{message}, "Critical Range for Ordinal and Continuous Observations");
       this.add(typeof(RFR), false, 1, 0, new System.Object[]{message}, "Absolute Range for Ordinal and Continuous Observations");
       this.add(typeof(DLT), false, 0, 0, new System.Object[]{message}, "Delta Check Criteria");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Minimum Meaningful Increments");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM2-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Units of Measure(OM2-2).
	///</summary>
	public CWE UnitsOfMeasure
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Range of Decimal Precision(OM2-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetRangeOfDecimalPrecision(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Range of Decimal Precision (OM2-3).
   ///</summary>
  public NM[] GetRangeOfDecimalPrecision() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Range of Decimal Precision (OM2-3).
   ///</summary>
  public int RangeOfDecimalPrecisionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Corresponding SI Units of Measure(OM2-4).
	///</summary>
	public CWE CorrespondingSIUnitsOfMeasure
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns SI Conversion Factor(OM2-5).
	///</summary>
	public TX SIConversionFactor
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Reference (Normal) Range for Ordinal and Continuous Observations(OM2-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public RFR GetReferenceNormalRangeForOrdinalAndContinuousObservations(int rep)
	{
			RFR ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (RFR)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Reference (Normal) Range for Ordinal and Continuous Observations (OM2-6).
   ///</summary>
  public RFR[] GetReferenceNormalRangeForOrdinalAndContinuousObservations() {
     RFR[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new RFR[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (RFR)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Reference (Normal) Range for Ordinal and Continuous Observations (OM2-6).
   ///</summary>
  public int ReferenceNormalRangeForOrdinalAndContinuousObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Critical Range for Ordinal and Continuous Observations(OM2-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public RFR GetCriticalRangeForOrdinalAndContinuousObservations(int rep)
	{
			RFR ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (RFR)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Critical Range for Ordinal and Continuous Observations (OM2-7).
   ///</summary>
  public RFR[] GetCriticalRangeForOrdinalAndContinuousObservations() {
     RFR[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new RFR[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (RFR)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Critical Range for Ordinal and Continuous Observations (OM2-7).
   ///</summary>
  public int CriticalRangeForOrdinalAndContinuousObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Absolute Range for Ordinal and Continuous Observations(OM2-8).
	///</summary>
	public RFR AbsoluteRangeForOrdinalAndContinuousObservations
	{
		get{
			RFR ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (RFR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Delta Check Criteria(OM2-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DLT GetDeltaCheckCriteria(int rep)
	{
			DLT ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (DLT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Delta Check Criteria (OM2-9).
   ///</summary>
  public DLT[] GetDeltaCheckCriteria() {
     DLT[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new DLT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DLT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Delta Check Criteria (OM2-9).
   ///</summary>
  public int DeltaCheckCriteriaRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Minimum Meaningful Increments(OM2-10).
	///</summary>
	public NM MinimumMeaningfulIncrements
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM3.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM3 message segment. 
/// This segment has the following fields:<ol>
///<li>OM3-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM3-2: Preferred Coding System (CWE)</li>
///<li>OM3-3: Valid Coded 'Answers' (CWE)</li>
///<li>OM3-4: Normal Text/Codes for Categorical Observations (CWE)</li>
///<li>OM3-5: Abnormal Text/Codes for Categorical Observations (CWE)</li>
///<li>OM3-6: Critical Text/Codes for Categorical Observations (CWE)</li>
///<li>OM3-7: Value Type (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM3 : AbstractSegment  {

  /**
   * Creates a OM3 (Categorical Service/Test/Observation) segment object that belongs to the given 
   * message.  
   */
	public OM3(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Preferred Coding System");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Valid Coded 'Answers'");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Normal Text/Codes for Categorical Observations");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Abnormal Text/Codes for Categorical Observations");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Critical Text/Codes for Categorical Observations");
       this.add(typeof(ID), false, 1, 3, new System.Object[]{message, 125}, "Value Type");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM3-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Preferred Coding System(OM3-2).
	///</summary>
	public CWE PreferredCodingSystem
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Valid Coded 'Answers'(OM3-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetValidCodedAnswers(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Valid Coded 'Answers' (OM3-3).
   ///</summary>
  public CWE[] GetValidCodedAnswers() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Valid Coded 'Answers' (OM3-3).
   ///</summary>
  public int ValidCodedAnswersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Normal Text/Codes for Categorical Observations(OM3-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetNormalTextCodesForCategoricalObservations(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Normal Text/Codes for Categorical Observations (OM3-4).
   ///</summary>
  public CWE[] GetNormalTextCodesForCategoricalObservations() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Normal Text/Codes for Categorical Observations (OM3-4).
   ///</summary>
  public int NormalTextCodesForCategoricalObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Abnormal Text/Codes for Categorical Observations(OM3-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAbnormalTextCodesForCategoricalObservations(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Abnormal Text/Codes for Categorical Observations (OM3-5).
   ///</summary>
  public CWE[] GetAbnormalTextCodesForCategoricalObservations() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Abnormal Text/Codes for Categorical Observations (OM3-5).
   ///</summary>
  public int AbnormalTextCodesForCategoricalObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Critical Text/Codes for Categorical Observations(OM3-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCriticalTextCodesForCategoricalObservations(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Critical Text/Codes for Categorical Observations (OM3-6).
   ///</summary>
  public CWE[] GetCriticalTextCodesForCategoricalObservations() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Critical Text/Codes for Categorical Observations (OM3-6).
   ///</summary>
  public int CriticalTextCodesForCategoricalObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Value Type(OM3-7).
	///</summary>
	public ID ValueType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM4.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM4 message segment. 
/// This segment has the following fields:<ol>
///<li>OM4-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM4-2: Derived Specimen (ID)</li>
///<li>OM4-3: Container Description (TX)</li>
///<li>OM4-4: Container Volume (NM)</li>
///<li>OM4-5: Container Units (CWE)</li>
///<li>OM4-6: Specimen (CWE)</li>
///<li>OM4-7: Additive (CWE)</li>
///<li>OM4-8: Preparation (TX)</li>
///<li>OM4-9: Special Handling Requirements (TX)</li>
///<li>OM4-10: Normal Collection Volume (CQ)</li>
///<li>OM4-11: Minimum Collection Volume (CQ)</li>
///<li>OM4-12: Specimen Requirements (TX)</li>
///<li>OM4-13: Specimen Priorities (ID)</li>
///<li>OM4-14: Specimen Retention Time (CQ)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM4 : AbstractSegment  {

  /**
   * Creates a OM4 (Observations that Require Specimens) segment object that belongs to the given 
   * message.  
   */
	public OM4(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 170}, "Derived Specimen");
       this.add(typeof(TX), false, 1, 60, new System.Object[]{message}, "Container Description");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Container Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Container Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Additive");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Preparation");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Special Handling Requirements");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Normal Collection Volume");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Minimum Collection Volume");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Specimen Requirements");
       this.add(typeof(ID), false, 0, 1, new System.Object[]{message, 27}, "Specimen Priorities");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Specimen Retention Time");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM4-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Derived Specimen(OM4-2).
	///</summary>
	public ID DerivedSpecimen
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Description(OM4-3).
	///</summary>
	public TX ContainerDescription
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Volume(OM4-4).
	///</summary>
	public NM ContainerVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Units(OM4-5).
	///</summary>
	public CWE ContainerUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen(OM4-6).
	///</summary>
	public CWE Specimen
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Additive(OM4-7).
	///</summary>
	public CWE Additive
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Preparation(OM4-8).
	///</summary>
	public TX Preparation
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Special Handling Requirements(OM4-9).
	///</summary>
	public TX SpecialHandlingRequirements
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Normal Collection Volume(OM4-10).
	///</summary>
	public CQ NormalCollectionVolume
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Minimum Collection Volume(OM4-11).
	///</summary>
	public CQ MinimumCollectionVolume
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Requirements(OM4-12).
	///</summary>
	public TX SpecimenRequirements
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Priorities(OM4-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetSpecimenPriorities(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Priorities (OM4-13).
   ///</summary>
  public ID[] GetSpecimenPriorities() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Priorities (OM4-13).
   ///</summary>
  public int SpecimenPrioritiesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Retention Time(OM4-14).
	///</summary>
	public CQ SpecimenRetentionTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM5.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM5 message segment. 
/// This segment has the following fields:<ol>
///<li>OM5-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM5-2: Test/Observations Included Within an Ordered Test Battery (CWE)</li>
///<li>OM5-3: Observation ID Suffixes (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM5 : AbstractSegment  {

  /**
   * Creates a OM5 (Observation Batteries (Sets)) segment object that belongs to the given 
   * message.  
   */
	public OM5(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Test/Observations Included Within an Ordered Test Battery");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Observation ID Suffixes");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM5-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Test/Observations Included Within an Ordered Test Battery(OM5-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetTestObservationsIncludedWithinAnOrderedTestBattery(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Test/Observations Included Within an Ordered Test Battery (OM5-2).
   ///</summary>
  public CWE[] GetTestObservationsIncludedWithinAnOrderedTestBattery() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Test/Observations Included Within an Ordered Test Battery (OM5-2).
   ///</summary>
  public int TestObservationsIncludedWithinAnOrderedTestBatteryRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Observation ID Suffixes(OM5-3).
	///</summary>
	public ST ObservationIDSuffixes
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM6.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM6 message segment. 
/// This segment has the following fields:<ol>
///<li>OM6-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM6-2: Derivation Rule (TX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM6 : AbstractSegment  {

  /**
   * Creates a OM6 (Observations that are Calculated from Other Observations) segment object that belongs to the given 
   * message.  
   */
	public OM6(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Derivation Rule");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM6-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Derivation Rule(OM6-2).
	///</summary>
	public TX DerivationRule
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\OM7.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OM7 message segment. 
/// This segment has the following fields:<ol>
///<li>OM7-1: Sequence Number - Test/Observation Master File (NM)</li>
///<li>OM7-2: Universal Service Identifier (CWE)</li>
///<li>OM7-3: Category Identifier (CWE)</li>
///<li>OM7-4: Category Description (TX)</li>
///<li>OM7-5: Category Synonym (ST)</li>
///<li>OM7-6: Effective Test/Service Start Date/Time (DTM)</li>
///<li>OM7-7: Effective Test/Service End Date/Time (DTM)</li>
///<li>OM7-8: Test/Service Default Duration Quantity (NM)</li>
///<li>OM7-9: Test/Service Default Duration Units (CWE)</li>
///<li>OM7-10: Test/Service Default Frequency (CWE)</li>
///<li>OM7-11: Consent Indicator (ID)</li>
///<li>OM7-12: Consent Identifier (CWE)</li>
///<li>OM7-13: Consent Effective Start Date/Time (DTM)</li>
///<li>OM7-14: Consent Effective End Date/Time (DTM)</li>
///<li>OM7-15: Consent Interval Quantity (NM)</li>
///<li>OM7-16: Consent Interval Units (CWE)</li>
///<li>OM7-17: Consent Waiting Period Quantity (NM)</li>
///<li>OM7-18: Consent Waiting Period Units (CWE)</li>
///<li>OM7-19: Effective Date/Time of Change (DTM)</li>
///<li>OM7-20: Entered By (XCN)</li>
///<li>OM7-21: Orderable-at Location (PL)</li>
///<li>OM7-22: Formulary Status (CWE)</li>
///<li>OM7-23: Special Order Indicator (ID)</li>
///<li>OM7-24: Primary Key Value - CDM (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OM7 : AbstractSegment  {

  /**
   * Creates a OM7 (Additional Basic Attributes) segment object that belongs to the given 
   * message.  
   */
	public OM7(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Sequence Number - Test/Observation Master File");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Universal Service Identifier");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Category Identifier");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Category Description");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Category Synonym");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Test/Service Start Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Test/Service End Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Test/Service Default Duration Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Test/Service Default Duration Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Test/Service Default Frequency");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Consent Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Identifier");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Consent Effective Start Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Consent Effective End Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Consent Interval Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Interval Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Consent Waiting Period Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Waiting Period Units");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Date/Time of Change");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Entered By");
       this.add(typeof(PL), false, 0, 0, new System.Object[]{message}, "Orderable-at Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Formulary Status");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Special Order Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Primary Key Value - CDM");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sequence Number - Test/Observation Master File(OM7-1).
	///</summary>
	public NM SequenceNumberTestObservationMasterFile
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Universal Service Identifier(OM7-2).
	///</summary>
	public CWE UniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Category Identifier(OM7-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCategoryIdentifier(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Category Identifier (OM7-3).
   ///</summary>
  public CWE[] GetCategoryIdentifier() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Category Identifier (OM7-3).
   ///</summary>
  public int CategoryIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Category Description(OM7-4).
	///</summary>
	public TX CategoryDescription
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Category Synonym(OM7-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetCategorySynonym(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Category Synonym (OM7-5).
   ///</summary>
  public ST[] GetCategorySynonym() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Category Synonym (OM7-5).
   ///</summary>
  public int CategorySynonymRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Effective Test/Service Start Date/Time(OM7-6).
	///</summary>
	public DTM EffectiveTestServiceStartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Test/Service End Date/Time(OM7-7).
	///</summary>
	public DTM EffectiveTestServiceEndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Test/Service Default Duration Quantity(OM7-8).
	///</summary>
	public NM TestServiceDefaultDurationQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Test/Service Default Duration Units(OM7-9).
	///</summary>
	public CWE TestServiceDefaultDurationUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Test/Service Default Frequency(OM7-10).
	///</summary>
	public CWE TestServiceDefaultFrequency
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Indicator(OM7-11).
	///</summary>
	public ID ConsentIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Identifier(OM7-12).
	///</summary>
	public CWE ConsentIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Effective Start Date/Time(OM7-13).
	///</summary>
	public DTM ConsentEffectiveStartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Effective End Date/Time(OM7-14).
	///</summary>
	public DTM ConsentEffectiveEndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Interval Quantity(OM7-15).
	///</summary>
	public NM ConsentIntervalQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Interval Units(OM7-16).
	///</summary>
	public CWE ConsentIntervalUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Waiting Period Quantity(OM7-17).
	///</summary>
	public NM ConsentWaitingPeriodQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Waiting Period Units(OM7-18).
	///</summary>
	public CWE ConsentWaitingPeriodUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date/Time of Change(OM7-19).
	///</summary>
	public DTM EffectiveDateTimeOfChange
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entered By(OM7-20).
	///</summary>
	public XCN EnteredBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Orderable-at Location(OM7-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PL GetOrderableAtLocation(int rep)
	{
			PL ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (PL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Orderable-at Location (OM7-21).
   ///</summary>
  public PL[] GetOrderableAtLocation() {
     PL[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new PL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Orderable-at Location (OM7-21).
   ///</summary>
  public int OrderableAtLocationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Formulary Status(OM7-22).
	///</summary>
	public CWE FormularyStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Special Order Indicator(OM7-23).
	///</summary>
	public ID SpecialOrderIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Primary Key Value - CDM(OM7-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPrimaryKeyValueCDM(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Key Value - CDM (OM7-24).
   ///</summary>
  public CWE[] GetPrimaryKeyValueCDM() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Key Value - CDM (OM7-24).
   ///</summary>
  public int PrimaryKeyValueCDMRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ORC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ORC message segment. 
/// This segment has the following fields:<ol>
///<li>ORC-1: Order Control (ID)</li>
///<li>ORC-2: Placer Order Number (EI)</li>
///<li>ORC-3: Filler Order Number (EI)</li>
///<li>ORC-4: Placer Group Number (EI)</li>
///<li>ORC-5: Order Status (ID)</li>
///<li>ORC-6: Response Flag (ID)</li>
///<li>ORC-7: Quantity/Timing (-)</li>
///<li>ORC-8: Parent (EIP)</li>
///<li>ORC-9: Date/Time of Transaction (DTM)</li>
///<li>ORC-10: Entered By (XCN)</li>
///<li>ORC-11: Verified By (XCN)</li>
///<li>ORC-12: Ordering Provider (XCN)</li>
///<li>ORC-13: Enterer's Location (PL)</li>
///<li>ORC-14: Call Back Phone Number (XTN)</li>
///<li>ORC-15: Order Effective Date/Time (DTM)</li>
///<li>ORC-16: Order Control Code Reason (CWE)</li>
///<li>ORC-17: Entering Organization (CWE)</li>
///<li>ORC-18: Entering Device (CWE)</li>
///<li>ORC-19: Action By (XCN)</li>
///<li>ORC-20: Advanced Beneficiary Notice Code (CWE)</li>
///<li>ORC-21: Ordering Facility Name (XON)</li>
///<li>ORC-22: Ordering Facility Address (XAD)</li>
///<li>ORC-23: Ordering Facility Phone Number (XTN)</li>
///<li>ORC-24: Ordering Provider Address (XAD)</li>
///<li>ORC-25: Order Status Modifier (CWE)</li>
///<li>ORC-26: Advanced Beneficiary Notice Override Reason (CWE)</li>
///<li>ORC-27: Filler's Expected Availability Date/Time (DTM)</li>
///<li>ORC-28: Confidentiality Code (CWE)</li>
///<li>ORC-29: Order Type (CWE)</li>
///<li>ORC-30: Enterer Authorization Mode (CNE)</li>
///<li>ORC-31: Parent Universal Service Identifier (CWE)</li>
///<li>ORC-32: Advanced Beneficiary Notice Date (DT)</li>
///<li>ORC-33: Alternate Placer Order Number (CX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ORC : AbstractSegment  {

  /**
   * Creates a ORC (Common Order) segment object that belongs to the given 
   * message.  
   */
	public ORC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 119}, "Order Control");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Placer Order Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Filler Order Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Placer Group Number");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 38}, "Order Status");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 121}, "Response Flag");
       this.add(typeof(-), false, 0, 0, new System.Object[]{message}, "Quantity/Timing");
       this.add(typeof(EIP), false, 1, 0, new System.Object[]{message}, "Parent");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of Transaction");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Entered By");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Verified By");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Ordering Provider");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Enterer's Location");
       this.add(typeof(XTN), false, 2, 0, new System.Object[]{message}, "Call Back Phone Number");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Order Effective Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Order Control Code Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Entering Organization");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Entering Device");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Action By");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Advanced Beneficiary Notice Code");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Ordering Facility Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Ordering Facility Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Ordering Facility Phone Number");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Ordering Provider Address");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Order Status Modifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Advanced Beneficiary Notice Override Reason");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Filler's Expected Availability Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Confidentiality Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Order Type");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Enterer Authorization Mode");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Parent Universal Service Identifier");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Advanced Beneficiary Notice Date");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Alternate Placer Order Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Order Control(ORC-1).
	///</summary>
	public ID OrderControl
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Placer Order Number(ORC-2).
	///</summary>
	public EI PlacerOrderNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Order Number(ORC-3).
	///</summary>
	public EI FillerOrderNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Placer Group Number(ORC-4).
	///</summary>
	public EI PlacerGroupNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Order Status(ORC-5).
	///</summary>
	public ID OrderStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Response Flag(ORC-6).
	///</summary>
	public ID ResponseFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Quantity/Timing(ORC-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public - GetQuantityTiming(int rep)
	{
			- ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (-)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Quantity/Timing (ORC-7).
   ///</summary>
  public -[] GetQuantityTiming() {
     -[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new -[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (-)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Quantity/Timing (ORC-7).
   ///</summary>
  public int QuantityTimingRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Parent(ORC-8).
	///</summary>
	public EIP Parent
	{
		get{
			EIP ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (EIP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of Transaction(ORC-9).
	///</summary>
	public DTM DateTimeOfTransaction
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Entered By(ORC-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetEnteredBy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Entered By (ORC-10).
   ///</summary>
  public XCN[] GetEnteredBy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Entered By (ORC-10).
   ///</summary>
  public int EnteredByRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Verified By(ORC-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetVerifiedBy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Verified By (ORC-11).
   ///</summary>
  public XCN[] GetVerifiedBy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Verified By (ORC-11).
   ///</summary>
  public int VerifiedByRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ordering Provider(ORC-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOrderingProvider(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Provider (ORC-12).
   ///</summary>
  public XCN[] GetOrderingProvider() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Provider (ORC-12).
   ///</summary>
  public int OrderingProviderRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Enterer's Location(ORC-13).
	///</summary>
	public PL EntererSLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Call Back Phone Number(ORC-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetCallBackPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Call Back Phone Number (ORC-14).
   ///</summary>
  public XTN[] GetCallBackPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Call Back Phone Number (ORC-14).
   ///</summary>
  public int CallBackPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Order Effective Date/Time(ORC-15).
	///</summary>
	public DTM OrderEffectiveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Order Control Code Reason(ORC-16).
	///</summary>
	public CWE OrderControlCodeReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entering Organization(ORC-17).
	///</summary>
	public CWE EnteringOrganization
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Entering Device(ORC-18).
	///</summary>
	public CWE EnteringDevice
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Action By(ORC-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetActionBy(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Action By (ORC-19).
   ///</summary>
  public XCN[] GetActionBy() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Action By (ORC-19).
   ///</summary>
  public int ActionByRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Advanced Beneficiary Notice Code(ORC-20).
	///</summary>
	public CWE AdvancedBeneficiaryNoticeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ordering Facility Name(ORC-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetOrderingFacilityName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Facility Name (ORC-21).
   ///</summary>
  public XON[] GetOrderingFacilityName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Facility Name (ORC-21).
   ///</summary>
  public int OrderingFacilityNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ordering Facility Address(ORC-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetOrderingFacilityAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Facility Address (ORC-22).
   ///</summary>
  public XAD[] GetOrderingFacilityAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Facility Address (ORC-22).
   ///</summary>
  public int OrderingFacilityAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ordering Facility Phone Number(ORC-23).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetOrderingFacilityPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(23, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Facility Phone Number (ORC-23).
   ///</summary>
  public XTN[] GetOrderingFacilityPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(23);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Facility Phone Number (ORC-23).
   ///</summary>
  public int OrderingFacilityPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(23);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ordering Provider Address(ORC-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetOrderingProviderAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Provider Address (ORC-24).
   ///</summary>
  public XAD[] GetOrderingProviderAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Provider Address (ORC-24).
   ///</summary>
  public int OrderingProviderAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Order Status Modifier(ORC-25).
	///</summary>
	public CWE OrderStatusModifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Advanced Beneficiary Notice Override Reason(ORC-26).
	///</summary>
	public CWE AdvancedBeneficiaryNoticeOverrideReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler's Expected Availability Date/Time(ORC-27).
	///</summary>
	public DTM FillerSExpectedAvailabilityDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Confidentiality Code(ORC-28).
	///</summary>
	public CWE ConfidentialityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Order Type(ORC-29).
	///</summary>
	public CWE OrderType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Enterer Authorization Mode(ORC-30).
	///</summary>
	public CNE EntererAuthorizationMode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Universal Service Identifier(ORC-31).
	///</summary>
	public CWE ParentUniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Advanced Beneficiary Notice Date(ORC-32).
	///</summary>
	public DT AdvancedBeneficiaryNoticeDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Alternate Placer Order Number(ORC-33).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetAlternatePlacerOrderNumber(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(33, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Alternate Placer Order Number (ORC-33).
   ///</summary>
  public CX[] GetAlternatePlacerOrderNumber() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(33);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Alternate Placer Order Number (ORC-33).
   ///</summary>
  public int AlternatePlacerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(33);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\ORG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ORG message segment. 
/// This segment has the following fields:<ol>
///<li>ORG-1: Set ID - ORG (SI)</li>
///<li>ORG-2: Organization Unit Code (CWE)</li>
///<li>ORG-3: Organization Unit Type Code (CWE)</li>
///<li>ORG-4: Primary Org Unit Indicator (ID)</li>
///<li>ORG-5: Practitioner Org Unit Identifier (CX)</li>
///<li>ORG-6: Health Care Provider Type Code (CWE)</li>
///<li>ORG-7: Health Care Provider Classification Code (CWE)</li>
///<li>ORG-8: Health Care Provider Area of Specialization Code (CWE)</li>
///<li>ORG-9: Effective Date Range (DR)</li>
///<li>ORG-10: Employment Status Code (CWE)</li>
///<li>ORG-11: Board Approval Indicator (ID)</li>
///<li>ORG-12: Primary Care Physician Indicator (ID)</li>
///<li>ORG-13: Cost Center Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ORG : AbstractSegment  {

  /**
   * Creates a ORG (Practitioner Organization Unit) segment object that belongs to the given 
   * message.  
   */
	public ORG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - ORG");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Organization Unit Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Organization Unit Type Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Primary Org Unit Indicator");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Practitioner Org Unit Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Health Care Provider Type Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Health Care Provider Classification Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Health Care Provider Area of Specialization Code");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Effective Date Range");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Employment Status Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Board Approval Indicator");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Primary Care Physician Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Cost Center Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - ORG(ORG-1).
	///</summary>
	public SI SetIDORG
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Organization Unit Code(ORG-2).
	///</summary>
	public CWE OrganizationUnitCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Organization Unit Type Code(ORG-3).
	///</summary>
	public CWE OrganizationUnitTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Primary Org Unit Indicator(ORG-4).
	///</summary>
	public ID PrimaryOrgUnitIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Practitioner Org Unit Identifier(ORG-5).
	///</summary>
	public CX PractitionerOrgUnitIdentifier
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Health Care Provider Type Code(ORG-6).
	///</summary>
	public CWE HealthCareProviderTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Health Care Provider Classification Code(ORG-7).
	///</summary>
	public CWE HealthCareProviderClassificationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Health Care Provider Area of Specialization Code(ORG-8).
	///</summary>
	public CWE HealthCareProviderAreaOfSpecializationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date Range(ORG-9).
	///</summary>
	public DR EffectiveDateRange
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Employment Status Code(ORG-10).
	///</summary>
	public CWE EmploymentStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Board Approval Indicator(ORG-11).
	///</summary>
	public ID BoardApprovalIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Primary Care Physician Indicator(ORG-12).
	///</summary>
	public ID PrimaryCarePhysicianIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Cost Center Code(ORG-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCostCenterCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Cost Center Code (ORG-13).
   ///</summary>
  public CWE[] GetCostCenterCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Cost Center Code (ORG-13).
   ///</summary>
  public int CostCenterCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\OVR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 OVR message segment. 
/// This segment has the following fields:<ol>
///<li>OVR-1: Business Rule Override Type (CWE)</li>
///<li>OVR-2: Business Rule Override Code (CWE)</li>
///<li>OVR-3: Override Comments (TX)</li>
///<li>OVR-4: Override Entered By (XCN)</li>
///<li>OVR-5: Override Authorized By (XCN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class OVR : AbstractSegment  {

  /**
   * Creates a OVR (Override Segment) segment object that belongs to the given 
   * message.  
   */
	public OVR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Business Rule Override Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Business Rule Override Code");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Override Comments");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Override Entered By");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Override Authorized By");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Business Rule Override Type(OVR-1).
	///</summary>
	public CWE BusinessRuleOverrideType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Business Rule Override Code(OVR-2).
	///</summary>
	public CWE BusinessRuleOverrideCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Override Comments(OVR-3).
	///</summary>
	public TX OverrideComments
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Override Entered By(OVR-4).
	///</summary>
	public XCN OverrideEnteredBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Override Authorized By(OVR-5).
	///</summary>
	public XCN OverrideAuthorizedBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PAC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PAC message segment. 
/// This segment has the following fields:<ol>
///<li>PAC-1: Set Id - PAC (SI)</li>
///<li>PAC-2: Package ID (EI)</li>
///<li>PAC-3: Parent Package ID (EI)</li>
///<li>PAC-4: Position in Parent Package (NA)</li>
///<li>PAC-5: Package Type (CWE)</li>
///<li>PAC-6: Package Condition (CWE)</li>
///<li>PAC-7: Package Handling Code (CWE)</li>
///<li>PAC-8: Package Risk Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PAC : AbstractSegment  {

  /**
   * Creates a PAC (Shipment Package) segment object that belongs to the given 
   * message.  
   */
	public PAC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set Id - PAC");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Package ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Package ID");
       this.add(typeof(NA), false, 1, 0, new System.Object[]{message}, "Position in Parent Package");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Package Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Package Condition");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Package Handling Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Package Risk Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set Id - PAC(PAC-1).
	///</summary>
	public SI SetIdPAC
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Package ID(PAC-2).
	///</summary>
	public EI PackageID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Package ID(PAC-3).
	///</summary>
	public EI ParentPackageID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Position in Parent Package(PAC-4).
	///</summary>
	public NA PositionInParentPackage
	{
		get{
			NA ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NA)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Package Type(PAC-5).
	///</summary>
	public CWE PackageType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Package Condition(PAC-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPackageCondition(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Package Condition (PAC-6).
   ///</summary>
  public CWE[] GetPackageCondition() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Package Condition (PAC-6).
   ///</summary>
  public int PackageConditionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Package Handling Code(PAC-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPackageHandlingCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Package Handling Code (PAC-7).
   ///</summary>
  public CWE[] GetPackageHandlingCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Package Handling Code (PAC-7).
   ///</summary>
  public int PackageHandlingCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Package Risk Code(PAC-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPackageRiskCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Package Risk Code (PAC-8).
   ///</summary>
  public CWE[] GetPackageRiskCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Package Risk Code (PAC-8).
   ///</summary>
  public int PackageRiskCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\PCE.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PCE message segment. 
/// This segment has the following fields:<ol>
///<li>PCE-1: Set ID - PCE (SI)</li>
///<li>PCE-2: Cost Center Account Number (CX)</li>
///<li>PCE-3: Transaction Code (CWE)</li>
///<li>PCE-4: Transaction amount - unit (CP)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PCE : AbstractSegment  {

  /**
   * Creates a PCE (Patient Charge Cost Center Exceptions) segment object that belongs to the given 
   * message.  
   */
	public PCE(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - PCE");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Cost Center Account Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transaction Code");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Transaction amount - unit");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - PCE(PCE-1).
	///</summary>
	public SI SetIDPCE
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cost Center Account Number(PCE-2).
	///</summary>
	public CX CostCenterAccountNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction Code(PCE-3).
	///</summary>
	public CWE TransactionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transaction amount - unit(PCE-4).
	///</summary>
	public CP TransactionAmountUnit
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PCR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PCR message segment. 
/// This segment has the following fields:<ol>
///<li>PCR-1: Implicated Product (CWE)</li>
///<li>PCR-2: Generic Product (IS)</li>
///<li>PCR-3: Product Class (CWE)</li>
///<li>PCR-4: Total Duration Of Therapy (CQ)</li>
///<li>PCR-5: Product Manufacture Date (DTM)</li>
///<li>PCR-6: Product Expiration Date (DTM)</li>
///<li>PCR-7: Product Implantation Date (DTM)</li>
///<li>PCR-8: Product Explantation Date (DTM)</li>
///<li>PCR-9: Single Use Device (CWE)</li>
///<li>PCR-10: Indication For Product Use (CWE)</li>
///<li>PCR-11: Product Problem (CWE)</li>
///<li>PCR-12: Product Serial/Lot Number (ST)</li>
///<li>PCR-13: Product Available For Inspection (CWE)</li>
///<li>PCR-14: Product Evaluation Performed (CWE)</li>
///<li>PCR-15: Product Evaluation Status (CWE)</li>
///<li>PCR-16: Product Evaluation Results (CWE)</li>
///<li>PCR-17: Evaluated Product Source (ID)</li>
///<li>PCR-18: Date Product Returned To Manufacturer (DTM)</li>
///<li>PCR-19: Device Operator Qualifications (ID)</li>
///<li>PCR-20: Relatedness Assessment (ID)</li>
///<li>PCR-21: Action Taken In Response To The Event (ID)</li>
///<li>PCR-22: Event Causality Observations (ID)</li>
///<li>PCR-23: Indirect Exposure Mechanism (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PCR : AbstractSegment  {

  /**
   * Creates a PCR (Possible Causal Relationship) segment object that belongs to the given 
   * message.  
   */
	public PCR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Implicated Product");
       this.add(typeof(IS), false, 1, 0, new System.Object[]{message, 249}, "Generic Product");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Class");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Total Duration Of Therapy");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Product Manufacture Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Product Expiration Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Product Implantation Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Product Explantation Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Single Use Device");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Indication For Product Use");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Problem");
       this.add(typeof(ST), false, 3, 0, new System.Object[]{message}, "Product Serial/Lot Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Available For Inspection");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Evaluation Performed");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Evaluation Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Evaluation Results");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 248}, "Evaluated Product Source");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date Product Returned To Manufacturer");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 242}, "Device Operator Qualifications");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 250}, "Relatedness Assessment");
       this.add(typeof(ID), false, 6, 2, new System.Object[]{message, 251}, "Action Taken In Response To The Event");
       this.add(typeof(ID), false, 6, 2, new System.Object[]{message, 252}, "Event Causality Observations");
       this.add(typeof(ID), false, 3, 1, new System.Object[]{message, 253}, "Indirect Exposure Mechanism");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Implicated Product(PCR-1).
	///</summary>
	public CWE ImplicatedProduct
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Generic Product(PCR-2).
	///</summary>
	public IS GenericProduct
	{
		get{
			IS ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (IS)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Class(PCR-3).
	///</summary>
	public CWE ProductClass
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Duration Of Therapy(PCR-4).
	///</summary>
	public CQ TotalDurationOfTherapy
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Manufacture Date(PCR-5).
	///</summary>
	public DTM ProductManufactureDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Expiration Date(PCR-6).
	///</summary>
	public DTM ProductExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Implantation Date(PCR-7).
	///</summary>
	public DTM ProductImplantationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Explantation Date(PCR-8).
	///</summary>
	public DTM ProductExplantationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Single Use Device(PCR-9).
	///</summary>
	public CWE SingleUseDevice
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Indication For Product Use(PCR-10).
	///</summary>
	public CWE IndicationForProductUse
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Problem(PCR-11).
	///</summary>
	public CWE ProductProblem
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Product Serial/Lot Number(PCR-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetProductSerialLotNumber(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Product Serial/Lot Number (PCR-12).
   ///</summary>
  public ST[] GetProductSerialLotNumber() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Product Serial/Lot Number (PCR-12).
   ///</summary>
  public int ProductSerialLotNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Product Available For Inspection(PCR-13).
	///</summary>
	public CWE ProductAvailableForInspection
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Evaluation Performed(PCR-14).
	///</summary>
	public CWE ProductEvaluationPerformed
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Evaluation Status(PCR-15).
	///</summary>
	public CWE ProductEvaluationStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product Evaluation Results(PCR-16).
	///</summary>
	public CWE ProductEvaluationResults
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Evaluated Product Source(PCR-17).
	///</summary>
	public ID EvaluatedProductSource
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Product Returned To Manufacturer(PCR-18).
	///</summary>
	public DTM DateProductReturnedToManufacturer
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Operator Qualifications(PCR-19).
	///</summary>
	public ID DeviceOperatorQualifications
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relatedness Assessment(PCR-20).
	///</summary>
	public ID RelatednessAssessment
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Action Taken In Response To The Event(PCR-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetActionTakenInResponseToTheEvent(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Action Taken In Response To The Event (PCR-21).
   ///</summary>
  public ID[] GetActionTakenInResponseToTheEvent() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Action Taken In Response To The Event (PCR-21).
   ///</summary>
  public int ActionTakenInResponseToTheEventRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Causality Observations(PCR-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetEventCausalityObservations(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Causality Observations (PCR-22).
   ///</summary>
  public ID[] GetEventCausalityObservations() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Causality Observations (PCR-22).
   ///</summary>
  public int EventCausalityObservationsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Indirect Exposure Mechanism(PCR-23).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetIndirectExposureMechanism(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(23, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Indirect Exposure Mechanism (PCR-23).
   ///</summary>
  public ID[] GetIndirectExposureMechanism() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(23);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Indirect Exposure Mechanism (PCR-23).
   ///</summary>
  public int IndirectExposureMechanismRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(23);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\PD1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PD1 message segment. 
/// This segment has the following fields:<ol>
///<li>PD1-1: Living Dependency (CWE)</li>
///<li>PD1-2: Living Arrangement (CWE)</li>
///<li>PD1-3: Patient Primary Facility (XON)</li>
///<li>PD1-4: Patient Primary Care Provider Name and ID No. (-)</li>
///<li>PD1-5: Student Indicator (CWE)</li>
///<li>PD1-6: Handicap (CWE)</li>
///<li>PD1-7: Living Will Code (CWE)</li>
///<li>PD1-8: Organ Donor Code (CWE)</li>
///<li>PD1-9: Separate Bill (ID)</li>
///<li>PD1-10: Duplicate Patient (CX)</li>
///<li>PD1-11: Publicity Code (CWE)</li>
///<li>PD1-12: Protection Indicator (ID)</li>
///<li>PD1-13: Protection Indicator Effective Date (DT)</li>
///<li>PD1-14: Place of Worship (XON)</li>
///<li>PD1-15: Advance Directive Code (CWE)</li>
///<li>PD1-16: Immunization Registry Status (CWE)</li>
///<li>PD1-17: Immunization Registry Status Effective Date (DT)</li>
///<li>PD1-18: Publicity Code Effective Date (DT)</li>
///<li>PD1-19: Military Branch (CWE)</li>
///<li>PD1-20: Military Rank/Grade (CWE)</li>
///<li>PD1-21: Military Status (CWE)</li>
///<li>PD1-22: Advance Directive Last Verified Date (DT)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PD1 : AbstractSegment  {

  /**
   * Creates a PD1 (Patient Additional Demographic) segment object that belongs to the given 
   * message.  
   */
	public PD1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Living Dependency");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Arrangement");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Patient Primary Facility");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Patient Primary Care Provider Name and ID No.");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Student Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Handicap");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Will Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Organ Donor Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Separate Bill");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Duplicate Patient");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Publicity Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Protection Indicator");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Protection Indicator Effective Date");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Place of Worship");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Advance Directive Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Immunization Registry Status");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Immunization Registry Status Effective Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Publicity Code Effective Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Branch");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Rank/Grade");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Military Status");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Advance Directive Last Verified Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Living Dependency(PD1-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLivingDependency(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Living Dependency (PD1-1).
   ///</summary>
  public CWE[] GetLivingDependency() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Living Dependency (PD1-1).
   ///</summary>
  public int LivingDependencyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Living Arrangement(PD1-2).
	///</summary>
	public CWE LivingArrangement
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Patient Primary Facility(PD1-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetPatientPrimaryFacility(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Primary Facility (PD1-3).
   ///</summary>
  public XON[] GetPatientPrimaryFacility() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Primary Facility (PD1-3).
   ///</summary>
  public int PatientPrimaryFacilityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Primary Care Provider Name and ID No.(PD1-4).
	///</summary>
	public - PatientPrimaryCareProviderNameIDNo
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Student Indicator(PD1-5).
	///</summary>
	public CWE StudentIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Handicap(PD1-6).
	///</summary>
	public CWE Handicap
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Will Code(PD1-7).
	///</summary>
	public CWE LivingWillCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Organ Donor Code(PD1-8).
	///</summary>
	public CWE OrganDonorCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Separate Bill(PD1-9).
	///</summary>
	public ID SeparateBill
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Duplicate Patient(PD1-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetDuplicatePatient(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Duplicate Patient (PD1-10).
   ///</summary>
  public CX[] GetDuplicatePatient() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Duplicate Patient (PD1-10).
   ///</summary>
  public int DuplicatePatientRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Publicity Code(PD1-11).
	///</summary>
	public CWE PublicityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Protection Indicator(PD1-12).
	///</summary>
	public ID ProtectionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Protection Indicator Effective Date(PD1-13).
	///</summary>
	public DT ProtectionIndicatorEffectiveDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Place of Worship(PD1-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetPlaceOfWorship(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Place of Worship (PD1-14).
   ///</summary>
  public XON[] GetPlaceOfWorship() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Place of Worship (PD1-14).
   ///</summary>
  public int PlaceOfWorshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Advance Directive Code(PD1-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAdvanceDirectiveCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Advance Directive Code (PD1-15).
   ///</summary>
  public CWE[] GetAdvanceDirectiveCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Advance Directive Code (PD1-15).
   ///</summary>
  public int AdvanceDirectiveCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Immunization Registry Status(PD1-16).
	///</summary>
	public CWE ImmunizationRegistryStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Immunization Registry Status Effective Date(PD1-17).
	///</summary>
	public DT ImmunizationRegistryStatusEffectiveDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Publicity Code Effective Date(PD1-18).
	///</summary>
	public DT PublicityCodeEffectiveDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Branch(PD1-19).
	///</summary>
	public CWE MilitaryBranch
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Rank/Grade(PD1-20).
	///</summary>
	public CWE MilitaryRankGrade
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Status(PD1-21).
	///</summary>
	public CWE MilitaryStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Advance Directive Last Verified Date(PD1-22).
	///</summary>
	public DT AdvanceDirectiveLastVerifiedDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PDA.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PDA message segment. 
/// This segment has the following fields:<ol>
///<li>PDA-1: Death Cause Code (CWE)</li>
///<li>PDA-2: Death Location (PL)</li>
///<li>PDA-3: Death Certified Indicator (ID)</li>
///<li>PDA-4: Death Certificate Signed Date/Time (DTM)</li>
///<li>PDA-5: Death Certified By (XCN)</li>
///<li>PDA-6: Autopsy Indicator (ID)</li>
///<li>PDA-7: Autopsy Start and End Date/Time (DR)</li>
///<li>PDA-8: Autopsy Performed By (XCN)</li>
///<li>PDA-9: Coroner Indicator (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PDA : AbstractSegment  {

  /**
   * Creates a PDA (Patient Death and Autopsy) segment object that belongs to the given 
   * message.  
   */
	public PDA(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Death Cause Code");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Death Location");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Death Certified Indicator");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Death Certificate Signed Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Death Certified By");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Autopsy Indicator");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Autopsy Start and End Date/Time");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Autopsy Performed By");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Coroner Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Death Cause Code(PDA-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetDeathCauseCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Death Cause Code (PDA-1).
   ///</summary>
  public CWE[] GetDeathCauseCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Death Cause Code (PDA-1).
   ///</summary>
  public int DeathCauseCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Death Location(PDA-2).
	///</summary>
	public PL DeathLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Death Certified Indicator(PDA-3).
	///</summary>
	public ID DeathCertifiedIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Death Certificate Signed Date/Time(PDA-4).
	///</summary>
	public DTM DeathCertificateSignedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Death Certified By(PDA-5).
	///</summary>
	public XCN DeathCertifiedBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Autopsy Indicator(PDA-6).
	///</summary>
	public ID AutopsyIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Autopsy Start and End Date/Time(PDA-7).
	///</summary>
	public DR AutopsyStartAndEndDateTime
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Autopsy Performed By(PDA-8).
	///</summary>
	public XCN AutopsyPerformedBy
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Coroner Indicator(PDA-9).
	///</summary>
	public ID CoronerIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PDC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PDC message segment. 
/// This segment has the following fields:<ol>
///<li>PDC-1: Manufacturer/Distributor (XON)</li>
///<li>PDC-2: Country (CWE)</li>
///<li>PDC-3: Brand Name (ST)</li>
///<li>PDC-4: Device Family Name (ST)</li>
///<li>PDC-5: Generic Name (CWE)</li>
///<li>PDC-6: Model Identifier (ST)</li>
///<li>PDC-7: Catalogue Identifier (ST)</li>
///<li>PDC-8: Other Identifier (ST)</li>
///<li>PDC-9: Product Code (CWE)</li>
///<li>PDC-10: Marketing Basis (ID)</li>
///<li>PDC-11: Marketing Approval ID (ST)</li>
///<li>PDC-12: Labeled Shelf Life (CQ)</li>
///<li>PDC-13: Expected Shelf Life (CQ)</li>
///<li>PDC-14: Date First Marketed (DTM)</li>
///<li>PDC-15: Date Last Marketed (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PDC : AbstractSegment  {

  /**
   * Creates a PDC (Product Detail Country) segment object that belongs to the given 
   * message.  
   */
	public PDC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(XON), true, 0, 0, new System.Object[]{message}, "Manufacturer/Distributor");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Country");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Brand Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Device Family Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Generic Name");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Model Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Catalogue Identifier");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Other Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Product Code");
       this.add(typeof(ID), false, 1, 4, new System.Object[]{message, 330}, "Marketing Basis");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Marketing Approval ID");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Labeled Shelf Life");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Expected Shelf Life");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date First Marketed");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date Last Marketed");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Manufacturer/Distributor(PDC-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetManufacturerDistributor(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Manufacturer/Distributor (PDC-1).
   ///</summary>
  public XON[] GetManufacturerDistributor() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Manufacturer/Distributor (PDC-1).
   ///</summary>
  public int ManufacturerDistributorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Country(PDC-2).
	///</summary>
	public CWE Country
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Brand Name(PDC-3).
	///</summary>
	public ST BrandName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Family Name(PDC-4).
	///</summary>
	public ST DeviceFamilyName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Generic Name(PDC-5).
	///</summary>
	public CWE GenericName
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Model Identifier(PDC-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetModelIdentifier(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Model Identifier (PDC-6).
   ///</summary>
  public ST[] GetModelIdentifier() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Model Identifier (PDC-6).
   ///</summary>
  public int ModelIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Catalogue Identifier(PDC-7).
	///</summary>
	public ST CatalogueIdentifier
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Other Identifier(PDC-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetOtherIdentifier(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Other Identifier (PDC-8).
   ///</summary>
  public ST[] GetOtherIdentifier() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Other Identifier (PDC-8).
   ///</summary>
  public int OtherIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Product Code(PDC-9).
	///</summary>
	public CWE ProductCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Marketing Basis(PDC-10).
	///</summary>
	public ID MarketingBasis
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Marketing Approval ID(PDC-11).
	///</summary>
	public ST MarketingApprovalID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Labeled Shelf Life(PDC-12).
	///</summary>
	public CQ LabeledShelfLife
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Shelf Life(PDC-13).
	///</summary>
	public CQ ExpectedShelfLife
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date First Marketed(PDC-14).
	///</summary>
	public DTM DateFirstMarketed
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Last Marketed(PDC-15).
	///</summary>
	public DTM DateLastMarketed
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PEO.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PEO message segment. 
/// This segment has the following fields:<ol>
///<li>PEO-1: Event Identifiers Used (CWE)</li>
///<li>PEO-2: Event Symptom/Diagnosis Code (CWE)</li>
///<li>PEO-3: Event Onset Date/Time (DTM)</li>
///<li>PEO-4: Event Exacerbation Date/Time (DTM)</li>
///<li>PEO-5: Event Improved Date/Time (DTM)</li>
///<li>PEO-6: Event Ended Data/Time (DTM)</li>
///<li>PEO-7: Event Location Occurred Address (XAD)</li>
///<li>PEO-8: Event Qualification (ID)</li>
///<li>PEO-9: Event Serious (ID)</li>
///<li>PEO-10: Event Expected (ID)</li>
///<li>PEO-11: Event Outcome (ID)</li>
///<li>PEO-12: Patient Outcome (ID)</li>
///<li>PEO-13: Event Description from Others (FT)</li>
///<li>PEO-14: Event Description from Original Reporter (FT)</li>
///<li>PEO-15: Event Description from Patient (FT)</li>
///<li>PEO-16: Event Description from Practitioner (FT)</li>
///<li>PEO-17: Event Description from Autopsy (FT)</li>
///<li>PEO-18: Cause Of Death (CWE)</li>
///<li>PEO-19: Primary Observer Name (XPN)</li>
///<li>PEO-20: Primary Observer Address (XAD)</li>
///<li>PEO-21: Primary Observer Telephone (XTN)</li>
///<li>PEO-22: Primary Observer's Qualification (ID)</li>
///<li>PEO-23: Confirmation Provided By (ID)</li>
///<li>PEO-24: Primary Observer Aware Date/Time (DTM)</li>
///<li>PEO-25: Primary Observer's identity May Be Divulged (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PEO : AbstractSegment  {

  /**
   * Creates a PEO (Product Experience Observation) segment object that belongs to the given 
   * message.  
   */
	public PEO(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Event Identifiers Used");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Event Symptom/Diagnosis Code");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Event Onset Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Event Exacerbation Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Event Improved Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Event Ended Data/Time");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Event Location Occurred Address");
       this.add(typeof(ID), false, 0, 1, new System.Object[]{message, 237}, "Event Qualification");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 238}, "Event Serious");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 239}, "Event Expected");
       this.add(typeof(ID), false, 0, 1, new System.Object[]{message, 240}, "Event Outcome");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 241}, "Patient Outcome");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Event Description from Others");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Event Description from Original Reporter");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Event Description from Patient");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Event Description from Practitioner");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Event Description from Autopsy");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Cause Of Death");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Primary Observer Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Primary Observer Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Primary Observer Telephone");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 242}, "Primary Observer's Qualification");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 242}, "Confirmation Provided By");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Primary Observer Aware Date/Time");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 243}, "Primary Observer's identity May Be Divulged");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Event Identifiers Used(PEO-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEventIdentifiersUsed(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Identifiers Used (PEO-1).
   ///</summary>
  public CWE[] GetEventIdentifiersUsed() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Identifiers Used (PEO-1).
   ///</summary>
  public int EventIdentifiersUsedRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Symptom/Diagnosis Code(PEO-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEventSymptomDiagnosisCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Symptom/Diagnosis Code (PEO-2).
   ///</summary>
  public CWE[] GetEventSymptomDiagnosisCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Symptom/Diagnosis Code (PEO-2).
   ///</summary>
  public int EventSymptomDiagnosisCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Event Onset Date/Time(PEO-3).
	///</summary>
	public DTM EventOnsetDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Exacerbation Date/Time(PEO-4).
	///</summary>
	public DTM EventExacerbationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Improved Date/Time(PEO-5).
	///</summary>
	public DTM EventImprovedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Ended Data/Time(PEO-6).
	///</summary>
	public DTM EventEndedDataTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Event Location Occurred Address(PEO-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetEventLocationOccurredAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Location Occurred Address (PEO-7).
   ///</summary>
  public XAD[] GetEventLocationOccurredAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Location Occurred Address (PEO-7).
   ///</summary>
  public int EventLocationOccurredAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Qualification(PEO-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetEventQualification(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Qualification (PEO-8).
   ///</summary>
  public ID[] GetEventQualification() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Qualification (PEO-8).
   ///</summary>
  public int EventQualificationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Event Serious(PEO-9).
	///</summary>
	public ID EventSerious
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Expected(PEO-10).
	///</summary>
	public ID EventExpected
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Event Outcome(PEO-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetEventOutcome(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Outcome (PEO-11).
   ///</summary>
  public ID[] GetEventOutcome() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Outcome (PEO-11).
   ///</summary>
  public int EventOutcomeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Outcome(PEO-12).
	///</summary>
	public ID PatientOutcome
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Event Description from Others(PEO-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetEventDescriptionFromOthers(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Description from Others (PEO-13).
   ///</summary>
  public FT[] GetEventDescriptionFromOthers() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Description from Others (PEO-13).
   ///</summary>
  public int EventDescriptionFromOthersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Description from Original Reporter(PEO-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetEventDescriptionFromOriginalReporter(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Description from Original Reporter (PEO-14).
   ///</summary>
  public FT[] GetEventDescriptionFromOriginalReporter() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Description from Original Reporter (PEO-14).
   ///</summary>
  public int EventDescriptionFromOriginalReporterRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Description from Patient(PEO-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetEventDescriptionFromPatient(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Description from Patient (PEO-15).
   ///</summary>
  public FT[] GetEventDescriptionFromPatient() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Description from Patient (PEO-15).
   ///</summary>
  public int EventDescriptionFromPatientRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Description from Practitioner(PEO-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetEventDescriptionFromPractitioner(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Description from Practitioner (PEO-16).
   ///</summary>
  public FT[] GetEventDescriptionFromPractitioner() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Description from Practitioner (PEO-16).
   ///</summary>
  public int EventDescriptionFromPractitionerRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Event Description from Autopsy(PEO-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetEventDescriptionFromAutopsy(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Description from Autopsy (PEO-17).
   ///</summary>
  public FT[] GetEventDescriptionFromAutopsy() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Description from Autopsy (PEO-17).
   ///</summary>
  public int EventDescriptionFromAutopsyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Cause Of Death(PEO-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCauseOfDeath(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Cause Of Death (PEO-18).
   ///</summary>
  public CWE[] GetCauseOfDeath() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Cause Of Death (PEO-18).
   ///</summary>
  public int CauseOfDeathRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Primary Observer Name(PEO-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetPrimaryObserverName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Observer Name (PEO-19).
   ///</summary>
  public XPN[] GetPrimaryObserverName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Observer Name (PEO-19).
   ///</summary>
  public int PrimaryObserverNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Primary Observer Address(PEO-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetPrimaryObserverAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Observer Address (PEO-20).
   ///</summary>
  public XAD[] GetPrimaryObserverAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Observer Address (PEO-20).
   ///</summary>
  public int PrimaryObserverAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Primary Observer Telephone(PEO-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPrimaryObserverTelephone(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Observer Telephone (PEO-21).
   ///</summary>
  public XTN[] GetPrimaryObserverTelephone() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Observer Telephone (PEO-21).
   ///</summary>
  public int PrimaryObserverTelephoneRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Primary Observer's Qualification(PEO-22).
	///</summary>
	public ID PrimaryObserverSQualification
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Confirmation Provided By(PEO-23).
	///</summary>
	public ID ConfirmationProvidedBy
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Primary Observer Aware Date/Time(PEO-24).
	///</summary>
	public DTM PrimaryObserverAwareDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Primary Observer's identity May Be Divulged(PEO-25).
	///</summary>
	public ID PrimaryObserverSIdentityMayBeDivulged
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PES.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PES message segment. 
/// This segment has the following fields:<ol>
///<li>PES-1: Sender Organization Name (XON)</li>
///<li>PES-2: Sender Individual Name (XCN)</li>
///<li>PES-3: Sender Address (XAD)</li>
///<li>PES-4: Sender Telephone (XTN)</li>
///<li>PES-5: Sender Event Identifier (EI)</li>
///<li>PES-6: Sender Sequence Number (NM)</li>
///<li>PES-7: Sender Event Description (FT)</li>
///<li>PES-8: Sender Comment (FT)</li>
///<li>PES-9: Sender Aware Date/Time (DTM)</li>
///<li>PES-10: Event Report Date (DTM)</li>
///<li>PES-11: Event Report Timing/Type (ID)</li>
///<li>PES-12: Event Report Source (ID)</li>
///<li>PES-13: Event Reported To (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PES : AbstractSegment  {

  /**
   * Creates a PES (Product Experience Sender) segment object that belongs to the given 
   * message.  
   */
	public PES(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Sender Organization Name");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Sender Individual Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Sender Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Sender Telephone");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Sender Event Identifier");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Sender Sequence Number");
       this.add(typeof(FT), false, 0, 0, new System.Object[]{message}, "Sender Event Description");
       this.add(typeof(FT), false, 1, 0, new System.Object[]{message}, "Sender Comment");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Sender Aware Date/Time");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Event Report Date");
       this.add(typeof(ID), false, 2, 3, new System.Object[]{message, 234}, "Event Report Timing/Type");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 235}, "Event Report Source");
       this.add(typeof(ID), false, 0, 1, new System.Object[]{message, 236}, "Event Reported To");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Sender Organization Name(PES-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetSenderOrganizationName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Sender Organization Name (PES-1).
   ///</summary>
  public XON[] GetSenderOrganizationName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Sender Organization Name (PES-1).
   ///</summary>
  public int SenderOrganizationNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Sender Individual Name(PES-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetSenderIndividualName(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Sender Individual Name (PES-2).
   ///</summary>
  public XCN[] GetSenderIndividualName() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Sender Individual Name (PES-2).
   ///</summary>
  public int SenderIndividualNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Sender Address(PES-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetSenderAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Sender Address (PES-3).
   ///</summary>
  public XAD[] GetSenderAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Sender Address (PES-3).
   ///</summary>
  public int SenderAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Sender Telephone(PES-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetSenderTelephone(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Sender Telephone (PES-4).
   ///</summary>
  public XTN[] GetSenderTelephone() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Sender Telephone (PES-4).
   ///</summary>
  public int SenderTelephoneRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Sender Event Identifier(PES-5).
	///</summary>
	public EI SenderEventIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sender Sequence Number(PES-6).
	///</summary>
	public NM SenderSequenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Sender Event Description(PES-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FT GetSenderEventDescription(int rep)
	{
			FT ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (FT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Sender Event Description (PES-7).
   ///</summary>
  public FT[] GetSenderEventDescription() {
     FT[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new FT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Sender Event Description (PES-7).
   ///</summary>
  public int SenderEventDescriptionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Sender Comment(PES-8).
	///</summary>
	public FT SenderComment
	{
		get{
			FT ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (FT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sender Aware Date/Time(PES-9).
	///</summary>
	public DTM SenderAwareDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Report Date(PES-10).
	///</summary>
	public DTM EventReportDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Event Report Timing/Type(PES-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetEventReportTimingType(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Report Timing/Type (PES-11).
   ///</summary>
  public ID[] GetEventReportTimingType() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Report Timing/Type (PES-11).
   ///</summary>
  public int EventReportTimingTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Event Report Source(PES-12).
	///</summary>
	public ID EventReportSource
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Event Reported To(PES-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetEventReportedTo(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Event Reported To (PES-13).
   ///</summary>
  public ID[] GetEventReportedTo() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Event Reported To (PES-13).
   ///</summary>
  public int EventReportedToRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\PID.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PID message segment. 
/// This segment has the following fields:<ol>
///<li>PID-1: Set ID - PID (SI)</li>
///<li>PID-2: Patient ID (-)</li>
///<li>PID-3: Patient Identifier List (CX)</li>
///<li>PID-4: Alternate Patient ID - PID (-)</li>
///<li>PID-5: Patient Name (XPN)</li>
///<li>PID-6: Mother's Maiden Name (XPN)</li>
///<li>PID-7: Date/Time of Birth (DTM)</li>
///<li>PID-8: Administrative Sex (CWE)</li>
///<li>PID-9: Patient Alias (-)</li>
///<li>PID-10: Race (CWE)</li>
///<li>PID-11: Patient Address (XAD)</li>
///<li>PID-12: County Code (-)</li>
///<li>PID-13: Phone Number - Home (XTN)</li>
///<li>PID-14: Phone Number - Business (XTN)</li>
///<li>PID-15: Primary Language (CWE)</li>
///<li>PID-16: Marital Status (CWE)</li>
///<li>PID-17: Religion (CWE)</li>
///<li>PID-18: Patient Account Number (CX)</li>
///<li>PID-19: SSN Number - Patient (-)</li>
///<li>PID-20: Driver's License Number - Patient (-)</li>
///<li>PID-21: Mother's Identifier (CX)</li>
///<li>PID-22: Ethnic Group (CWE)</li>
///<li>PID-23: Birth Place (ST)</li>
///<li>PID-24: Multiple Birth Indicator (ID)</li>
///<li>PID-25: Birth Order (NM)</li>
///<li>PID-26: Citizenship (CWE)</li>
///<li>PID-27: Veterans Military Status (CWE)</li>
///<li>PID-28: Nationality (CWE)</li>
///<li>PID-29: Patient Death Date and Time (DTM)</li>
///<li>PID-30: Patient Death Indicator (ID)</li>
///<li>PID-31: Identity Unknown Indicator (ID)</li>
///<li>PID-32: Identity Reliability Code (CWE)</li>
///<li>PID-33: Last Update Date/Time (DTM)</li>
///<li>PID-34: Last Update Facility (HD)</li>
///<li>PID-35: Species Code (CWE)</li>
///<li>PID-36: Breed Code (CWE)</li>
///<li>PID-37: Strain (ST)</li>
///<li>PID-38: Production Class Code (CWE)</li>
///<li>PID-39: Tribal Citizenship (CWE)</li>
///<li>PID-40: Patient Telecommunication Information (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PID : AbstractSegment  {

  /**
   * Creates a PID (Patient Identification) segment object that belongs to the given 
   * message.  
   */
	public PID(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - PID");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Patient ID");
       this.add(typeof(CX), true, 0, 0, new System.Object[]{message}, "Patient Identifier List");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Alternate Patient ID - PID");
       this.add(typeof(XPN), true, 0, 0, new System.Object[]{message}, "Patient Name");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Mother's Maiden Name");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of Birth");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administrative Sex");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Patient Alias");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Race");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Patient Address");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "County Code");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Phone Number - Home");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Phone Number - Business");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Primary Language");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Marital Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Religion");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Patient Account Number");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "SSN Number - Patient");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Driver's License Number - Patient");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Mother's Identifier");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ethnic Group");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Birth Place");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Multiple Birth Indicator");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Birth Order");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Citizenship");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Veterans Military Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Nationality");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Patient Death Date and Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Patient Death Indicator");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Identity Unknown Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Identity Reliability Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Last Update Date/Time");
       this.add(typeof(HD), false, 1, 0, new System.Object[]{message}, "Last Update Facility");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Species Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Breed Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Strain");
       this.add(typeof(CWE), false, 2, 0, new System.Object[]{message}, "Production Class Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Tribal Citizenship");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Patient Telecommunication Information");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - PID(PID-1).
	///</summary>
	public SI SetIDPID
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient ID(PID-2).
	///</summary>
	public - PatientID
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Patient Identifier List(PID-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetPatientIdentifierList(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Identifier List (PID-3).
   ///</summary>
  public CX[] GetPatientIdentifierList() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Identifier List (PID-3).
   ///</summary>
  public int PatientIdentifierListRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Alternate Patient ID - PID(PID-4).
	///</summary>
	public - AlternatePatientIDPID
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Patient Name(PID-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetPatientName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Name (PID-5).
   ///</summary>
  public XPN[] GetPatientName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Name (PID-5).
   ///</summary>
  public int PatientNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Mother's Maiden Name(PID-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetMotherSMaidenName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Mother's Maiden Name (PID-6).
   ///</summary>
  public XPN[] GetMotherSMaidenName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Mother's Maiden Name (PID-6).
   ///</summary>
  public int MotherSMaidenNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Date/Time of Birth(PID-7).
	///</summary>
	public DTM DateTimeOfBirth
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administrative Sex(PID-8).
	///</summary>
	public CWE AdministrativeSex
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Alias(PID-9).
	///</summary>
	public - PatientAlias
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Race(PID-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRace(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Race (PID-10).
   ///</summary>
  public CWE[] GetRace() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Race (PID-10).
   ///</summary>
  public int RaceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Patient Address(PID-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetPatientAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Address (PID-11).
   ///</summary>
  public XAD[] GetPatientAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Address (PID-11).
   ///</summary>
  public int PatientAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns County Code(PID-12).
	///</summary>
	public - CountyCode
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Phone Number - Home(PID-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPhoneNumberHome(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Phone Number - Home (PID-13).
   ///</summary>
  public XTN[] GetPhoneNumberHome() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Phone Number - Home (PID-13).
   ///</summary>
  public int PhoneNumberHomeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Phone Number - Business(PID-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPhoneNumberBusiness(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Phone Number - Business (PID-14).
   ///</summary>
  public XTN[] GetPhoneNumberBusiness() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Phone Number - Business (PID-14).
   ///</summary>
  public int PhoneNumberBusinessRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Primary Language(PID-15).
	///</summary>
	public CWE PrimaryLanguage
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Marital Status(PID-16).
	///</summary>
	public CWE MaritalStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Religion(PID-17).
	///</summary>
	public CWE Religion
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Account Number(PID-18).
	///</summary>
	public CX PatientAccountNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns SSN Number - Patient(PID-19).
	///</summary>
	public - SSNNumberPatient
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Driver's License Number - Patient(PID-20).
	///</summary>
	public - DriverSLicenseNumberPatient
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Mother's Identifier(PID-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetMotherSIdentifier(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Mother's Identifier (PID-21).
   ///</summary>
  public CX[] GetMotherSIdentifier() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Mother's Identifier (PID-21).
   ///</summary>
  public int MotherSIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Ethnic Group(PID-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetEthnicGroup(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ethnic Group (PID-22).
   ///</summary>
  public CWE[] GetEthnicGroup() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ethnic Group (PID-22).
   ///</summary>
  public int EthnicGroupRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Birth Place(PID-23).
	///</summary>
	public ST BirthPlace
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Multiple Birth Indicator(PID-24).
	///</summary>
	public ID MultipleBirthIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Birth Order(PID-25).
	///</summary>
	public NM BirthOrder
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Citizenship(PID-26).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCitizenship(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Citizenship (PID-26).
   ///</summary>
  public CWE[] GetCitizenship() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(26);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Citizenship (PID-26).
   ///</summary>
  public int CitizenshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(26);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Veterans Military Status(PID-27).
	///</summary>
	public CWE VeteransMilitaryStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Nationality(PID-28).
	///</summary>
	public CWE Nationality
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Death Date and Time(PID-29).
	///</summary>
	public DTM PatientDeathDateAndTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Death Indicator(PID-30).
	///</summary>
	public ID PatientDeathIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Identity Unknown Indicator(PID-31).
	///</summary>
	public ID IdentityUnknownIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Identity Reliability Code(PID-32).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetIdentityReliabilityCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(32, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Identity Reliability Code (PID-32).
   ///</summary>
  public CWE[] GetIdentityReliabilityCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(32);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Identity Reliability Code (PID-32).
   ///</summary>
  public int IdentityReliabilityCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(32);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Last Update Date/Time(PID-33).
	///</summary>
	public DTM LastUpdateDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Last Update Facility(PID-34).
	///</summary>
	public HD LastUpdateFacility
	{
		get{
			HD ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (HD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Species Code(PID-35).
	///</summary>
	public CWE SpeciesCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Breed Code(PID-36).
	///</summary>
	public CWE BreedCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Strain(PID-37).
	///</summary>
	public ST Strain
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Production Class Code(PID-38).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProductionClassCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Production Class Code (PID-38).
   ///</summary>
  public CWE[] GetProductionClassCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(38);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Production Class Code (PID-38).
   ///</summary>
  public int ProductionClassCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(38);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Tribal Citizenship(PID-39).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetTribalCitizenship(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Tribal Citizenship (PID-39).
   ///</summary>
  public CWE[] GetTribalCitizenship() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(39);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Tribal Citizenship (PID-39).
   ///</summary>
  public int TribalCitizenshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(39);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Patient Telecommunication Information(PID-40).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPatientTelecommunicationInformation(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(40, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Telecommunication Information (PID-40).
   ///</summary>
  public XTN[] GetPatientTelecommunicationInformation() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(40);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Telecommunication Information (PID-40).
   ///</summary>
  public int PatientTelecommunicationInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(40);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\PKG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PKG message segment. 
/// This segment has the following fields:<ol>
///<li>PKG-1: Set Id - PKG (SI)</li>
///<li>PKG-2: Packaging Units (CWE)</li>
///<li>PKG-3: Default Order Unit Of Measure Indicator (CNE)</li>
///<li>PKG-4: Package Quantity (NM)</li>
///<li>PKG-5: Price (CP)</li>
///<li>PKG-6: Future Item Price (CP)</li>
///<li>PKG-7: Future Item Price Effective Date (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PKG : AbstractSegment  {

  /**
   * Creates a PKG (Item Packaging) segment object that belongs to the given 
   * message.  
   */
	public PKG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set Id - PKG");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Packaging Units");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Default Order Unit Of Measure Indicator");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Package Quantity");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Price");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Future Item Price");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Future Item Price Effective Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set Id - PKG(PKG-1).
	///</summary>
	public SI SetIdPKG
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Packaging Units(PKG-2).
	///</summary>
	public CWE PackagingUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Default Order Unit Of Measure Indicator(PKG-3).
	///</summary>
	public CNE DefaultOrderUnitOfMeasureIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Package Quantity(PKG-4).
	///</summary>
	public NM PackageQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Price(PKG-5).
	///</summary>
	public CP Price
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Future Item Price(PKG-6).
	///</summary>
	public CP FutureItemPrice
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Future Item Price Effective Date(PKG-7).
	///</summary>
	public DTM FutureItemPriceEffectiveDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PMT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PMT message segment. 
/// This segment has the following fields:<ol>
///<li>PMT-1: Payment/Remittance Advice Number (EI)</li>
///<li>PMT-2: Payment/Remittance Effective Date/Time (DTM)</li>
///<li>PMT-3: Payment/Remittance Expiration Date/Time (DTM)</li>
///<li>PMT-4: Payment Method (CWE)</li>
///<li>PMT-5: Payment/Remittance Date/Time (DTM)</li>
///<li>PMT-6: Payment/Remittance Amount (CP)</li>
///<li>PMT-7: Check Number (EI)</li>
///<li>PMT-8: Payee Bank Identification (XON)</li>
///<li>PMT-9: Payee Transit Number (ST)</li>
///<li>PMT-10: Payee Bank Account ID (CX)</li>
///<li>PMT-11: Payment Organization (XON)</li>
///<li>PMT-12: ESR-Code-Line (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PMT : AbstractSegment  {

  /**
   * Creates a PMT (Payment Information) segment object that belongs to the given 
   * message.  
   */
	public PMT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Payment/Remittance Advice Number");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Payment/Remittance Effective Date/Time");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Payment/Remittance Expiration Date/Time");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Payment Method");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Payment/Remittance Date/Time");
       this.add(typeof(CP), true, 1, 0, new System.Object[]{message}, "Payment/Remittance Amount");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Check Number");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Payee Bank Identification");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Payee Transit Number");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Payee Bank Account ID");
       this.add(typeof(XON), true, 1, 0, new System.Object[]{message}, "Payment Organization");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "ESR-Code-Line");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Payment/Remittance Advice Number(PMT-1).
	///</summary>
	public EI PaymentRemittanceAdviceNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment/Remittance Effective Date/Time(PMT-2).
	///</summary>
	public DTM PaymentRemittanceEffectiveDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment/Remittance Expiration Date/Time(PMT-3).
	///</summary>
	public DTM PaymentRemittanceExpirationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment Method(PMT-4).
	///</summary>
	public CWE PaymentMethod
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment/Remittance Date/Time(PMT-5).
	///</summary>
	public DTM PaymentRemittanceDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment/Remittance Amount(PMT-6).
	///</summary>
	public CP PaymentRemittanceAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Check Number(PMT-7).
	///</summary>
	public EI CheckNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payee Bank Identification(PMT-8).
	///</summary>
	public XON PayeeBankIdentification
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payee Transit Number(PMT-9).
	///</summary>
	public ST PayeeTransitNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payee Bank Account ID(PMT-10).
	///</summary>
	public CX PayeeBankAccountID
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payment Organization(PMT-11).
	///</summary>
	public XON PaymentOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns ESR-Code-Line(PMT-12).
	///</summary>
	public ST ESRCodeLine
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PR1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PR1 message segment. 
/// This segment has the following fields:<ol>
///<li>PR1-1: Set ID - PR1 (SI)</li>
///<li>PR1-2: Procedure Coding Method (-)</li>
///<li>PR1-3: Procedure Code (CNE)</li>
///<li>PR1-4: Procedure Description (-)</li>
///<li>PR1-5: Procedure Date/Time (DTM)</li>
///<li>PR1-6: Procedure Functional Type (CWE)</li>
///<li>PR1-7: Procedure Minutes (NM)</li>
///<li>PR1-8: Anesthesiologist (-)</li>
///<li>PR1-9: Anesthesia Code (CWE)</li>
///<li>PR1-10: Anesthesia Minutes (NM)</li>
///<li>PR1-11: Surgeon (-)</li>
///<li>PR1-12: Procedure Practitioner (-)</li>
///<li>PR1-13: Consent Code (CWE)</li>
///<li>PR1-14: Procedure Priority (NM)</li>
///<li>PR1-15: Associated Diagnosis Code (CWE)</li>
///<li>PR1-16: Procedure Code Modifier (CNE)</li>
///<li>PR1-17: Procedure DRG Type (CWE)</li>
///<li>PR1-18: Tissue Type Code (CWE)</li>
///<li>PR1-19: Procedure Identifier (EI)</li>
///<li>PR1-20: Procedure Action Code (ID)</li>
///<li>PR1-21: DRG Procedure Determination Status (CWE)</li>
///<li>PR1-22: DRG Procedure Relevance (CWE)</li>
///<li>PR1-23: Treating Organizational Unit (PL)</li>
///<li>PR1-24: Respiratory Within Surgery (ID)</li>
///<li>PR1-25: Parent Procedure ID (EI)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PR1 : AbstractSegment  {

  /**
   * Creates a PR1 (Procedures) segment object that belongs to the given 
   * message.  
   */
	public PR1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - PR1");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Procedure Coding Method");
       this.add(typeof(CNE), true, 1, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Procedure Description");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Procedure Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Procedure Functional Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Procedure Minutes");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Anesthesiologist");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Anesthesia Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Anesthesia Minutes");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Surgeon");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Procedure Practitioner");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Consent Code");
       this.add(typeof(NM), false, 1, 2, new System.Object[]{message}, "Procedure Priority");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Associated Diagnosis Code");
       this.add(typeof(CNE), false, 0, 0, new System.Object[]{message}, "Procedure Code Modifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Procedure DRG Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Tissue Type Code");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Procedure Identifier");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Procedure Action Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Procedure Determination Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "DRG Procedure Relevance");
       this.add(typeof(PL), false, 0, 0, new System.Object[]{message}, "Treating Organizational Unit");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Respiratory Within Surgery");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Procedure ID");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - PR1(PR1-1).
	///</summary>
	public SI SetIDPR1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Coding Method(PR1-2).
	///</summary>
	public - ProcedureCodingMethod
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Code(PR1-3).
	///</summary>
	public CNE ProcedureCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Description(PR1-4).
	///</summary>
	public - ProcedureDescription
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Date/Time(PR1-5).
	///</summary>
	public DTM ProcedureDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Functional Type(PR1-6).
	///</summary>
	public CWE ProcedureFunctionalType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Minutes(PR1-7).
	///</summary>
	public NM ProcedureMinutes
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Anesthesiologist(PR1-8).
	///</summary>
	public - Anesthesiologist
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Anesthesia Code(PR1-9).
	///</summary>
	public CWE AnesthesiaCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Anesthesia Minutes(PR1-10).
	///</summary>
	public NM AnesthesiaMinutes
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Surgeon(PR1-11).
	///</summary>
	public - Surgeon
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Practitioner(PR1-12).
	///</summary>
	public - ProcedurePractitioner
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Consent Code(PR1-13).
	///</summary>
	public CWE ConsentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Priority(PR1-14).
	///</summary>
	public NM ProcedurePriority
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Associated Diagnosis Code(PR1-15).
	///</summary>
	public CWE AssociatedDiagnosisCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Procedure Code Modifier(PR1-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CNE GetProcedureCodeModifier(int rep)
	{
			CNE ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (CNE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Procedure Code Modifier (PR1-16).
   ///</summary>
  public CNE[] GetProcedureCodeModifier() {
     CNE[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new CNE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CNE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Procedure Code Modifier (PR1-16).
   ///</summary>
  public int ProcedureCodeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Procedure DRG Type(PR1-17).
	///</summary>
	public CWE ProcedureDRGType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Tissue Type Code(PR1-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetTissueTypeCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Tissue Type Code (PR1-18).
   ///</summary>
  public CWE[] GetTissueTypeCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Tissue Type Code (PR1-18).
   ///</summary>
  public int TissueTypeCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Procedure Identifier(PR1-19).
	///</summary>
	public EI ProcedureIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Action Code(PR1-20).
	///</summary>
	public ID ProcedureActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Procedure Determination Status(PR1-21).
	///</summary>
	public CWE DRGProcedureDeterminationStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns DRG Procedure Relevance(PR1-22).
	///</summary>
	public CWE DRGProcedureRelevance
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Treating Organizational Unit(PR1-23).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PL GetTreatingOrganizationalUnit(int rep)
	{
			PL ret = null;
			try
			{
			IType t = this.GetField(23, rep);
				ret = (PL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Treating Organizational Unit (PR1-23).
   ///</summary>
  public PL[] GetTreatingOrganizationalUnit() {
     PL[] ret = null;
    try {
        IType[] t = this.GetField(23);  
        ret = new PL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Treating Organizational Unit (PR1-23).
   ///</summary>
  public int TreatingOrganizationalUnitRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(23);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Respiratory Within Surgery(PR1-24).
	///</summary>
	public ID RespiratoryWithinSurgery
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Procedure ID(PR1-25).
	///</summary>
	public EI ParentProcedureID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PRA.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PRA message segment. 
/// This segment has the following fields:<ol>
///<li>PRA-1: Primary Key Value - PRA (CWE)</li>
///<li>PRA-2: Practitioner Group (CWE)</li>
///<li>PRA-3: Practitioner Category (CWE)</li>
///<li>PRA-4: Provider Billing (ID)</li>
///<li>PRA-5: Specialty (SPD)</li>
///<li>PRA-6: Practitioner ID Numbers (PLN)</li>
///<li>PRA-7: Privileges (PIP)</li>
///<li>PRA-8: Date Entered Practice (DT)</li>
///<li>PRA-9: Institution (CWE)</li>
///<li>PRA-10: Date Left Practice (DT)</li>
///<li>PRA-11: Government Reimbursement Billing Eligibility (CWE)</li>
///<li>PRA-12: Set ID - PRA (SI)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PRA : AbstractSegment  {

  /**
   * Creates a PRA (Practitioner Detail) segment object that belongs to the given 
   * message.  
   */
	public PRA(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Primary Key Value - PRA");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Practitioner Group");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Practitioner Category");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 187}, "Provider Billing");
       this.add(typeof(SPD), false, 0, 0, new System.Object[]{message}, "Specialty");
       this.add(typeof(PLN), false, 0, 0, new System.Object[]{message}, "Practitioner ID Numbers");
       this.add(typeof(PIP), false, 0, 0, new System.Object[]{message}, "Privileges");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Date Entered Practice");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Institution");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Date Left Practice");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Government Reimbursement Billing Eligibility");
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - PRA");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - PRA(PRA-1).
	///</summary>
	public CWE PrimaryKeyValuePRA
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Practitioner Group(PRA-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPractitionerGroup(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Practitioner Group (PRA-2).
   ///</summary>
  public CWE[] GetPractitionerGroup() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Practitioner Group (PRA-2).
   ///</summary>
  public int PractitionerGroupRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Practitioner Category(PRA-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPractitionerCategory(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Practitioner Category (PRA-3).
   ///</summary>
  public CWE[] GetPractitionerCategory() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Practitioner Category (PRA-3).
   ///</summary>
  public int PractitionerCategoryRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Provider Billing(PRA-4).
	///</summary>
	public ID ProviderBilling
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specialty(PRA-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SPD GetSpecialty(int rep)
	{
			SPD ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (SPD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specialty (PRA-5).
   ///</summary>
  public SPD[] GetSpecialty() {
     SPD[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new SPD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SPD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specialty (PRA-5).
   ///</summary>
  public int SpecialtyRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Practitioner ID Numbers(PRA-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PLN GetPractitionerIDNumbers(int rep)
	{
			PLN ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (PLN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Practitioner ID Numbers (PRA-6).
   ///</summary>
  public PLN[] GetPractitionerIDNumbers() {
     PLN[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new PLN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PLN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Practitioner ID Numbers (PRA-6).
   ///</summary>
  public int PractitionerIDNumbersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Privileges(PRA-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PIP GetPrivileges(int rep)
	{
			PIP ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (PIP)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Privileges (PRA-7).
   ///</summary>
  public PIP[] GetPrivileges() {
     PIP[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new PIP[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PIP)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Privileges (PRA-7).
   ///</summary>
  public int PrivilegesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Date Entered Practice(PRA-8).
	///</summary>
	public DT DateEnteredPractice
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Institution(PRA-9).
	///</summary>
	public CWE Institution
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Left Practice(PRA-10).
	///</summary>
	public DT DateLeftPractice
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Government Reimbursement Billing Eligibility(PRA-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetGovernmentReimbursementBillingEligibility(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Government Reimbursement Billing Eligibility (PRA-11).
   ///</summary>
  public CWE[] GetGovernmentReimbursementBillingEligibility() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Government Reimbursement Billing Eligibility (PRA-11).
   ///</summary>
  public int GovernmentReimbursementBillingEligibilityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Set ID - PRA(PRA-12).
	///</summary>
	public SI SetIDPRA
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PRB.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PRB message segment. 
/// This segment has the following fields:<ol>
///<li>PRB-1: Action Code (ID)</li>
///<li>PRB-2: Action Date/Time (DTM)</li>
///<li>PRB-3: Problem ID (CWE)</li>
///<li>PRB-4: Problem Instance ID (EI)</li>
///<li>PRB-5: Episode of Care ID (EI)</li>
///<li>PRB-6: Problem List Priority (NM)</li>
///<li>PRB-7: Problem Established Date/Time (DTM)</li>
///<li>PRB-8: Anticipated Problem Resolution Date/Time (DTM)</li>
///<li>PRB-9: Actual Problem Resolution Date/Time (DTM)</li>
///<li>PRB-10: Problem Classification (CWE)</li>
///<li>PRB-11: Problem Management Discipline (CWE)</li>
///<li>PRB-12: Problem Persistence (CWE)</li>
///<li>PRB-13: Problem Confirmation Status (CWE)</li>
///<li>PRB-14: Problem Life Cycle Status (CWE)</li>
///<li>PRB-15: Problem Life Cycle Status Date/Time (DTM)</li>
///<li>PRB-16: Problem Date of Onset (DTM)</li>
///<li>PRB-17: Problem Onset Text (ST)</li>
///<li>PRB-18: Problem Ranking (CWE)</li>
///<li>PRB-19: Certainty of Problem (CWE)</li>
///<li>PRB-20: Probability of Problem (0-1) (NM)</li>
///<li>PRB-21: Individual Awareness of Problem (CWE)</li>
///<li>PRB-22: Problem Prognosis (CWE)</li>
///<li>PRB-23: Individual Awareness of Prognosis (CWE)</li>
///<li>PRB-24: Family/Significant Other Awareness of Problem/Prognosis (ST)</li>
///<li>PRB-25: Security/Sensitivity (CWE)</li>
///<li>PRB-26: Problem Severity (CWE)</li>
///<li>PRB-27: Problem Perspective (CWE)</li>
///<li>PRB-28: Mood Code (CNE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PRB : AbstractSegment  {

  /**
   * Creates a PRB (Problem Details) segment object that belongs to the given 
   * message.  
   */
	public PRB(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 287}, "Action Code");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Action Date/Time");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Problem ID");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Problem Instance ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Episode of Care ID");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Problem List Priority");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Problem Established Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Anticipated Problem Resolution Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Actual Problem Resolution Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Classification");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Problem Management Discipline");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Persistence");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Confirmation Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Life Cycle Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Problem Life Cycle Status Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Problem Date of Onset");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Problem Onset Text");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Ranking");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Certainty of Problem");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Probability of Problem (0-1)");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Individual Awareness of Problem");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Prognosis");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Individual Awareness of Prognosis");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Family/Significant Other Awareness of Problem/Prognosis");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Security/Sensitivity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Severity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Problem Perspective");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Mood Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Action Code(PRB-1).
	///</summary>
	public ID ActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Date/Time(PRB-2).
	///</summary>
	public DTM ActionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem ID(PRB-3).
	///</summary>
	public CWE ProblemID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Instance ID(PRB-4).
	///</summary>
	public EI ProblemInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Episode of Care ID(PRB-5).
	///</summary>
	public EI EpisodeOfCareID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem List Priority(PRB-6).
	///</summary>
	public NM ProblemListPriority
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Established Date/Time(PRB-7).
	///</summary>
	public DTM ProblemEstablishedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Anticipated Problem Resolution Date/Time(PRB-8).
	///</summary>
	public DTM AnticipatedProblemResolutionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Problem Resolution Date/Time(PRB-9).
	///</summary>
	public DTM ActualProblemResolutionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Classification(PRB-10).
	///</summary>
	public CWE ProblemClassification
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Problem Management Discipline(PRB-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProblemManagementDiscipline(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Problem Management Discipline (PRB-11).
   ///</summary>
  public CWE[] GetProblemManagementDiscipline() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Problem Management Discipline (PRB-11).
   ///</summary>
  public int ProblemManagementDisciplineRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Problem Persistence(PRB-12).
	///</summary>
	public CWE ProblemPersistence
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Confirmation Status(PRB-13).
	///</summary>
	public CWE ProblemConfirmationStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Life Cycle Status(PRB-14).
	///</summary>
	public CWE ProblemLifeCycleStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Life Cycle Status Date/Time(PRB-15).
	///</summary>
	public DTM ProblemLifeCycleStatusDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Date of Onset(PRB-16).
	///</summary>
	public DTM ProblemDateOfOnset
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Onset Text(PRB-17).
	///</summary>
	public ST ProblemOnsetText
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Ranking(PRB-18).
	///</summary>
	public CWE ProblemRanking
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certainty of Problem(PRB-19).
	///</summary>
	public CWE CertaintyOfProblem
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Probability of Problem (0-1)(PRB-20).
	///</summary>
	public NM ProbabilityOfProblem
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Individual Awareness of Problem(PRB-21).
	///</summary>
	public CWE IndividualAwarenessOfProblem
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Prognosis(PRB-22).
	///</summary>
	public CWE ProblemPrognosis
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Individual Awareness of Prognosis(PRB-23).
	///</summary>
	public CWE IndividualAwarenessOfPrognosis
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Family/Significant Other Awareness of Problem/Prognosis(PRB-24).
	///</summary>
	public ST FamilySignificantOtherAwarenessOfProblemPrognosis
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Security/Sensitivity(PRB-25).
	///</summary>
	public CWE SecuritySensitivity
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Severity(PRB-26).
	///</summary>
	public CWE ProblemSeverity
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Problem Perspective(PRB-27).
	///</summary>
	public CWE ProblemPerspective
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Mood Code(PRB-28).
	///</summary>
	public CNE MoodCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PRC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PRC message segment. 
/// This segment has the following fields:<ol>
///<li>PRC-1: Primary Key Value - PRC (CWE)</li>
///<li>PRC-2: Facility ID - PRC (CWE)</li>
///<li>PRC-3: Department (CWE)</li>
///<li>PRC-4: Valid Patient Classes (CWE)</li>
///<li>PRC-5: Price (CP)</li>
///<li>PRC-6: Formula (ST)</li>
///<li>PRC-7: Minimum Quantity (NM)</li>
///<li>PRC-8: Maximum Quantity (NM)</li>
///<li>PRC-9: Minimum Price (MO)</li>
///<li>PRC-10: Maximum Price (MO)</li>
///<li>PRC-11: Effective Start Date (DTM)</li>
///<li>PRC-12: Effective End Date (DTM)</li>
///<li>PRC-13: Price Override Flag (CWE)</li>
///<li>PRC-14: Billing Category (CWE)</li>
///<li>PRC-15: Chargeable Flag (ID)</li>
///<li>PRC-16: Active/Inactive Flag (ID)</li>
///<li>PRC-17: Cost (MO)</li>
///<li>PRC-18: Charge on Indicator (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PRC : AbstractSegment  {

  /**
   * Creates a PRC (Pricing) segment object that belongs to the given 
   * message.  
   */
	public PRC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Primary Key Value - PRC");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Facility ID - PRC");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Department");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Valid Patient Classes");
       this.add(typeof(CP), false, 0, 0, new System.Object[]{message}, "Price");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Formula");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Minimum Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Maximum Quantity");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Minimum Price");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Maximum Price");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Start Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective End Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Price Override Flag");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Billing Category");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Chargeable Flag");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 183}, "Active/Inactive Flag");
       this.add(typeof(MO), false, 1, 0, new System.Object[]{message}, "Cost");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Charge on Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - PRC(PRC-1).
	///</summary>
	public CWE PrimaryKeyValuePRC
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Facility ID - PRC(PRC-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetFacilityIDPRC(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Facility ID - PRC (PRC-2).
   ///</summary>
  public CWE[] GetFacilityIDPRC() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Facility ID - PRC (PRC-2).
   ///</summary>
  public int FacilityIDPRCRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Department(PRC-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetDepartment(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Department (PRC-3).
   ///</summary>
  public CWE[] GetDepartment() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Department (PRC-3).
   ///</summary>
  public int DepartmentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Valid Patient Classes(PRC-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetValidPatientClasses(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Valid Patient Classes (PRC-4).
   ///</summary>
  public CWE[] GetValidPatientClasses() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Valid Patient Classes (PRC-4).
   ///</summary>
  public int ValidPatientClassesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Price(PRC-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CP GetPrice(int rep)
	{
			CP ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CP)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Price (PRC-5).
   ///</summary>
  public CP[] GetPrice() {
     CP[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CP[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CP)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Price (PRC-5).
   ///</summary>
  public int PriceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Formula(PRC-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetFormula(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Formula (PRC-6).
   ///</summary>
  public ST[] GetFormula() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Formula (PRC-6).
   ///</summary>
  public int FormulaRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Minimum Quantity(PRC-7).
	///</summary>
	public NM MinimumQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Maximum Quantity(PRC-8).
	///</summary>
	public NM MaximumQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Minimum Price(PRC-9).
	///</summary>
	public MO MinimumPrice
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Maximum Price(PRC-10).
	///</summary>
	public MO MaximumPrice
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Start Date(PRC-11).
	///</summary>
	public DTM EffectiveStartDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective End Date(PRC-12).
	///</summary>
	public DTM EffectiveEndDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Price Override Flag(PRC-13).
	///</summary>
	public CWE PriceOverrideFlag
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Billing Category(PRC-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetBillingCategory(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Billing Category (PRC-14).
   ///</summary>
  public CWE[] GetBillingCategory() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Billing Category (PRC-14).
   ///</summary>
  public int BillingCategoryRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Chargeable Flag(PRC-15).
	///</summary>
	public ID ChargeableFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Active/Inactive Flag(PRC-16).
	///</summary>
	public ID ActiveInactiveFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cost(PRC-17).
	///</summary>
	public MO Cost
	{
		get{
			MO ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (MO)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Charge on Indicator(PRC-18).
	///</summary>
	public CWE ChargeOnIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PRD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PRD message segment. 
/// This segment has the following fields:<ol>
///<li>PRD-1: Provider Role (CWE)</li>
///<li>PRD-2: Provider Name (XPN)</li>
///<li>PRD-3: Provider Address (XAD)</li>
///<li>PRD-4: Provider Location (PL)</li>
///<li>PRD-5: Provider Communication Information (XTN)</li>
///<li>PRD-6: Preferred Method of Contact (CWE)</li>
///<li>PRD-7: Provider Identifiers (PLN)</li>
///<li>PRD-8: Effective Start Date of Provider Role (DTM)</li>
///<li>PRD-9: Effective End Date of Provider Role (DTM)</li>
///<li>PRD-10: Provider Organization Name and Identifier (XON)</li>
///<li>PRD-11: Provider Organization Address (XAD)</li>
///<li>PRD-12: Provider Organization Location Information (PL)</li>
///<li>PRD-13: Provider Organization Communication Information (XTN)</li>
///<li>PRD-14: Provider Organization Method of Contact (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PRD : AbstractSegment  {

  /**
   * Creates a PRD (Provider Data) segment object that belongs to the given 
   * message.  
   */
	public PRD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 0, 0, new System.Object[]{message}, "Provider Role");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Provider Name");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Provider Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Provider Location");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Provider Communication Information");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Preferred Method of Contact");
       this.add(typeof(PLN), false, 0, 0, new System.Object[]{message}, "Provider Identifiers");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Start Date of Provider Role");
       this.add(typeof(DTM), false, 0, 0, new System.Object[]{message}, "Effective End Date of Provider Role");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Provider Organization Name and Identifier");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Provider Organization Address");
       this.add(typeof(PL), false, 0, 0, new System.Object[]{message}, "Provider Organization Location Information");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Provider Organization Communication Information");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Provider Organization Method of Contact");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns a single repetition of Provider Role(PRD-1).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProviderRole(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Role (PRD-1).
   ///</summary>
  public CWE[] GetProviderRole() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(1);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Role (PRD-1).
   ///</summary>
  public int ProviderRoleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(1);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Provider Name(PRD-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetProviderName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Name (PRD-2).
   ///</summary>
  public XPN[] GetProviderName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Name (PRD-2).
   ///</summary>
  public int ProviderNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Provider Address(PRD-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetProviderAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Address (PRD-3).
   ///</summary>
  public XAD[] GetProviderAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Address (PRD-3).
   ///</summary>
  public int ProviderAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Provider Location(PRD-4).
	///</summary>
	public PL ProviderLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Provider Communication Information(PRD-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetProviderCommunicationInformation(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Communication Information (PRD-5).
   ///</summary>
  public XTN[] GetProviderCommunicationInformation() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Communication Information (PRD-5).
   ///</summary>
  public int ProviderCommunicationInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Preferred Method of Contact(PRD-6).
	///</summary>
	public CWE PreferredMethodOfContact
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Provider Identifiers(PRD-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PLN GetProviderIdentifiers(int rep)
	{
			PLN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (PLN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Identifiers (PRD-7).
   ///</summary>
  public PLN[] GetProviderIdentifiers() {
     PLN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new PLN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PLN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Identifiers (PRD-7).
   ///</summary>
  public int ProviderIdentifiersRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Effective Start Date of Provider Role(PRD-8).
	///</summary>
	public DTM EffectiveStartDateOfProviderRole
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Effective End Date of Provider Role(PRD-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DTM GetEffectiveEndDateOfProviderRole(int rep)
	{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (DTM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Effective End Date of Provider Role (PRD-9).
   ///</summary>
  public DTM[] GetEffectiveEndDateOfProviderRole() {
     DTM[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new DTM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DTM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Effective End Date of Provider Role (PRD-9).
   ///</summary>
  public int EffectiveEndDateOfProviderRoleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Provider Organization Name and Identifier(PRD-10).
	///</summary>
	public XON ProviderOrganizationNameAndIdentifier
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Provider Organization Address(PRD-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetProviderOrganizationAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Organization Address (PRD-11).
   ///</summary>
  public XAD[] GetProviderOrganizationAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Organization Address (PRD-11).
   ///</summary>
  public int ProviderOrganizationAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Provider Organization Location Information(PRD-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PL GetProviderOrganizationLocationInformation(int rep)
	{
			PL ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (PL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Organization Location Information (PRD-12).
   ///</summary>
  public PL[] GetProviderOrganizationLocationInformation() {
     PL[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new PL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Organization Location Information (PRD-12).
   ///</summary>
  public int ProviderOrganizationLocationInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Provider Organization Communication Information(PRD-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetProviderOrganizationCommunicationInformation(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Organization Communication Information (PRD-13).
   ///</summary>
  public XTN[] GetProviderOrganizationCommunicationInformation() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Organization Communication Information (PRD-13).
   ///</summary>
  public int ProviderOrganizationCommunicationInformationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Provider Organization Method of Contact(PRD-14).
	///</summary>
	public CWE ProviderOrganizationMethodOfContact
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PRT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PRT message segment. 
/// This segment has the following fields:<ol>
///<li>PRT-1: Participation Instance ID (EI)</li>
///<li>PRT-2: Action Code (ID)</li>
///<li>PRT-3: Action Reason (CWE)</li>
///<li>PRT-4: Participation (CWE)</li>
///<li>PRT-5: Participation Person (XCN)</li>
///<li>PRT-6: Participation Person Provider Type (CWE)</li>
///<li>PRT-7: Participant Organization Unit Type (CWE)</li>
///<li>PRT-8: Participation Organization (XON)</li>
///<li>PRT-9: Participant Location (PL)</li>
///<li>PRT-10: Participation Device (EI)</li>
///<li>PRT-11: Participation Begin Date/Time (arrival time) (DTM)</li>
///<li>PRT-12: Participation End Date/Time (departure time) (DTM)</li>
///<li>PRT-13: Participation Qualitative Duration (CWE)</li>
///<li>PRT-14: Participation Address (XAD)</li>
///<li>PRT-15: Participant Telecommunication Address (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PRT : AbstractSegment  {

  /**
   * Creates a PRT (Participation Information) segment object that belongs to the given 
   * message.  
   */
	public PRT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), false, 1, 4, new System.Object[]{message}, "Participation Instance ID");
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 287}, "Action Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Action Reason");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Participation");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Participation Person");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Participation Person Provider Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Participant Organization Unit Type");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Participation Organization");
       this.add(typeof(PL), false, 0, 0, new System.Object[]{message}, "Participant Location");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Participation Device");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Participation Begin Date/Time (arrival time)");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Participation End Date/Time (departure time)");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Participation Qualitative Duration");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Participation Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Participant Telecommunication Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Participation Instance ID(PRT-1).
	///</summary>
	public EI ParticipationInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Code(PRT-2).
	///</summary>
	public ID ActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Reason(PRT-3).
	///</summary>
	public CWE ActionReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Participation(PRT-4).
	///</summary>
	public CWE Participation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Participation Person(PRT-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetParticipationPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Participation Person (PRT-5).
   ///</summary>
  public XCN[] GetParticipationPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Participation Person (PRT-5).
   ///</summary>
  public int ParticipationPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Participation Person Provider Type(PRT-6).
	///</summary>
	public CWE ParticipationPersonProviderType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Participant Organization Unit Type(PRT-7).
	///</summary>
	public CWE ParticipantOrganizationUnitType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Participation Organization(PRT-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetParticipationOrganization(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Participation Organization (PRT-8).
   ///</summary>
  public XON[] GetParticipationOrganization() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Participation Organization (PRT-8).
   ///</summary>
  public int ParticipationOrganizationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Participant Location(PRT-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PL GetParticipantLocation(int rep)
	{
			PL ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (PL)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Participant Location (PRT-9).
   ///</summary>
  public PL[] GetParticipantLocation() {
     PL[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new PL[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PL)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Participant Location (PRT-9).
   ///</summary>
  public int ParticipantLocationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Participation Device(PRT-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetParticipationDevice(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Participation Device (PRT-10).
   ///</summary>
  public EI[] GetParticipationDevice() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Participation Device (PRT-10).
   ///</summary>
  public int ParticipationDeviceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Participation Begin Date/Time (arrival time)(PRT-11).
	///</summary>
	public DTM ParticipationBeginDateTimeArrivaltime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Participation End Date/Time (departure time)(PRT-12).
	///</summary>
	public DTM ParticipationEndDateTimeDeparturetime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Participation Qualitative Duration(PRT-13).
	///</summary>
	public CWE ParticipationQualitativeDuration
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Participation Address(PRT-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetParticipationAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Participation Address (PRT-14).
   ///</summary>
  public XAD[] GetParticipationAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Participation Address (PRT-14).
   ///</summary>
  public int ParticipationAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Participant Telecommunication Address(PRT-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetParticipantTelecommunicationAddress(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Participant Telecommunication Address (PRT-15).
   ///</summary>
  public XTN[] GetParticipantTelecommunicationAddress() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Participant Telecommunication Address (PRT-15).
   ///</summary>
  public int ParticipantTelecommunicationAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\PSG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PSG message segment. 
/// This segment has the following fields:<ol>
///<li>PSG-1: Provider Product/Service Group Number (EI)</li>
///<li>PSG-2: Payer Product/Service Group Number (EI)</li>
///<li>PSG-3: Product/Service Group Sequence Number (SI)</li>
///<li>PSG-4: Adjudicate as Group (ID)</li>
///<li>PSG-5: Product/Service Group Billed Amount (CP)</li>
///<li>PSG-6: Product/Service Group Description (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PSG : AbstractSegment  {

  /**
   * Creates a PSG (Product/Service Group) segment object that belongs to the given 
   * message.  
   */
	public PSG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Provider Product/Service Group Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Payer Product/Service Group Number");
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Product/Service Group Sequence Number");
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 136}, "Adjudicate as Group");
       this.add(typeof(CP), true, 1, 0, new System.Object[]{message}, "Product/Service Group Billed Amount");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Product/Service Group Description");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Provider Product/Service Group Number(PSG-1).
	///</summary>
	public EI ProviderProductServiceGroupNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Product/Service Group Number(PSG-2).
	///</summary>
	public EI PayerProductServiceGroupNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Group Sequence Number(PSG-3).
	///</summary>
	public SI ProductServiceGroupSequenceNumber
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Adjudicate as Group(PSG-4).
	///</summary>
	public ID AdjudicateAsGroup
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Group Billed Amount(PSG-5).
	///</summary>
	public CP ProductServiceGroupBilledAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Group Description(PSG-6).
	///</summary>
	public ST ProductServiceGroupDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PSH.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PSH message segment. 
/// This segment has the following fields:<ol>
///<li>PSH-1: Report Type (ST)</li>
///<li>PSH-2: Report Form Identifier (ST)</li>
///<li>PSH-3: Report Date (DTM)</li>
///<li>PSH-4: Report Interval Start Date (DTM)</li>
///<li>PSH-5: Report Interval End Date (DTM)</li>
///<li>PSH-6: Quantity Manufactured (CQ)</li>
///<li>PSH-7: Quantity Distributed (CQ)</li>
///<li>PSH-8: Quantity Distributed Method (ID)</li>
///<li>PSH-9: Quantity Distributed Comment (FT)</li>
///<li>PSH-10: Quantity in Use (CQ)</li>
///<li>PSH-11: Quantity in Use Method (ID)</li>
///<li>PSH-12: Quantity in Use Comment (FT)</li>
///<li>PSH-13: Number of Product Experience Reports Filed by Facility (NM)</li>
///<li>PSH-14: Number of Product Experience Reports Filed by Distributor (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PSH : AbstractSegment  {

  /**
   * Creates a PSH (Product Summary Header) segment object that belongs to the given 
   * message.  
   */
	public PSH(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Report Type");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Report Form Identifier");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Report Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Report Interval Start Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Report Interval End Date");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Quantity Manufactured");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Quantity Distributed");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 329}, "Quantity Distributed Method");
       this.add(typeof(FT), false, 1, 0, new System.Object[]{message}, "Quantity Distributed Comment");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Quantity in Use");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 329}, "Quantity in Use Method");
       this.add(typeof(FT), false, 1, 0, new System.Object[]{message}, "Quantity in Use Comment");
       this.add(typeof(NM), false, 8, 0, new System.Object[]{message}, "Number of Product Experience Reports Filed by Facility");
       this.add(typeof(NM), false, 8, 0, new System.Object[]{message}, "Number of Product Experience Reports Filed by Distributor");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Report Type(PSH-1).
	///</summary>
	public ST ReportType
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Form Identifier(PSH-2).
	///</summary>
	public ST ReportFormIdentifier
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Date(PSH-3).
	///</summary>
	public DTM ReportDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Interval Start Date(PSH-4).
	///</summary>
	public DTM ReportIntervalStartDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Report Interval End Date(PSH-5).
	///</summary>
	public DTM ReportIntervalEndDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity Manufactured(PSH-6).
	///</summary>
	public CQ QuantityManufactured
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity Distributed(PSH-7).
	///</summary>
	public CQ QuantityDistributed
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity Distributed Method(PSH-8).
	///</summary>
	public ID QuantityDistributedMethod
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity Distributed Comment(PSH-9).
	///</summary>
	public FT QuantityDistributedComment
	{
		get{
			FT ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (FT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity in Use(PSH-10).
	///</summary>
	public CQ QuantityInUse
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity in Use Method(PSH-11).
	///</summary>
	public ID QuantityInUseMethod
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity in Use Comment(PSH-12).
	///</summary>
	public FT QuantityInUseComment
	{
		get{
			FT ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (FT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Number of Product Experience Reports Filed by Facility(PSH-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetNumberOfProductExperienceReportsFiledByFacility(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Number of Product Experience Reports Filed by Facility (PSH-13).
   ///</summary>
  public NM[] GetNumberOfProductExperienceReportsFiledByFacility() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Number of Product Experience Reports Filed by Facility (PSH-13).
   ///</summary>
  public int NumberOfProductExperienceReportsFiledByFacilityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Number of Product Experience Reports Filed by Distributor(PSH-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetNumberOfProductExperienceReportsFiledByDistributor(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Number of Product Experience Reports Filed by Distributor (PSH-14).
   ///</summary>
  public NM[] GetNumberOfProductExperienceReportsFiledByDistributor() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Number of Product Experience Reports Filed by Distributor (PSH-14).
   ///</summary>
  public int NumberOfProductExperienceReportsFiledByDistributorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\PSL.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PSL message segment. 
/// This segment has the following fields:<ol>
///<li>PSL-1: Provider Product/Service Line Item Number (EI)</li>
///<li>PSL-2: Payer Product/Service Line Item Number (EI)</li>
///<li>PSL-3: Product/Service Line Item Sequence Number (SI)</li>
///<li>PSL-4: Provider Tracking ID (EI)</li>
///<li>PSL-5: Payer Tracking ID (EI)</li>
///<li>PSL-6: Product/Service Line Item Status (CWE)</li>
///<li>PSL-7: Product/Service Code (CWE)</li>
///<li>PSL-8: Product/Service Code Modifier (CWE)</li>
///<li>PSL-9: Product/Service Code Description (ST)</li>
///<li>PSL-10: Product/Service Effective Date (DTM)</li>
///<li>PSL-11: Product/Service Expiration Date (DTM)</li>
///<li>PSL-12: Product/Service Quantity (CQ)</li>
///<li>PSL-13: Product/Service Unit Cost (CP)</li>
///<li>PSL-14: Number of Items per Unit (NM)</li>
///<li>PSL-15: Product/Service Gross Amount (CP)</li>
///<li>PSL-16: Product/Service Billed Amount (CP)</li>
///<li>PSL-17: Product/Service Clarification Code Type (CWE)</li>
///<li>PSL-18: Product/Service Clarification Code Value (ST)</li>
///<li>PSL-19: Health Document Reference Identifier (EI)</li>
///<li>PSL-20: Processing Consideration Code (CWE)</li>
///<li>PSL-21: Restricted Disclosure Indicator (ID)</li>
///<li>PSL-22: Related Product/Service Code Indicator (CWE)</li>
///<li>PSL-23: Product/Service Amount for Physician (CP)</li>
///<li>PSL-24: Product/Service Cost Factor (NM)</li>
///<li>PSL-25: Cost Center (CX)</li>
///<li>PSL-26: Billing Period (DR)</li>
///<li>PSL-27: Days without Billing (NM)</li>
///<li>PSL-28: Session-No (NM)</li>
///<li>PSL-29: Executing Physician ID (XCN)</li>
///<li>PSL-30: Responsible Physician ID (XCN)</li>
///<li>PSL-31: Role Executing Physician (CWE)</li>
///<li>PSL-32: Medical Role Executing Physician (CWE)</li>
///<li>PSL-33: Side of body (CWE)</li>
///<li>PSL-34: Number of TP's PP (NM)</li>
///<li>PSL-35: TP-Value PP (CP)</li>
///<li>PSL-36: Internal Scaling Factor PP (NM)</li>
///<li>PSL-37: External Scaling Factor PP (NM)</li>
///<li>PSL-38: Amount PP (CP)</li>
///<li>PSL-39: Number of TP's Technical Part (NM)</li>
///<li>PSL-40: TP-Value Technical Part (CP)</li>
///<li>PSL-41: Internal Scaling Factor Technical Part (NM)</li>
///<li>PSL-42: External Scaling Factor Technical Part (NM)</li>
///<li>PSL-43: Amount Technical Part (CP)</li>
///<li>PSL-44: Total Amount Professional Part + Technical Part (CP)</li>
///<li>PSL-45: VAT-Rate (NM)</li>
///<li>PSL-46: Main-Service (ID)</li>
///<li>PSL-47: Validation (ID)</li>
///<li>PSL-48: Comment (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PSL : AbstractSegment  {

  /**
   * Creates a PSL (Product/Service Line Item) segment object that belongs to the given 
   * message.  
   */
	public PSL(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Provider Product/Service Line Item Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Payer Product/Service Line Item Number");
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Product/Service Line Item Sequence Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Provider Tracking ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Payer Tracking ID");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Product/Service Line Item Status");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Product/Service Code");
       this.add(typeof(CWE), false, 5, 0, new System.Object[]{message}, "Product/Service Code Modifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Product/Service Code Description");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Product/Service Effective Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Product/Service Expiration Date");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Product/Service Quantity");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Product/Service Unit Cost");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Items per Unit");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Product/Service Gross Amount");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Product/Service Billed Amount");
       this.add(typeof(CWE), false, 20, 0, new System.Object[]{message}, "Product/Service Clarification Code Type");
       this.add(typeof(ST), false, 20, 0, new System.Object[]{message}, "Product/Service Clarification Code Value");
       this.add(typeof(EI), false, 5, 0, new System.Object[]{message}, "Health Document Reference Identifier");
       this.add(typeof(CWE), false, 20, 0, new System.Object[]{message}, "Processing Consideration Code");
       this.add(typeof(ID), true, 1, 4, new System.Object[]{message, 532}, "Restricted Disclosure Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Related Product/Service Code Indicator");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Product/Service Amount for Physician");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Product/Service Cost Factor");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Cost Center");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Billing Period");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Days without Billing");
       this.add(typeof(NM), false, 1, 4, new System.Object[]{message}, "Session-No");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Executing Physician ID");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Responsible Physician ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Role Executing Physician");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Medical Role Executing Physician");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Side of body");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of TP's PP");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "TP-Value PP");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Internal Scaling Factor PP");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "External Scaling Factor PP");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Amount PP");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of TP's Technical Part");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "TP-Value Technical Part");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Internal Scaling Factor Technical Part");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "External Scaling Factor Technical Part");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Amount Technical Part");
       this.add(typeof(CP), false, 1, 0, new System.Object[]{message}, "Total Amount Professional Part + Technical Part");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "VAT-Rate");
       this.add(typeof(ID), false, 1, 20, new System.Object[]{message, 0}, "Main-Service");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Validation");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Comment");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Provider Product/Service Line Item Number(PSL-1).
	///</summary>
	public EI ProviderProductServiceLineItemNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Product/Service Line Item Number(PSL-2).
	///</summary>
	public EI PayerProductServiceLineItemNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Line Item Sequence Number(PSL-3).
	///</summary>
	public SI ProductServiceLineItemSequenceNumber
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Provider Tracking ID(PSL-4).
	///</summary>
	public EI ProviderTrackingID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Tracking ID(PSL-5).
	///</summary>
	public EI PayerTrackingID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Line Item Status(PSL-6).
	///</summary>
	public CWE ProductServiceLineItemStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Code(PSL-7).
	///</summary>
	public CWE ProductServiceCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Product/Service Code Modifier(PSL-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProductServiceCodeModifier(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Product/Service Code Modifier (PSL-8).
   ///</summary>
  public CWE[] GetProductServiceCodeModifier() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Product/Service Code Modifier (PSL-8).
   ///</summary>
  public int ProductServiceCodeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Product/Service Code Description(PSL-9).
	///</summary>
	public ST ProductServiceCodeDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Effective Date(PSL-10).
	///</summary>
	public DTM ProductServiceEffectiveDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Expiration Date(PSL-11).
	///</summary>
	public DTM ProductServiceExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Quantity(PSL-12).
	///</summary>
	public CQ ProductServiceQuantity
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Unit Cost(PSL-13).
	///</summary>
	public CP ProductServiceUnitCost
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Items per Unit(PSL-14).
	///</summary>
	public NM NumberOfItemsPerUnit
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Gross Amount(PSL-15).
	///</summary>
	public CP ProductServiceGrossAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Billed Amount(PSL-16).
	///</summary>
	public CP ProductServiceBilledAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Product/Service Clarification Code Type(PSL-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProductServiceClarificationCodeType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Product/Service Clarification Code Type (PSL-17).
   ///</summary>
  public CWE[] GetProductServiceClarificationCodeType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Product/Service Clarification Code Type (PSL-17).
   ///</summary>
  public int ProductServiceClarificationCodeTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Product/Service Clarification Code Value(PSL-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetProductServiceClarificationCodeValue(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Product/Service Clarification Code Value (PSL-18).
   ///</summary>
  public ST[] GetProductServiceClarificationCodeValue() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Product/Service Clarification Code Value (PSL-18).
   ///</summary>
  public int ProductServiceClarificationCodeValueRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Health Document Reference Identifier(PSL-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetHealthDocumentReferenceIdentifier(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Health Document Reference Identifier (PSL-19).
   ///</summary>
  public EI[] GetHealthDocumentReferenceIdentifier() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Health Document Reference Identifier (PSL-19).
   ///</summary>
  public int HealthDocumentReferenceIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Processing Consideration Code(PSL-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProcessingConsiderationCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Processing Consideration Code (PSL-20).
   ///</summary>
  public CWE[] GetProcessingConsiderationCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Processing Consideration Code (PSL-20).
   ///</summary>
  public int ProcessingConsiderationCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Restricted Disclosure Indicator(PSL-21).
	///</summary>
	public ID RestrictedDisclosureIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Related Product/Service Code Indicator(PSL-22).
	///</summary>
	public CWE RelatedProductServiceCodeIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Amount for Physician(PSL-23).
	///</summary>
	public CP ProductServiceAmountForPhysician
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Cost Factor(PSL-24).
	///</summary>
	public NM ProductServiceCostFactor
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cost Center(PSL-25).
	///</summary>
	public CX CostCenter
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Billing Period(PSL-26).
	///</summary>
	public DR BillingPeriod
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Days without Billing(PSL-27).
	///</summary>
	public NM DaysWithoutBilling
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Session-No(PSL-28).
	///</summary>
	public NM SessionNo
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Executing Physician ID(PSL-29).
	///</summary>
	public XCN ExecutingPhysicianID
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Responsible Physician ID(PSL-30).
	///</summary>
	public XCN ResponsiblePhysicianID
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Role Executing Physician(PSL-31).
	///</summary>
	public CWE RoleExecutingPhysician
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Medical Role Executing Physician(PSL-32).
	///</summary>
	public CWE MedicalRoleExecutingPhysician
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Side of body(PSL-33).
	///</summary>
	public CWE SideOfBody
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of TP's PP(PSL-34).
	///</summary>
	public NM NumberOfTPSPP
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns TP-Value PP(PSL-35).
	///</summary>
	public CP TPValuePP
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Internal Scaling Factor PP(PSL-36).
	///</summary>
	public NM InternalScalingFactorPP
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns External Scaling Factor PP(PSL-37).
	///</summary>
	public NM ExternalScalingFactorPP
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Amount PP(PSL-38).
	///</summary>
	public CP AmountPP
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of TP's Technical Part(PSL-39).
	///</summary>
	public NM NumberOfTPSTechnicalPart
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns TP-Value Technical Part(PSL-40).
	///</summary>
	public CP TPValueTechnicalPart
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Internal Scaling Factor Technical Part(PSL-41).
	///</summary>
	public NM InternalScalingFactorTechnicalPart
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns External Scaling Factor Technical Part(PSL-42).
	///</summary>
	public NM ExternalScalingFactorTechnicalPart
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Amount Technical Part(PSL-43).
	///</summary>
	public CP AmountTechnicalPart
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Amount Professional Part + Technical Part(PSL-44).
	///</summary>
	public CP TotalAmountProfessionalPartTechnicalPart
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns VAT-Rate(PSL-45).
	///</summary>
	public NM VATRate
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(45, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Main-Service(PSL-46).
	///</summary>
	public ID MainService
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(46, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Validation(PSL-47).
	///</summary>
	public ID Validation
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Comment(PSL-48).
	///</summary>
	public ST Comment
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PSS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PSS message segment. 
/// This segment has the following fields:<ol>
///<li>PSS-1: Provider Product/Service Section Number (EI)</li>
///<li>PSS-2: Payer Product/Service Section Number (EI)</li>
///<li>PSS-3: Product/Service Section Sequence Number (SI)</li>
///<li>PSS-4: Billed Amount (CP)</li>
///<li>PSS-5: Section Description or Heading (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PSS : AbstractSegment  {

  /**
   * Creates a PSS (Product/Service Section) segment object that belongs to the given 
   * message.  
   */
	public PSS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Provider Product/Service Section Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Payer Product/Service Section Number");
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Product/Service Section Sequence Number");
       this.add(typeof(CP), true, 1, 0, new System.Object[]{message}, "Billed Amount");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Section Description or Heading");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Provider Product/Service Section Number(PSS-1).
	///</summary>
	public EI ProviderProductServiceSectionNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payer Product/Service Section Number(PSS-2).
	///</summary>
	public EI PayerProductServiceSectionNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Product/Service Section Sequence Number(PSS-3).
	///</summary>
	public SI ProductServiceSectionSequenceNumber
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Billed Amount(PSS-4).
	///</summary>
	public CP BilledAmount
	{
		get{
			CP ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Section Description or Heading(PSS-5).
	///</summary>
	public ST SectionDescriptionOrHeading
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PTH.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PTH message segment. 
/// This segment has the following fields:<ol>
///<li>PTH-1: Action Code (ID)</li>
///<li>PTH-2: Pathway ID (CWE)</li>
///<li>PTH-3: Pathway Instance ID (EI)</li>
///<li>PTH-4: Pathway Established Date/Time (DTM)</li>
///<li>PTH-5: Pathway Life Cycle Status (CWE)</li>
///<li>PTH-6: Change Pathway Life Cycle Status Date/Time (DTM)</li>
///<li>PTH-7: Mood Code (CNE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PTH : AbstractSegment  {

  /**
   * Creates a PTH (Pathway) segment object that belongs to the given 
   * message.  
   */
	public PTH(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 287}, "Action Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Pathway ID");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Pathway Instance ID");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Pathway Established Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Pathway Life Cycle Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Change Pathway Life Cycle Status Date/Time");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Mood Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Action Code(PTH-1).
	///</summary>
	public ID ActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pathway ID(PTH-2).
	///</summary>
	public CWE PathwayID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pathway Instance ID(PTH-3).
	///</summary>
	public EI PathwayInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pathway Established Date/Time(PTH-4).
	///</summary>
	public DTM PathwayEstablishedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pathway Life Cycle Status(PTH-5).
	///</summary>
	public CWE PathwayLifeCycleStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Change Pathway Life Cycle Status Date/Time(PTH-6).
	///</summary>
	public DTM ChangePathwayLifeCycleStatusDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Mood Code(PTH-7).
	///</summary>
	public CNE MoodCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PV1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PV1 message segment. 
/// This segment has the following fields:<ol>
///<li>PV1-1: Set ID - PV1 (SI)</li>
///<li>PV1-2: Patient Class (CWE)</li>
///<li>PV1-3: Assigned Patient Location (PL)</li>
///<li>PV1-4: Admission Type (CWE)</li>
///<li>PV1-5: Preadmit Number (CX)</li>
///<li>PV1-6: Prior Patient Location (PL)</li>
///<li>PV1-7: Attending Doctor (XCN)</li>
///<li>PV1-8: Referring Doctor (XCN)</li>
///<li>PV1-9: Consulting Doctor (XCN)</li>
///<li>PV1-10: Hospital Service (CWE)</li>
///<li>PV1-11: Temporary Location (PL)</li>
///<li>PV1-12: Preadmit Test Indicator (CWE)</li>
///<li>PV1-13: Re-admission Indicator (CWE)</li>
///<li>PV1-14: Admit Source (CWE)</li>
///<li>PV1-15: Ambulatory Status (CWE)</li>
///<li>PV1-16: VIP Indicator (CWE)</li>
///<li>PV1-17: Admitting Doctor (XCN)</li>
///<li>PV1-18: Patient Type (CWE)</li>
///<li>PV1-19: Visit Number (CX)</li>
///<li>PV1-20: Financial Class (FC)</li>
///<li>PV1-21: Charge Price Indicator (CWE)</li>
///<li>PV1-22: Courtesy Code (CWE)</li>
///<li>PV1-23: Credit Rating (CWE)</li>
///<li>PV1-24: Contract Code (CWE)</li>
///<li>PV1-25: Contract Effective Date (DT)</li>
///<li>PV1-26: Contract Amount (NM)</li>
///<li>PV1-27: Contract Period (NM)</li>
///<li>PV1-28: Interest Code (CWE)</li>
///<li>PV1-29: Transfer to Bad Debt Code (CWE)</li>
///<li>PV1-30: Transfer to Bad Debt Date (DT)</li>
///<li>PV1-31: Bad Debt Agency Code (CWE)</li>
///<li>PV1-32: Bad Debt Transfer Amount (NM)</li>
///<li>PV1-33: Bad Debt Recovery Amount (NM)</li>
///<li>PV1-34: Delete Account Indicator (CWE)</li>
///<li>PV1-35: Delete Account Date (DT)</li>
///<li>PV1-36: Discharge Disposition (CWE)</li>
///<li>PV1-37: Discharged to Location (DLD)</li>
///<li>PV1-38: Diet Type (CWE)</li>
///<li>PV1-39: Servicing Facility (CWE)</li>
///<li>PV1-40: Bed Status (CWE)</li>
///<li>PV1-41: Account Status (CWE)</li>
///<li>PV1-42: Pending Location (PL)</li>
///<li>PV1-43: Prior Temporary Location (PL)</li>
///<li>PV1-44: Admit Date/Time (DTM)</li>
///<li>PV1-45: Discharge Date/Time (DTM)</li>
///<li>PV1-46: Current Patient Balance (NM)</li>
///<li>PV1-47: Total Charges (NM)</li>
///<li>PV1-48: Total Adjustments (NM)</li>
///<li>PV1-49: Total Payments (NM)</li>
///<li>PV1-50: Alternate Visit ID (CX)</li>
///<li>PV1-51: Visit Indicator (CWE)</li>
///<li>PV1-52: Other Healthcare Provider (-)</li>
///<li>PV1-53: Service Episode Description (ST)</li>
///<li>PV1-54: Service Episode Identifier (CX)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PV1 : AbstractSegment  {

  /**
   * Creates a PV1 (Patient Visit) segment object that belongs to the given 
   * message.  
   */
	public PV1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - PV1");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Patient Class");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Assigned Patient Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Admission Type");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Preadmit Number");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Prior Patient Location");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Attending Doctor");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Referring Doctor");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Consulting Doctor");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Hospital Service");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Temporary Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Preadmit Test Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Re-admission Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Admit Source");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Ambulatory Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "VIP Indicator");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Admitting Doctor");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Type");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Visit Number");
       this.add(typeof(FC), false, 0, 0, new System.Object[]{message}, "Financial Class");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Charge Price Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Courtesy Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Credit Rating");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Contract Code");
       this.add(typeof(DT), false, 0, 0, new System.Object[]{message}, "Contract Effective Date");
       this.add(typeof(NM), false, 0, 0, new System.Object[]{message}, "Contract Amount");
       this.add(typeof(NM), false, 0, 0, new System.Object[]{message}, "Contract Period");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Interest Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transfer to Bad Debt Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Transfer to Bad Debt Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Bad Debt Agency Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Bad Debt Transfer Amount");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Bad Debt Recovery Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Delete Account Indicator");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Delete Account Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Discharge Disposition");
       this.add(typeof(DLD), false, 1, 0, new System.Object[]{message}, "Discharged to Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Diet Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Servicing Facility");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Bed Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Account Status");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Pending Location");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Prior Temporary Location");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Admit Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Discharge Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Current Patient Balance");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Total Charges");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Total Adjustments");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Total Payments");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Alternate Visit ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Visit Indicator");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Other Healthcare Provider");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Service Episode Description");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Service Episode Identifier");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - PV1(PV1-1).
	///</summary>
	public SI SetIDPV1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Class(PV1-2).
	///</summary>
	public CWE PatientClass
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Assigned Patient Location(PV1-3).
	///</summary>
	public PL AssignedPatientLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Admission Type(PV1-4).
	///</summary>
	public CWE AdmissionType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Preadmit Number(PV1-5).
	///</summary>
	public CX PreadmitNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Patient Location(PV1-6).
	///</summary>
	public PL PriorPatientLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Attending Doctor(PV1-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetAttendingDoctor(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Attending Doctor (PV1-7).
   ///</summary>
  public XCN[] GetAttendingDoctor() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Attending Doctor (PV1-7).
   ///</summary>
  public int AttendingDoctorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Referring Doctor(PV1-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetReferringDoctor(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Referring Doctor (PV1-8).
   ///</summary>
  public XCN[] GetReferringDoctor() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Referring Doctor (PV1-8).
   ///</summary>
  public int ReferringDoctorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Consulting Doctor(PV1-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetConsultingDoctor(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Consulting Doctor (PV1-9).
   ///</summary>
  public XCN[] GetConsultingDoctor() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Consulting Doctor (PV1-9).
   ///</summary>
  public int ConsultingDoctorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Hospital Service(PV1-10).
	///</summary>
	public CWE HospitalService
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Temporary Location(PV1-11).
	///</summary>
	public PL TemporaryLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Preadmit Test Indicator(PV1-12).
	///</summary>
	public CWE PreadmitTestIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Re-admission Indicator(PV1-13).
	///</summary>
	public CWE ReAdmissionIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Admit Source(PV1-14).
	///</summary>
	public CWE AdmitSource
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ambulatory Status(PV1-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAmbulatoryStatus(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ambulatory Status (PV1-15).
   ///</summary>
  public CWE[] GetAmbulatoryStatus() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ambulatory Status (PV1-15).
   ///</summary>
  public int AmbulatoryStatusRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns VIP Indicator(PV1-16).
	///</summary>
	public CWE VIPIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Admitting Doctor(PV1-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetAdmittingDoctor(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Admitting Doctor (PV1-17).
   ///</summary>
  public XCN[] GetAdmittingDoctor() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Admitting Doctor (PV1-17).
   ///</summary>
  public int AdmittingDoctorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Type(PV1-18).
	///</summary>
	public CWE PatientType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Visit Number(PV1-19).
	///</summary>
	public CX VisitNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Financial Class(PV1-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public FC GetFinancialClass(int rep)
	{
			FC ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (FC)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Financial Class (PV1-20).
   ///</summary>
  public FC[] GetFinancialClass() {
     FC[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new FC[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (FC)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Financial Class (PV1-20).
   ///</summary>
  public int FinancialClassRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Charge Price Indicator(PV1-21).
	///</summary>
	public CWE ChargePriceIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Courtesy Code(PV1-22).
	///</summary>
	public CWE CourtesyCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Credit Rating(PV1-23).
	///</summary>
	public CWE CreditRating
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Contract Code(PV1-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetContractCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contract Code (PV1-24).
   ///</summary>
  public CWE[] GetContractCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contract Code (PV1-24).
   ///</summary>
  public int ContractCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contract Effective Date(PV1-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DT GetContractEffectiveDate(int rep)
	{
			DT ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (DT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contract Effective Date (PV1-25).
   ///</summary>
  public DT[] GetContractEffectiveDate() {
     DT[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new DT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contract Effective Date (PV1-25).
   ///</summary>
  public int ContractEffectiveDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contract Amount(PV1-26).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetContractAmount(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(26, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contract Amount (PV1-26).
   ///</summary>
  public NM[] GetContractAmount() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(26);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contract Amount (PV1-26).
   ///</summary>
  public int ContractAmountRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(26);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Contract Period(PV1-27).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public NM GetContractPeriod(int rep)
	{
			NM ret = null;
			try
			{
			IType t = this.GetField(27, rep);
				ret = (NM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Contract Period (PV1-27).
   ///</summary>
  public NM[] GetContractPeriod() {
     NM[] ret = null;
    try {
        IType[] t = this.GetField(27);  
        ret = new NM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (NM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Contract Period (PV1-27).
   ///</summary>
  public int ContractPeriodRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(27);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Interest Code(PV1-28).
	///</summary>
	public CWE InterestCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transfer to Bad Debt Code(PV1-29).
	///</summary>
	public CWE TransferToBadDebtCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transfer to Bad Debt Date(PV1-30).
	///</summary>
	public DT TransferToBadDebtDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bad Debt Agency Code(PV1-31).
	///</summary>
	public CWE BadDebtAgencyCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bad Debt Transfer Amount(PV1-32).
	///</summary>
	public NM BadDebtTransferAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bad Debt Recovery Amount(PV1-33).
	///</summary>
	public NM BadDebtRecoveryAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Delete Account Indicator(PV1-34).
	///</summary>
	public CWE DeleteAccountIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Delete Account Date(PV1-35).
	///</summary>
	public DT DeleteAccountDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Discharge Disposition(PV1-36).
	///</summary>
	public CWE DischargeDisposition
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Discharged to Location(PV1-37).
	///</summary>
	public DLD DischargedToLocation
	{
		get{
			DLD ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (DLD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Diet Type(PV1-38).
	///</summary>
	public CWE DietType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Servicing Facility(PV1-39).
	///</summary>
	public CWE ServicingFacility
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bed Status(PV1-40).
	///</summary>
	public CWE BedStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Account Status(PV1-41).
	///</summary>
	public CWE AccountStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pending Location(PV1-42).
	///</summary>
	public PL PendingLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prior Temporary Location(PV1-43).
	///</summary>
	public PL PriorTemporaryLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Admit Date/Time(PV1-44).
	///</summary>
	public DTM AdmitDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Discharge Date/Time(PV1-45).
	///</summary>
	public DTM DischargeDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(45, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Current Patient Balance(PV1-46).
	///</summary>
	public NM CurrentPatientBalance
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(46, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Charges(PV1-47).
	///</summary>
	public NM TotalCharges
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Adjustments(PV1-48).
	///</summary>
	public NM TotalAdjustments
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Payments(PV1-49).
	///</summary>
	public NM TotalPayments
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(49, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alternate Visit ID(PV1-50).
	///</summary>
	public CX AlternateVisitID
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(50, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Visit Indicator(PV1-51).
	///</summary>
	public CWE VisitIndicator
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(51, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Other Healthcare Provider(PV1-52).
	///</summary>
	public - OtherHealthcareProvider
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(52, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Service Episode Description(PV1-53).
	///</summary>
	public ST ServiceEpisodeDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(53, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Service Episode Identifier(PV1-54).
	///</summary>
	public CX ServiceEpisodeIdentifier
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(54, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PV2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PV2 message segment. 
/// This segment has the following fields:<ol>
///<li>PV2-1: Prior Pending Location (PL)</li>
///<li>PV2-2: Accommodation Code (CWE)</li>
///<li>PV2-3: Admit Reason (CWE)</li>
///<li>PV2-4: Transfer Reason (CWE)</li>
///<li>PV2-5: Patient Valuables (ST)</li>
///<li>PV2-6: Patient Valuables Location (ST)</li>
///<li>PV2-7: Visit User Code (CWE)</li>
///<li>PV2-8: Expected Admit Date/Time (DTM)</li>
///<li>PV2-9: Expected Discharge Date/Time (DTM)</li>
///<li>PV2-10: Estimated Length of Inpatient Stay (NM)</li>
///<li>PV2-11: Actual Length of Inpatient Stay (NM)</li>
///<li>PV2-12: Visit Description (ST)</li>
///<li>PV2-13: Referral Source Code (XCN)</li>
///<li>PV2-14: Previous Service Date (DT)</li>
///<li>PV2-15: Employment Illness Related Indicator (ID)</li>
///<li>PV2-16: Purge Status Code (CWE)</li>
///<li>PV2-17: Purge Status Date (DT)</li>
///<li>PV2-18: Special Program Code (CWE)</li>
///<li>PV2-19: Retention Indicator (ID)</li>
///<li>PV2-20: Expected Number of Insurance Plans (NM)</li>
///<li>PV2-21: Visit Publicity Code (CWE)</li>
///<li>PV2-22: Visit Protection Indicator (ID)</li>
///<li>PV2-23: Clinic Organization Name (XON)</li>
///<li>PV2-24: Patient Status Code (CWE)</li>
///<li>PV2-25: Visit Priority Code (CWE)</li>
///<li>PV2-26: Previous Treatment Date (DT)</li>
///<li>PV2-27: Expected Discharge Disposition (CWE)</li>
///<li>PV2-28: Signature on File Date (DT)</li>
///<li>PV2-29: First Similar Illness Date (DT)</li>
///<li>PV2-30: Patient Charge Adjustment Code (CWE)</li>
///<li>PV2-31: Recurring Service Code (CWE)</li>
///<li>PV2-32: Billing Media Code (ID)</li>
///<li>PV2-33: Expected Surgery Date and Time (DTM)</li>
///<li>PV2-34: Military Partnership Code (ID)</li>
///<li>PV2-35: Military Non-Availability Code (ID)</li>
///<li>PV2-36: Newborn Baby Indicator (ID)</li>
///<li>PV2-37: Baby Detained Indicator (ID)</li>
///<li>PV2-38: Mode of Arrival Code (CWE)</li>
///<li>PV2-39: Recreational Drug Use Code (CWE)</li>
///<li>PV2-40: Admission Level of Care Code (CWE)</li>
///<li>PV2-41: Precaution Code (CWE)</li>
///<li>PV2-42: Patient Condition Code (CWE)</li>
///<li>PV2-43: Living Will Code (CWE)</li>
///<li>PV2-44: Organ Donor Code (CWE)</li>
///<li>PV2-45: Advance Directive Code (CWE)</li>
///<li>PV2-46: Patient Status Effective Date (DT)</li>
///<li>PV2-47: Expected LOA Return Date/Time (DTM)</li>
///<li>PV2-48: Expected Pre-admission Testing Date/Time (DTM)</li>
///<li>PV2-49: Notify Clergy Code (CWE)</li>
///<li>PV2-50: Advance Directive Last Verified Date (DT)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PV2 : AbstractSegment  {

  /**
   * Creates a PV2 (Patient Visit - Additional Information) segment object that belongs to the given 
   * message.  
   */
	public PV2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Prior Pending Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Accommodation Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Admit Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Transfer Reason");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Patient Valuables");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Patient Valuables Location");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Visit User Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected Admit Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected Discharge Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Estimated Length of Inpatient Stay");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Actual Length of Inpatient Stay");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Visit Description");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Referral Source Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Previous Service Date");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Employment Illness Related Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Purge Status Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Purge Status Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Special Program Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Retention Indicator");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Expected Number of Insurance Plans");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Visit Publicity Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Visit Protection Indicator");
       this.add(typeof(XON), false, 0, 0, new System.Object[]{message}, "Clinic Organization Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Status Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Visit Priority Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Previous Treatment Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Expected Discharge Disposition");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Signature on File Date");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "First Similar Illness Date");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Charge Adjustment Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Recurring Service Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Billing Media Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected Surgery Date and Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Military Partnership Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Military Non-Availability Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Newborn Baby Indicator");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Baby Detained Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Mode of Arrival Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Recreational Drug Use Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Admission Level of Care Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Precaution Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Patient Condition Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Living Will Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Organ Donor Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Advance Directive Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Patient Status Effective Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected LOA Return Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expected Pre-admission Testing Date/Time");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Notify Clergy Code");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Advance Directive Last Verified Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Prior Pending Location(PV2-1).
	///</summary>
	public PL PriorPendingLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accommodation Code(PV2-2).
	///</summary>
	public CWE AccommodationCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Admit Reason(PV2-3).
	///</summary>
	public CWE AdmitReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transfer Reason(PV2-4).
	///</summary>
	public CWE TransferReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Patient Valuables(PV2-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetPatientValuables(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Valuables (PV2-5).
   ///</summary>
  public ST[] GetPatientValuables() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Valuables (PV2-5).
   ///</summary>
  public int PatientValuablesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Valuables Location(PV2-6).
	///</summary>
	public ST PatientValuablesLocation
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Visit User Code(PV2-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetVisitUserCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Visit User Code (PV2-7).
   ///</summary>
  public CWE[] GetVisitUserCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Visit User Code (PV2-7).
   ///</summary>
  public int VisitUserCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Expected Admit Date/Time(PV2-8).
	///</summary>
	public DTM ExpectedAdmitDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Discharge Date/Time(PV2-9).
	///</summary>
	public DTM ExpectedDischargeDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Estimated Length of Inpatient Stay(PV2-10).
	///</summary>
	public NM EstimatedLengthOfInpatientStay
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Length of Inpatient Stay(PV2-11).
	///</summary>
	public NM ActualLengthOfInpatientStay
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Visit Description(PV2-12).
	///</summary>
	public ST VisitDescription
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Referral Source Code(PV2-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetReferralSourceCode(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Referral Source Code (PV2-13).
   ///</summary>
  public XCN[] GetReferralSourceCode() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Referral Source Code (PV2-13).
   ///</summary>
  public int ReferralSourceCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Previous Service Date(PV2-14).
	///</summary>
	public DT PreviousServiceDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Employment Illness Related Indicator(PV2-15).
	///</summary>
	public ID EmploymentIllnessRelatedIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Purge Status Code(PV2-16).
	///</summary>
	public CWE PurgeStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Purge Status Date(PV2-17).
	///</summary>
	public DT PurgeStatusDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Special Program Code(PV2-18).
	///</summary>
	public CWE SpecialProgramCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Retention Indicator(PV2-19).
	///</summary>
	public ID RetentionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Number of Insurance Plans(PV2-20).
	///</summary>
	public NM ExpectedNumberOfInsurancePlans
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Visit Publicity Code(PV2-21).
	///</summary>
	public CWE VisitPublicityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Visit Protection Indicator(PV2-22).
	///</summary>
	public ID VisitProtectionIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Clinic Organization Name(PV2-23).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetClinicOrganizationName(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(23, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Clinic Organization Name (PV2-23).
   ///</summary>
  public XON[] GetClinicOrganizationName() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(23);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Clinic Organization Name (PV2-23).
   ///</summary>
  public int ClinicOrganizationNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(23);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Status Code(PV2-24).
	///</summary>
	public CWE PatientStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Visit Priority Code(PV2-25).
	///</summary>
	public CWE VisitPriorityCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Previous Treatment Date(PV2-26).
	///</summary>
	public DT PreviousTreatmentDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Discharge Disposition(PV2-27).
	///</summary>
	public CWE ExpectedDischargeDisposition
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Signature on File Date(PV2-28).
	///</summary>
	public DT SignatureOnFileDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns First Similar Illness Date(PV2-29).
	///</summary>
	public DT FirstSimilarIllnessDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Charge Adjustment Code(PV2-30).
	///</summary>
	public CWE PatientChargeAdjustmentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Recurring Service Code(PV2-31).
	///</summary>
	public CWE RecurringServiceCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Billing Media Code(PV2-32).
	///</summary>
	public ID BillingMediaCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Surgery Date and Time(PV2-33).
	///</summary>
	public DTM ExpectedSurgeryDateAndTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Partnership Code(PV2-34).
	///</summary>
	public ID MilitaryPartnershipCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Military Non-Availability Code(PV2-35).
	///</summary>
	public ID MilitaryNonAvailabilityCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Newborn Baby Indicator(PV2-36).
	///</summary>
	public ID NewbornBabyIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Baby Detained Indicator(PV2-37).
	///</summary>
	public ID BabyDetainedIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Mode of Arrival Code(PV2-38).
	///</summary>
	public CWE ModeOfArrivalCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Recreational Drug Use Code(PV2-39).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetRecreationalDrugUseCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Recreational Drug Use Code (PV2-39).
   ///</summary>
  public CWE[] GetRecreationalDrugUseCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(39);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Recreational Drug Use Code (PV2-39).
   ///</summary>
  public int RecreationalDrugUseCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(39);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Admission Level of Care Code(PV2-40).
	///</summary>
	public CWE AdmissionLevelOfCareCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Precaution Code(PV2-41).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPrecautionCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(41, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Precaution Code (PV2-41).
   ///</summary>
  public CWE[] GetPrecautionCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(41);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Precaution Code (PV2-41).
   ///</summary>
  public int PrecautionCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(41);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Condition Code(PV2-42).
	///</summary>
	public CWE PatientConditionCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Living Will Code(PV2-43).
	///</summary>
	public CWE LivingWillCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Organ Donor Code(PV2-44).
	///</summary>
	public CWE OrganDonorCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Advance Directive Code(PV2-45).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAdvanceDirectiveCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(45, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Advance Directive Code (PV2-45).
   ///</summary>
  public CWE[] GetAdvanceDirectiveCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(45);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Advance Directive Code (PV2-45).
   ///</summary>
  public int AdvanceDirectiveCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(45);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Patient Status Effective Date(PV2-46).
	///</summary>
	public DT PatientStatusEffectiveDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(46, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected LOA Return Date/Time(PV2-47).
	///</summary>
	public DTM ExpectedLOAReturnDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(47, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Pre-admission Testing Date/Time(PV2-48).
	///</summary>
	public DTM ExpectedPreAdmissionTestingDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(48, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Notify Clergy Code(PV2-49).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetNotifyClergyCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(49, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Notify Clergy Code (PV2-49).
   ///</summary>
  public CWE[] GetNotifyClergyCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(49);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Notify Clergy Code (PV2-49).
   ///</summary>
  public int NotifyClergyCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(49);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Advance Directive Last Verified Date(PV2-50).
	///</summary>
	public DT AdvanceDirectiveLastVerifiedDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(50, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\PYE.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 PYE message segment. 
/// This segment has the following fields:<ol>
///<li>PYE-1: Set ID - PYE (SI)</li>
///<li>PYE-2: Payee Type (CWE)</li>
///<li>PYE-3: Payee Relationship to Invoice (Patient) (CWE)</li>
///<li>PYE-4: Payee Identification List (XON)</li>
///<li>PYE-5: Payee Person Name (XPN)</li>
///<li>PYE-6: Payee Address (XAD)</li>
///<li>PYE-7: Payment Method (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class PYE : AbstractSegment  {

  /**
   * Creates a PYE (Payee Information) segment object that belongs to the given 
   * message.  
   */
	public PYE(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - PYE");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Payee Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Payee Relationship to Invoice (Patient)");
       this.add(typeof(XON), false, 5, 0, new System.Object[]{message}, "Payee Identification List");
       this.add(typeof(XPN), false, 4, 0, new System.Object[]{message}, "Payee Person Name");
       this.add(typeof(XAD), false, 4, 0, new System.Object[]{message}, "Payee Address");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Payment Method");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - PYE(PYE-1).
	///</summary>
	public SI SetIDPYE
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payee Type(PYE-2).
	///</summary>
	public CWE PayeeType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Payee Relationship to Invoice (Patient)(PYE-3).
	///</summary>
	public CWE PayeeRelationshipToInvoicePatient
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Payee Identification List(PYE-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XON GetPayeeIdentificationList(int rep)
	{
			XON ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XON)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Payee Identification List (PYE-4).
   ///</summary>
  public XON[] GetPayeeIdentificationList() {
     XON[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XON[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XON)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Payee Identification List (PYE-4).
   ///</summary>
  public int PayeeIdentificationListRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Payee Person Name(PYE-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetPayeePersonName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Payee Person Name (PYE-5).
   ///</summary>
  public XPN[] GetPayeePersonName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Payee Person Name (PYE-5).
   ///</summary>
  public int PayeePersonNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Payee Address(PYE-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetPayeeAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Payee Address (PYE-6).
   ///</summary>
  public XAD[] GetPayeeAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Payee Address (PYE-6).
   ///</summary>
  public int PayeeAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Payment Method(PYE-7).
	///</summary>
	public CWE PaymentMethod
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\QAK.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 QAK message segment. 
/// This segment has the following fields:<ol>
///<li>QAK-1: Query Tag (ST)</li>
///<li>QAK-2: Query Response Status (ID)</li>
///<li>QAK-3: Message Query Name (CWE)</li>
///<li>QAK-4: Hit Count Total (NM)</li>
///<li>QAK-5: This payload (NM)</li>
///<li>QAK-6: Hits remaining (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class QAK : AbstractSegment  {

  /**
   * Creates a QAK (Query Acknowledgment) segment object that belongs to the given 
   * message.  
   */
	public QAK(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Query Tag");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 208}, "Query Response Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Message Query Name");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Hit Count Total");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "This payload");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Hits remaining");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Query Tag(QAK-1).
	///</summary>
	public ST QueryTag
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Query Response Status(QAK-2).
	///</summary>
	public ID QueryResponseStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Query Name(QAK-3).
	///</summary>
	public CWE MessageQueryName
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Hit Count Total(QAK-4).
	///</summary>
	public NM HitCountTotal
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns This payload(QAK-5).
	///</summary>
	public NM ThisPayload
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Hits remaining(QAK-6).
	///</summary>
	public NM HitsRemaining
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\QID.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 QID message segment. 
/// This segment has the following fields:<ol>
///<li>QID-1: Query Tag (ST)</li>
///<li>QID-2: Message Query Name (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class QID : AbstractSegment  {

  /**
   * Creates a QID (Query Identification) segment object that belongs to the given 
   * message.  
   */
	public QID(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Query Tag");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Message Query Name");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Query Tag(QID-1).
	///</summary>
	public ST QueryTag
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Message Query Name(QID-2).
	///</summary>
	public CWE MessageQueryName
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\QPD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 QPD message segment. 
/// This segment has the following fields:<ol>
///<li>QPD-1: Message Query Name (CWE)</li>
///<li>QPD-2: Query Tag (ST)</li>
///<li>QPD-3: User Parameters (in successive fields) (varies)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class QPD : AbstractSegment  {

  /**
   * Creates a QPD (Query Parameter Definition) segment object that belongs to the given 
   * message.  
   */
	public QPD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Message Query Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Query Tag");
       this.add(typeof(Varies), false, 1, 0, new System.Object[]{message}, "User Parameters (in successive fields)");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Message Query Name(QPD-1).
	///</summary>
	public CWE MessageQueryName
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Query Tag(QPD-2).
	///</summary>
	public ST QueryTag
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns User Parameters (in successive fields)(QPD-3).
	///</summary>
	public Varies UserParametersInsuccessivefields
	{
		get{
			Varies ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (Varies)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\QRD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 QRD message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class QRD : AbstractSegment  {

  /**
   * Creates a QRD () segment object that belongs to the given 
   * message.  
   */
	public QRD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\QRF.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 QRF message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class QRF : AbstractSegment  {

  /**
   * Creates a QRF () segment object that belongs to the given 
   * message.  
   */
	public QRF(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\QRI.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 QRI message segment. 
/// This segment has the following fields:<ol>
///<li>QRI-1: Candidate Confidence (NM)</li>
///<li>QRI-2: Match Reason Code (CWE)</li>
///<li>QRI-3: Algorithm Descriptor (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class QRI : AbstractSegment  {

  /**
   * Creates a QRI (Query Response Instance) segment object that belongs to the given 
   * message.  
   */
	public QRI(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Candidate Confidence");
       this.add(typeof(CWE), false, 0, 2, new System.Object[]{message}, "Match Reason Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Algorithm Descriptor");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Candidate Confidence(QRI-1).
	///</summary>
	public NM CandidateConfidence
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Match Reason Code(QRI-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetMatchReasonCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Match Reason Code (QRI-2).
   ///</summary>
  public CWE[] GetMatchReasonCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Match Reason Code (QRI-2).
   ///</summary>
  public int MatchReasonCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Algorithm Descriptor(QRI-3).
	///</summary>
	public CWE AlgorithmDescriptor
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RCP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RCP message segment. 
/// This segment has the following fields:<ol>
///<li>RCP-1: Query Priority (ID)</li>
///<li>RCP-2: Quantity Limited Request (CQ)</li>
///<li>RCP-3: Response Modality (CNE)</li>
///<li>RCP-4: Execution and Delivery Time (DTM)</li>
///<li>RCP-5: Modify Indicator (ID)</li>
///<li>RCP-6: Sort-by Field (SRT)</li>
///<li>RCP-7: Segment group inclusion (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RCP : AbstractSegment  {

  /**
   * Creates a RCP (Response Control Parameter) segment object that belongs to the given 
   * message.  
   */
	public RCP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 91}, "Query Priority");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Quantity Limited Request");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Response Modality");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Execution and Delivery Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 395}, "Modify Indicator");
       this.add(typeof(SRT), false, 0, 0, new System.Object[]{message}, "Sort-by Field");
       this.add(typeof(ID), false, 0, 256, new System.Object[]{message, 391}, "Segment group inclusion");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Query Priority(RCP-1).
	///</summary>
	public ID QueryPriority
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity Limited Request(RCP-2).
	///</summary>
	public CQ QuantityLimitedRequest
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Response Modality(RCP-3).
	///</summary>
	public CNE ResponseModality
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Execution and Delivery Time(RCP-4).
	///</summary>
	public DTM ExecutionAndDeliveryTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Modify Indicator(RCP-5).
	///</summary>
	public ID ModifyIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Sort-by Field(RCP-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public SRT GetSortByField(int rep)
	{
			SRT ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (SRT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Sort-by Field (RCP-6).
   ///</summary>
  public SRT[] GetSortByField() {
     SRT[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new SRT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (SRT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Sort-by Field (RCP-6).
   ///</summary>
  public int SortByFieldRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Segment group inclusion(RCP-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ID GetSegmentGroupInclusion(int rep)
	{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (ID)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Segment group inclusion (RCP-7).
   ///</summary>
  public ID[] GetSegmentGroupInclusion() {
     ID[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new ID[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ID)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Segment group inclusion (RCP-7).
   ///</summary>
  public int SegmentGroupInclusionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\RDF.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RDF message segment. 
/// This segment has the following fields:<ol>
///<li>RDF-1: Number of Columns per Row (NM)</li>
///<li>RDF-2: Column Description (RCD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RDF : AbstractSegment  {

  /**
   * Creates a RDF (Table Row Definition) segment object that belongs to the given 
   * message.  
   */
	public RDF(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Number of Columns per Row");
       this.add(typeof(RCD), true, 0, 0, new System.Object[]{message}, "Column Description");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Number of Columns per Row(RDF-1).
	///</summary>
	public NM NumberOfColumnsPerRow
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Column Description(RDF-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public RCD GetColumnDescription(int rep)
	{
			RCD ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (RCD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Column Description (RDF-2).
   ///</summary>
  public RCD[] GetColumnDescription() {
     RCD[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new RCD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (RCD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Column Description (RDF-2).
   ///</summary>
  public int ColumnDescriptionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\RDT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RDT message segment. 
/// This segment has the following fields:<ol>
///<li>RDT-1: Column Value (varies)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RDT : AbstractSegment  {

  /**
   * Creates a RDT (Table Row Data) segment object that belongs to the given 
   * message.  
   */
	public RDT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(Varies), true, 1, 0, new System.Object[]{message}, "Column Value");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Column Value(RDT-1).
	///</summary>
	public Varies ColumnValue
	{
		get{
			Varies ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (Varies)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\REL.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 REL message segment. 
/// This segment has the following fields:<ol>
///<li>REL-1: Set ID -REL (SI)</li>
///<li>REL-2: Relationship Type (CWE)</li>
///<li>REL-3: This Relationship Instance Identifier (EI)</li>
///<li>REL-4: Source Information Instance Identifier (EI)</li>
///<li>REL-5: Target Information Instance Identifier (EI)</li>
///<li>REL-6: Asserting Entity Instance ID (EI)</li>
///<li>REL-7: Asserting Person (XCN)</li>
///<li>REL-8: Asserting Organization (XON)</li>
///<li>REL-9: Assertor Address (XAD)</li>
///<li>REL-10: Assertor Contact (XTN)</li>
///<li>REL-11: Assertion Date Range (DR)</li>
///<li>REL-12: Negation Indicator (ID)</li>
///<li>REL-13: Certainty of Relationship (CWE)</li>
///<li>REL-14: Priority No (NM)</li>
///<li>REL-15: Priority  Sequence No (rel preference for consideration) (NM)</li>
///<li>REL-16: Separability Indicator (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class REL : AbstractSegment  {

  /**
   * Creates a REL (Clinical Relationship Segment) segment object that belongs to the given 
   * message.  
   */
	public REL(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID -REL");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Relationship Type");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "This Relationship Instance Identifier");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Source Information Instance Identifier");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Target Information Instance Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Asserting Entity Instance ID");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Asserting Person");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Asserting Organization");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Assertor Address");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Assertor Contact");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Assertion Date Range");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Negation Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Certainty of Relationship");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Priority No");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Priority  Sequence No (rel preference for consideration)");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Separability Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID -REL(REL-1).
	///</summary>
	public SI SetIDREL
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Relationship Type(REL-2).
	///</summary>
	public CWE RelationshipType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns This Relationship Instance Identifier(REL-3).
	///</summary>
	public EI ThisRelationshipInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Source Information Instance Identifier(REL-4).
	///</summary>
	public EI SourceInformationInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Target Information Instance Identifier(REL-5).
	///</summary>
	public EI TargetInformationInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Asserting Entity Instance ID(REL-6).
	///</summary>
	public EI AssertingEntityInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Asserting Person(REL-7).
	///</summary>
	public XCN AssertingPerson
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Asserting Organization(REL-8).
	///</summary>
	public XON AssertingOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Assertor Address(REL-9).
	///</summary>
	public XAD AssertorAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Assertor Contact(REL-10).
	///</summary>
	public XTN AssertorContact
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Assertion Date Range(REL-11).
	///</summary>
	public DR AssertionDateRange
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Negation Indicator(REL-12).
	///</summary>
	public ID NegationIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Certainty of Relationship(REL-13).
	///</summary>
	public CWE CertaintyOfRelationship
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Priority No(REL-14).
	///</summary>
	public NM PriorityNo
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Priority  Sequence No (rel preference for consideration)(REL-15).
	///</summary>
	public NM PrioritySequenceNoRelpreferenceforconsideration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Separability Indicator(REL-16).
	///</summary>
	public ID SeparabilityIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RF1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RF1 message segment. 
/// This segment has the following fields:<ol>
///<li>RF1-1: Referral Status (CWE)</li>
///<li>RF1-2: Referral Priority (CWE)</li>
///<li>RF1-3: Referral Type (CWE)</li>
///<li>RF1-4: Referral Disposition (CWE)</li>
///<li>RF1-5: Referral Category (CWE)</li>
///<li>RF1-6: Originating Referral Identifier (EI)</li>
///<li>RF1-7: Effective Date (DTM)</li>
///<li>RF1-8: Expiration Date (DTM)</li>
///<li>RF1-9: Process Date (DTM)</li>
///<li>RF1-10: Referral Reason (CWE)</li>
///<li>RF1-11: External Referral Identifier (EI)</li>
///<li>RF1-12: Referral Documentation Completion Status (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RF1 : AbstractSegment  {

  /**
   * Creates a RF1 (Referral Information) segment object that belongs to the given 
   * message.  
   */
	public RF1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Referral Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Referral Priority");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Referral Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Referral Disposition");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Referral Category");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Originating Referral Identifier");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Effective Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Expiration Date");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Process Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Referral Reason");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "External Referral Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Referral Documentation Completion Status");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Referral Status(RF1-1).
	///</summary>
	public CWE ReferralStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Referral Priority(RF1-2).
	///</summary>
	public CWE ReferralPriority
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Referral Type(RF1-3).
	///</summary>
	public CWE ReferralType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Referral Disposition(RF1-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetReferralDisposition(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Referral Disposition (RF1-4).
   ///</summary>
  public CWE[] GetReferralDisposition() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Referral Disposition (RF1-4).
   ///</summary>
  public int ReferralDispositionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Referral Category(RF1-5).
	///</summary>
	public CWE ReferralCategory
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Originating Referral Identifier(RF1-6).
	///</summary>
	public EI OriginatingReferralIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Effective Date(RF1-7).
	///</summary>
	public DTM EffectiveDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expiration Date(RF1-8).
	///</summary>
	public DTM ExpirationDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Process Date(RF1-9).
	///</summary>
	public DTM ProcessDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Referral Reason(RF1-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetReferralReason(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Referral Reason (RF1-10).
   ///</summary>
  public CWE[] GetReferralReason() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Referral Reason (RF1-10).
   ///</summary>
  public int ReferralReasonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of External Referral Identifier(RF1-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetExternalReferralIdentifier(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of External Referral Identifier (RF1-11).
   ///</summary>
  public EI[] GetExternalReferralIdentifier() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of External Referral Identifier (RF1-11).
   ///</summary>
  public int ExternalReferralIdentifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Referral Documentation Completion Status(RF1-12).
	///</summary>
	public CWE ReferralDocumentationCompletionStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RFI.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RFI message segment. 
/// This segment has the following fields:<ol>
///<li>RFI-1: Request Date (DTM)</li>
///<li>RFI-2: Response Due Date (DTM)</li>
///<li>RFI-3: Patient Consent (ID)</li>
///<li>RFI-4: Date Additional Information Was Submitted (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RFI : AbstractSegment  {

  /**
   * Creates a RFI (Request for Information) segment object that belongs to the given 
   * message.  
   */
	public RFI(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Request Date");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Response Due Date");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Patient Consent");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date Additional Information Was Submitted");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Request Date(RFI-1).
	///</summary>
	public DTM RequestDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Response Due Date(RFI-2).
	///</summary>
	public DTM ResponseDueDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Patient Consent(RFI-3).
	///</summary>
	public ID PatientConsent
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Additional Information Was Submitted(RFI-4).
	///</summary>
	public DTM DateAdditionalInformationWasSubmitted
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RGS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RGS message segment. 
/// This segment has the following fields:<ol>
///<li>RGS-1: Set ID - RGS (SI)</li>
///<li>RGS-2: Segment Action Code (ID)</li>
///<li>RGS-3: Resource Group ID (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RGS : AbstractSegment  {

  /**
   * Creates a RGS (Resource Group) segment object that belongs to the given 
   * message.  
   */
	public RGS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID - RGS");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Segment Action Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Resource Group ID");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - RGS(RGS-1).
	///</summary>
	public SI SetIDRGS
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Action Code(RGS-2).
	///</summary>
	public ID SegmentActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Resource Group ID(RGS-3).
	///</summary>
	public CWE ResourceGroupID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RMI.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RMI message segment. 
/// This segment has the following fields:<ol>
///<li>RMI-1: Risk Management Incident Code (CWE)</li>
///<li>RMI-2: Date/Time Incident (DTM)</li>
///<li>RMI-3: Incident Type Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RMI : AbstractSegment  {

  /**
   * Creates a RMI (Risk Management Incident) segment object that belongs to the given 
   * message.  
   */
	public RMI(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Risk Management Incident Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time Incident");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Incident Type Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Risk Management Incident Code(RMI-1).
	///</summary>
	public CWE RiskManagementIncidentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Incident(RMI-2).
	///</summary>
	public DTM DateTimeIncident
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Incident Type Code(RMI-3).
	///</summary>
	public CWE IncidentTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ROL.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ROL message segment. 
/// This segment has the following fields:<ol>
///<li>ROL-1: Role Instance ID (EI)</li>
///<li>ROL-2: Action Code (ID)</li>
///<li>ROL-3: Role-ROL (CWE)</li>
///<li>ROL-4: Role Person (XCN)</li>
///<li>ROL-5: Role Begin Date/Time (DTM)</li>
///<li>ROL-6: Role End Date/Time (DTM)</li>
///<li>ROL-7: Role Duration (CWE)</li>
///<li>ROL-8: Role Action Reason (CWE)</li>
///<li>ROL-9: Provider Type (CWE)</li>
///<li>ROL-10: Organization Unit Type (CWE)</li>
///<li>ROL-11: Office/Home Address/Birthplace (XAD)</li>
///<li>ROL-12: Phone (XTN)</li>
///<li>ROL-13: Person's Location (PL)</li>
///<li>ROL-14: Organization (XON)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ROL : AbstractSegment  {

  /**
   * Creates a ROL (Role) segment object that belongs to the given 
   * message.  
   */
	public ROL(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Role Instance ID");
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 287}, "Action Code");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Role-ROL");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Role Person");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Role Begin Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Role End Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Role Duration");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Role Action Reason");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Provider Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Organization Unit Type");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Office/Home Address/Birthplace");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Phone");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Person's Location");
       this.add(typeof(XON), false, 1, 0, new System.Object[]{message}, "Organization");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Role Instance ID(ROL-1).
	///</summary>
	public EI RoleInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Code(ROL-2).
	///</summary>
	public ID ActionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Role-ROL(ROL-3).
	///</summary>
	public CWE RoleROL
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Role Person(ROL-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetRolePerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Role Person (ROL-4).
   ///</summary>
  public XCN[] GetRolePerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Role Person (ROL-4).
   ///</summary>
  public int RolePersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Role Begin Date/Time(ROL-5).
	///</summary>
	public DTM RoleBeginDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Role End Date/Time(ROL-6).
	///</summary>
	public DTM RoleEndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Role Duration(ROL-7).
	///</summary>
	public CWE RoleDuration
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Role Action Reason(ROL-8).
	///</summary>
	public CWE RoleActionReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Provider Type(ROL-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProviderType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider Type (ROL-9).
   ///</summary>
  public CWE[] GetProviderType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider Type (ROL-9).
   ///</summary>
  public int ProviderTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Organization Unit Type(ROL-10).
	///</summary>
	public CWE OrganizationUnitType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Office/Home Address/Birthplace(ROL-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetOfficeHomeAddressBirthplace(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Office/Home Address/Birthplace (ROL-11).
   ///</summary>
  public XAD[] GetOfficeHomeAddressBirthplace() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Office/Home Address/Birthplace (ROL-11).
   ///</summary>
  public int OfficeHomeAddressBirthplaceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Phone(ROL-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPhone(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Phone (ROL-12).
   ///</summary>
  public XTN[] GetPhone() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Phone (ROL-12).
   ///</summary>
  public int PhoneRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Person's Location(ROL-13).
	///</summary>
	public PL PersonSLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Organization(ROL-14).
	///</summary>
	public XON Organization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RQ1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RQ1 message segment. 
/// This segment has the following fields:<ol>
///<li>RQ1-1: Anticipated Price (ST)</li>
///<li>RQ1-2: Manufacturer Identifier (CWE)</li>
///<li>RQ1-3: Manufacturer's Catalog (ST)</li>
///<li>RQ1-4: Vendor ID (CWE)</li>
///<li>RQ1-5: Vendor Catalog (ST)</li>
///<li>RQ1-6: Taxable (ID)</li>
///<li>RQ1-7: Substitute Allowed (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RQ1 : AbstractSegment  {

  /**
   * Creates a RQ1 (Requisition Detail-1) segment object that belongs to the given 
   * message.  
   */
	public RQ1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Anticipated Price");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Manufacturer Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Manufacturer's Catalog");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Vendor ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Vendor Catalog");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Taxable");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Substitute Allowed");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Anticipated Price(RQ1-1).
	///</summary>
	public ST AnticipatedPrice
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer Identifier(RQ1-2).
	///</summary>
	public CWE ManufacturerIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Manufacturer's Catalog(RQ1-3).
	///</summary>
	public ST ManufacturerSCatalog
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Vendor ID(RQ1-4).
	///</summary>
	public CWE VendorID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Vendor Catalog(RQ1-5).
	///</summary>
	public ST VendorCatalog
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Taxable(RQ1-6).
	///</summary>
	public ID Taxable
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Substitute Allowed(RQ1-7).
	///</summary>
	public ID SubstituteAllowed
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RQD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RQD message segment. 
/// This segment has the following fields:<ol>
///<li>RQD-1: Requisition Line Number (SI)</li>
///<li>RQD-2: Item Code - Internal (CWE)</li>
///<li>RQD-3: Item Code - External (CWE)</li>
///<li>RQD-4: Hospital Item Code (CWE)</li>
///<li>RQD-5: Requisition Quantity (NM)</li>
///<li>RQD-6: Requisition Unit of Measure (CWE)</li>
///<li>RQD-7: Cost Center Account Number (CX)</li>
///<li>RQD-8: Item Natural Account Code (CWE)</li>
///<li>RQD-9: Deliver To ID (CWE)</li>
///<li>RQD-10: Date Needed (DT)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RQD : AbstractSegment  {

  /**
   * Creates a RQD (Requisition Detail) segment object that belongs to the given 
   * message.  
   */
	public RQD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Requisition Line Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Code - Internal");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Code - External");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Hospital Item Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Requisition Quantity");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requisition Unit of Measure");
       this.add(typeof(CX), false, 1, 0, new System.Object[]{message}, "Cost Center Account Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Item Natural Account Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Deliver To ID");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Date Needed");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Requisition Line Number(RQD-1).
	///</summary>
	public SI RequisitionLineNumber
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Code - Internal(RQD-2).
	///</summary>
	public CWE ItemCodeInternal
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Code - External(RQD-3).
	///</summary>
	public CWE ItemCodeExternal
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Hospital Item Code(RQD-4).
	///</summary>
	public CWE HospitalItemCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requisition Quantity(RQD-5).
	///</summary>
	public NM RequisitionQuantity
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requisition Unit of Measure(RQD-6).
	///</summary>
	public CWE RequisitionUnitOfMeasure
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cost Center Account Number(RQD-7).
	///</summary>
	public CX CostCenterAccountNumber
	{
		get{
			CX ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Natural Account Code(RQD-8).
	///</summary>
	public CWE ItemNaturalAccountCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver To ID(RQD-9).
	///</summary>
	public CWE DeliverToID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Needed(RQD-10).
	///</summary>
	public DT DateNeeded
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RXA.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXA message segment. 
/// This segment has the following fields:<ol>
///<li>RXA-1: Give Sub-ID Counter (NM)</li>
///<li>RXA-2: Administration Sub-ID Counter (NM)</li>
///<li>RXA-3: Date/Time Start of Administration (DTM)</li>
///<li>RXA-4: Date/Time End of Administration (DTM)</li>
///<li>RXA-5: Administered Code (CWE)</li>
///<li>RXA-6: Administered Amount (NM)</li>
///<li>RXA-7: Administered Units (CWE)</li>
///<li>RXA-8: Administered Dosage Form (CWE)</li>
///<li>RXA-9: Administration Notes (CWE)</li>
///<li>RXA-10: Administering Provider (XCN)</li>
///<li>RXA-11: Administered-at Location (LA2)</li>
///<li>RXA-12: Administered Per (Time Unit) (ST)</li>
///<li>RXA-13: Administered Strength (NM)</li>
///<li>RXA-14: Administered Strength Units (CWE)</li>
///<li>RXA-15: Substance Lot Number (ST)</li>
///<li>RXA-16: Substance Expiration Date (DTM)</li>
///<li>RXA-17: Substance Manufacturer Name (CWE)</li>
///<li>RXA-18: Substance/Treatment Refusal Reason (CWE)</li>
///<li>RXA-19: Indication (CWE)</li>
///<li>RXA-20: Completion Status (ID)</li>
///<li>RXA-21: Action Code - RXA (ID)</li>
///<li>RXA-22: System Entry Date/Time (DTM)</li>
///<li>RXA-23: Administered Drug Strength Volume (NM)</li>
///<li>RXA-24: Administered Drug Strength Volume Units (CWE)</li>
///<li>RXA-25: Administered Barcode Identifier (CWE)</li>
///<li>RXA-26: Pharmacy Order Type (ID)</li>
///<li>RXA-27: Administer-at (PL)</li>
///<li>RXA-28: Administered-at Address (XAD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXA : AbstractSegment  {

  /**
   * Creates a RXA (Pharmacy/Treatment Administration) segment object that belongs to the given 
   * message.  
   */
	public RXA(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Give Sub-ID Counter");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Administration Sub-ID Counter");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/Time Start of Administration");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/Time End of Administration");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Administered Code");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Administered Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administered Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administered Dosage Form");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Administration Notes");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Administering Provider");
       this.add(typeof(LA2), false, 1, 0, new System.Object[]{message}, "Administered-at Location");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Administered Per (Time Unit)");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Administered Strength");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administered Strength Units");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Substance Lot Number");
       this.add(typeof(DTM), false, 0, 0, new System.Object[]{message}, "Substance Expiration Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Substance Manufacturer Name");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Substance/Treatment Refusal Reason");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Indication");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 322}, "Completion Status");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 206}, "Action Code - RXA");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "System Entry Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Administered Drug Strength Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administered Drug Strength Volume Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administered Barcode Identifier");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 480}, "Pharmacy Order Type");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Administer-at");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Administered-at Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Give Sub-ID Counter(RXA-1).
	///</summary>
	public NM GiveSubIDCounter
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administration Sub-ID Counter(RXA-2).
	///</summary>
	public NM AdministrationSubIDCounter
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Start of Administration(RXA-3).
	///</summary>
	public DTM DateTimeStartOfAdministration
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time End of Administration(RXA-4).
	///</summary>
	public DTM DateTimeEndOfAdministration
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Code(RXA-5).
	///</summary>
	public CWE AdministeredCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Amount(RXA-6).
	///</summary>
	public NM AdministeredAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Units(RXA-7).
	///</summary>
	public CWE AdministeredUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Dosage Form(RXA-8).
	///</summary>
	public CWE AdministeredDosageForm
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Administration Notes(RXA-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAdministrationNotes(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Administration Notes (RXA-9).
   ///</summary>
  public CWE[] GetAdministrationNotes() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Administration Notes (RXA-9).
   ///</summary>
  public int AdministrationNotesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Administering Provider(RXA-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetAdministeringProvider(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Administering Provider (RXA-10).
   ///</summary>
  public XCN[] GetAdministeringProvider() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Administering Provider (RXA-10).
   ///</summary>
  public int AdministeringProviderRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Administered-at Location(RXA-11).
	///</summary>
	public LA2 AdministeredAtLocation
	{
		get{
			LA2 ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (LA2)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Per (Time Unit)(RXA-12).
	///</summary>
	public ST AdministeredPerTimeUnit
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Strength(RXA-13).
	///</summary>
	public NM AdministeredStrength
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Strength Units(RXA-14).
	///</summary>
	public CWE AdministeredStrengthUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Substance Lot Number(RXA-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetSubstanceLotNumber(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Lot Number (RXA-15).
   ///</summary>
  public ST[] GetSubstanceLotNumber() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Lot Number (RXA-15).
   ///</summary>
  public int SubstanceLotNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance Expiration Date(RXA-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DTM GetSubstanceExpirationDate(int rep)
	{
			DTM ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (DTM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Expiration Date (RXA-16).
   ///</summary>
  public DTM[] GetSubstanceExpirationDate() {
     DTM[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new DTM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DTM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Expiration Date (RXA-16).
   ///</summary>
  public int SubstanceExpirationDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance Manufacturer Name(RXA-17).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSubstanceManufacturerName(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Manufacturer Name (RXA-17).
   ///</summary>
  public CWE[] GetSubstanceManufacturerName() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(17);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Manufacturer Name (RXA-17).
   ///</summary>
  public int SubstanceManufacturerNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(17);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance/Treatment Refusal Reason(RXA-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSubstanceTreatmentRefusalReason(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance/Treatment Refusal Reason (RXA-18).
   ///</summary>
  public CWE[] GetSubstanceTreatmentRefusalReason() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance/Treatment Refusal Reason (RXA-18).
   ///</summary>
  public int SubstanceTreatmentRefusalReasonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Indication(RXA-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetIndication(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Indication (RXA-19).
   ///</summary>
  public CWE[] GetIndication() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Indication (RXA-19).
   ///</summary>
  public int IndicationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Completion Status(RXA-20).
	///</summary>
	public ID CompletionStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Action Code - RXA(RXA-21).
	///</summary>
	public ID ActionCodeRXA
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns System Entry Date/Time(RXA-22).
	///</summary>
	public DTM SystemEntryDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Drug Strength Volume(RXA-23).
	///</summary>
	public NM AdministeredDrugStrengthVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Drug Strength Volume Units(RXA-24).
	///</summary>
	public CWE AdministeredDrugStrengthVolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered Barcode Identifier(RXA-25).
	///</summary>
	public CWE AdministeredBarcodeIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pharmacy Order Type(RXA-26).
	///</summary>
	public ID PharmacyOrderType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administer-at(RXA-27).
	///</summary>
	public PL AdministerAt
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administered-at Address(RXA-28).
	///</summary>
	public XAD AdministeredAtAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RXC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXC message segment. 
/// This segment has the following fields:<ol>
///<li>RXC-1: RX Component Type (ID)</li>
///<li>RXC-2: Component Code (CWE)</li>
///<li>RXC-3: Component Amount (NM)</li>
///<li>RXC-4: Component Units (CWE)</li>
///<li>RXC-5: Component Strength (NM)</li>
///<li>RXC-6: Component Strength Units (CWE)</li>
///<li>RXC-7: Supplementary Code (CWE)</li>
///<li>RXC-8: Component Drug Strength Volume (NM)</li>
///<li>RXC-9: Component Drug Strength Volume Units (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXC : AbstractSegment  {

  /**
   * Creates a RXC (Pharmacy/Treatment Component Order) segment object that belongs to the given 
   * message.  
   */
	public RXC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(ID), true, 1, 1, new System.Object[]{message, 166}, "RX Component Type");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Component Code");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Component Amount");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Component Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Component Strength");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Component Strength Units");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Supplementary Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Component Drug Strength Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Component Drug Strength Volume Units");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns RX Component Type(RXC-1).
	///</summary>
	public ID RXComponentType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Component Code(RXC-2).
	///</summary>
	public CWE ComponentCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Component Amount(RXC-3).
	///</summary>
	public NM ComponentAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Component Units(RXC-4).
	///</summary>
	public CWE ComponentUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Component Strength(RXC-5).
	///</summary>
	public NM ComponentStrength
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Component Strength Units(RXC-6).
	///</summary>
	public CWE ComponentStrengthUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Supplementary Code(RXC-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSupplementaryCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Supplementary Code (RXC-7).
   ///</summary>
  public CWE[] GetSupplementaryCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Supplementary Code (RXC-7).
   ///</summary>
  public int SupplementaryCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Component Drug Strength Volume(RXC-8).
	///</summary>
	public NM ComponentDrugStrengthVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Component Drug Strength Volume Units(RXC-9).
	///</summary>
	public CWE ComponentDrugStrengthVolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RXD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXD message segment. 
/// This segment has the following fields:<ol>
///<li>RXD-1: Dispense Sub-ID Counter (NM)</li>
///<li>RXD-2: Dispense/Give Code (CWE)</li>
///<li>RXD-3: Date/Time Dispensed (DTM)</li>
///<li>RXD-4: Actual Dispense Amount (NM)</li>
///<li>RXD-5: Actual Dispense Units (CWE)</li>
///<li>RXD-6: Actual Dosage Form (CWE)</li>
///<li>RXD-7: Prescription Number (ST)</li>
///<li>RXD-8: Number of Refills Remaining (NM)</li>
///<li>RXD-9: Dispense Notes (ST)</li>
///<li>RXD-10: Dispensing Provider (XCN)</li>
///<li>RXD-11: Substitution Status (ID)</li>
///<li>RXD-12: Total Daily Dose (CQ)</li>
///<li>RXD-13: Dispense-to Location (LA2)</li>
///<li>RXD-14: Needs Human Review (ID)</li>
///<li>RXD-15: Pharmacy/Treatment Supplier's Special Dispensing Instructions (CWE)</li>
///<li>RXD-16: Actual Strength (NM)</li>
///<li>RXD-17: Actual Strength Unit (CWE)</li>
///<li>RXD-18: Substance Lot Number (ST)</li>
///<li>RXD-19: Substance Expiration Date (DTM)</li>
///<li>RXD-20: Substance Manufacturer Name (CWE)</li>
///<li>RXD-21: Indication (CWE)</li>
///<li>RXD-22: Dispense Package Size (NM)</li>
///<li>RXD-23: Dispense Package Size Unit (CWE)</li>
///<li>RXD-24: Dispense Package Method (ID)</li>
///<li>RXD-25: Supplementary Code (CWE)</li>
///<li>RXD-26: Initiating Location (CWE)</li>
///<li>RXD-27: Packaging/Assembly Location (CWE)</li>
///<li>RXD-28: Actual Drug Strength Volume (NM)</li>
///<li>RXD-29: Actual Drug Strength Volume Units (CWE)</li>
///<li>RXD-30: Dispense to Pharmacy (CWE)</li>
///<li>RXD-31: Dispense to Pharmacy Address (XAD)</li>
///<li>RXD-32: Pharmacy Order Type (ID)</li>
///<li>RXD-33: Dispense Type (CWE)</li>
///<li>RXD-34: Pharmacy Phone Number (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXD : AbstractSegment  {

  /**
   * Creates a RXD (Pharmacy/Treatment Dispense) segment object that belongs to the given 
   * message.  
   */
	public RXD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Dispense Sub-ID Counter");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Dispense/Give Code");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Date/Time Dispensed");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Actual Dispense Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Actual Dispense Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Actual Dosage Form");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Prescription Number");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Refills Remaining");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Dispense Notes");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Dispensing Provider");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 167}, "Substitution Status");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Total Daily Dose");
       this.add(typeof(LA2), false, 1, 0, new System.Object[]{message}, "Dispense-to Location");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Needs Human Review");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Pharmacy/Treatment Supplier's Special Dispensing Instructions");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Actual Strength");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Actual Strength Unit");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Substance Lot Number");
       this.add(typeof(DTM), false, 0, 0, new System.Object[]{message}, "Substance Expiration Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Substance Manufacturer Name");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Indication");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Dispense Package Size");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispense Package Size Unit");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 321}, "Dispense Package Method");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Supplementary Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Initiating Location");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Packaging/Assembly Location");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Actual Drug Strength Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Actual Drug Strength Volume Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispense to Pharmacy");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Dispense to Pharmacy Address");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 480}, "Pharmacy Order Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispense Type");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Pharmacy Phone Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Dispense Sub-ID Counter(RXD-1).
	///</summary>
	public NM DispenseSubIDCounter
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense/Give Code(RXD-2).
	///</summary>
	public CWE DispenseGiveCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time Dispensed(RXD-3).
	///</summary>
	public DTM DateTimeDispensed
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Dispense Amount(RXD-4).
	///</summary>
	public NM ActualDispenseAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Dispense Units(RXD-5).
	///</summary>
	public CWE ActualDispenseUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Dosage Form(RXD-6).
	///</summary>
	public CWE ActualDosageForm
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Prescription Number(RXD-7).
	///</summary>
	public ST PrescriptionNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Refills Remaining(RXD-8).
	///</summary>
	public NM NumberOfRefillsRemaining
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Dispense Notes(RXD-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetDispenseNotes(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Dispense Notes (RXD-9).
   ///</summary>
  public ST[] GetDispenseNotes() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Dispense Notes (RXD-9).
   ///</summary>
  public int DispenseNotesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Dispensing Provider(RXD-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetDispensingProvider(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Dispensing Provider (RXD-10).
   ///</summary>
  public XCN[] GetDispensingProvider() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Dispensing Provider (RXD-10).
   ///</summary>
  public int DispensingProviderRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Substitution Status(RXD-11).
	///</summary>
	public ID SubstitutionStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Daily Dose(RXD-12).
	///</summary>
	public CQ TotalDailyDose
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense-to Location(RXD-13).
	///</summary>
	public LA2 DispenseToLocation
	{
		get{
			LA2 ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (LA2)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Needs Human Review(RXD-14).
	///</summary>
	public ID NeedsHumanReview
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmacy/Treatment Supplier's Special Dispensing Instructions(RXD-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPharmacyTreatmentSupplierSSpecialDispensingInstructions(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacy/Treatment Supplier's Special Dispensing Instructions (RXD-15).
   ///</summary>
  public CWE[] GetPharmacyTreatmentSupplierSSpecialDispensingInstructions() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacy/Treatment Supplier's Special Dispensing Instructions (RXD-15).
   ///</summary>
  public int PharmacyTreatmentSupplierSSpecialDispensingInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Actual Strength(RXD-16).
	///</summary>
	public NM ActualStrength
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Strength Unit(RXD-17).
	///</summary>
	public CWE ActualStrengthUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Substance Lot Number(RXD-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetSubstanceLotNumber(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Lot Number (RXD-18).
   ///</summary>
  public ST[] GetSubstanceLotNumber() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Lot Number (RXD-18).
   ///</summary>
  public int SubstanceLotNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance Expiration Date(RXD-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DTM GetSubstanceExpirationDate(int rep)
	{
			DTM ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (DTM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Expiration Date (RXD-19).
   ///</summary>
  public DTM[] GetSubstanceExpirationDate() {
     DTM[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new DTM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DTM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Expiration Date (RXD-19).
   ///</summary>
  public int SubstanceExpirationDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance Manufacturer Name(RXD-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSubstanceManufacturerName(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Manufacturer Name (RXD-20).
   ///</summary>
  public CWE[] GetSubstanceManufacturerName() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Manufacturer Name (RXD-20).
   ///</summary>
  public int SubstanceManufacturerNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Indication(RXD-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetIndication(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Indication (RXD-21).
   ///</summary>
  public CWE[] GetIndication() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Indication (RXD-21).
   ///</summary>
  public int IndicationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Dispense Package Size(RXD-22).
	///</summary>
	public NM DispensePackageSize
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Package Size Unit(RXD-23).
	///</summary>
	public CWE DispensePackageSizeUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Package Method(RXD-24).
	///</summary>
	public ID DispensePackageMethod
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Supplementary Code(RXD-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSupplementaryCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Supplementary Code (RXD-25).
   ///</summary>
  public CWE[] GetSupplementaryCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Supplementary Code (RXD-25).
   ///</summary>
  public int SupplementaryCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Initiating Location(RXD-26).
	///</summary>
	public CWE InitiatingLocation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Packaging/Assembly Location(RXD-27).
	///</summary>
	public CWE PackagingAssemblyLocation
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Drug Strength Volume(RXD-28).
	///</summary>
	public NM ActualDrugStrengthVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Actual Drug Strength Volume Units(RXD-29).
	///</summary>
	public CWE ActualDrugStrengthVolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense to Pharmacy(RXD-30).
	///</summary>
	public CWE DispenseToPharmacy
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense to Pharmacy Address(RXD-31).
	///</summary>
	public XAD DispenseToPharmacyAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pharmacy Order Type(RXD-32).
	///</summary>
	public ID PharmacyOrderType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Type(RXD-33).
	///</summary>
	public CWE DispenseType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmacy Phone Number(RXD-34).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPharmacyPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(34, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacy Phone Number (RXD-34).
   ///</summary>
  public XTN[] GetPharmacyPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(34);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacy Phone Number (RXD-34).
   ///</summary>
  public int PharmacyPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(34);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\RXE.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXE message segment. 
/// This segment has the following fields:<ol>
///<li>RXE-1: Quantity/Timing (-)</li>
///<li>RXE-2: Give Code (CWE)</li>
///<li>RXE-3: Give Amount - Minimum (NM)</li>
///<li>RXE-4: Give Amount - Maximum (NM)</li>
///<li>RXE-5: Give Units (CWE)</li>
///<li>RXE-6: Give Dosage Form (CWE)</li>
///<li>RXE-7: Provider's Administration Instructions (CWE)</li>
///<li>RXE-8: Deliver-to Location (LA1)</li>
///<li>RXE-9: Substitution Status (ID)</li>
///<li>RXE-10: Dispense Amount (NM)</li>
///<li>RXE-11: Dispense Units (CWE)</li>
///<li>RXE-12: Number Of Refills (NM)</li>
///<li>RXE-13: Ordering Provider's DEA Number (XCN)</li>
///<li>RXE-14: Pharmacist/Treatment Supplier's Verifier ID (XCN)</li>
///<li>RXE-15: Prescription Number (ST)</li>
///<li>RXE-16: Number of Refills Remaining (NM)</li>
///<li>RXE-17: Number of Refills/Doses Dispensed (NM)</li>
///<li>RXE-18: D/T of Most Recent Refill or Dose Dispensed (DTM)</li>
///<li>RXE-19: Total Daily Dose (CQ)</li>
///<li>RXE-20: Needs Human Review (ID)</li>
///<li>RXE-21: Pharmacy/Treatment Supplier's Special Dispensing Instructions (CWE)</li>
///<li>RXE-22: Give Per (Time Unit) (ST)</li>
///<li>RXE-23: Give Rate Amount (ST)</li>
///<li>RXE-24: Give Rate Units (CWE)</li>
///<li>RXE-25: Give Strength (NM)</li>
///<li>RXE-26: Give Strength Units (CWE)</li>
///<li>RXE-27: Give Indication (CWE)</li>
///<li>RXE-28: Dispense Package Size (NM)</li>
///<li>RXE-29: Dispense Package Size Unit (CWE)</li>
///<li>RXE-30: Dispense Package Method (ID)</li>
///<li>RXE-31: Supplementary Code (CWE)</li>
///<li>RXE-32: Original Order Date/Time (DTM)</li>
///<li>RXE-33: Give Drug Strength Volume (NM)</li>
///<li>RXE-34: Give Drug Strength Volume Units (CWE)</li>
///<li>RXE-35: Controlled Substance Schedule (CWE)</li>
///<li>RXE-36: Formulary Status (ID)</li>
///<li>RXE-37: Pharmaceutical Substance Alternative (CWE)</li>
///<li>RXE-38: Pharmacy of Most Recent Fill (CWE)</li>
///<li>RXE-39: Initial Dispense Amount (NM)</li>
///<li>RXE-40: Dispensing Pharmacy (CWE)</li>
///<li>RXE-41: Dispensing Pharmacy Address (XAD)</li>
///<li>RXE-42: Deliver-to Patient Location (PL)</li>
///<li>RXE-43: Deliver-to Address (XAD)</li>
///<li>RXE-44: Pharmacy Order Type (ID)</li>
///<li>RXE-45: Pharmacy Phone Number (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXE : AbstractSegment  {

  /**
   * Creates a RXE (Pharmacy/Treatment Encoded Order) segment object that belongs to the given 
   * message.  
   */
	public RXE(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Quantity/Timing");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Give Code");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Give Amount - Minimum");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Give Amount - Maximum");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Give Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Dosage Form");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Provider's Administration Instructions");
       this.add(typeof(LA1), false, 1, 0, new System.Object[]{message}, "Deliver-to Location");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 167}, "Substitution Status");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Dispense Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispense Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number Of Refills");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Ordering Provider's DEA Number");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Pharmacist/Treatment Supplier's Verifier ID");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Prescription Number");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Refills Remaining");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Refills/Doses Dispensed");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "D/T of Most Recent Refill or Dose Dispensed");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Total Daily Dose");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Needs Human Review");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Pharmacy/Treatment Supplier's Special Dispensing Instructions");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Give Per (Time Unit)");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Give Rate Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Rate Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Give Strength");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Strength Units");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Give Indication");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Dispense Package Size");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispense Package Size Unit");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 321}, "Dispense Package Method");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Supplementary Code");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Original Order Date/Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Give Drug Strength Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Drug Strength Volume Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Controlled Substance Schedule");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 478}, "Formulary Status");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Pharmaceutical Substance Alternative");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Pharmacy of Most Recent Fill");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Initial Dispense Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispensing Pharmacy");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Dispensing Pharmacy Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Deliver-to Patient Location");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Deliver-to Address");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 480}, "Pharmacy Order Type");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Pharmacy Phone Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Quantity/Timing(RXE-1).
	///</summary>
	public - QuantityTiming
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Code(RXE-2).
	///</summary>
	public CWE GiveCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Amount - Minimum(RXE-3).
	///</summary>
	public NM GiveAmountMinimum
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Amount - Maximum(RXE-4).
	///</summary>
	public NM GiveAmountMaximum
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Units(RXE-5).
	///</summary>
	public CWE GiveUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Dosage Form(RXE-6).
	///</summary>
	public CWE GiveDosageForm
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Provider's Administration Instructions(RXE-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProviderSAdministrationInstructions(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider's Administration Instructions (RXE-7).
   ///</summary>
  public CWE[] GetProviderSAdministrationInstructions() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider's Administration Instructions (RXE-7).
   ///</summary>
  public int ProviderSAdministrationInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Deliver-to Location(RXE-8).
	///</summary>
	public LA1 DeliverToLocation
	{
		get{
			LA1 ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (LA1)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Substitution Status(RXE-9).
	///</summary>
	public ID SubstitutionStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Amount(RXE-10).
	///</summary>
	public NM DispenseAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Units(RXE-11).
	///</summary>
	public CWE DispenseUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number Of Refills(RXE-12).
	///</summary>
	public NM NumberOfRefills
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ordering Provider's DEA Number(RXE-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOrderingProviderSDEANumber(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Provider's DEA Number (RXE-13).
   ///</summary>
  public XCN[] GetOrderingProviderSDEANumber() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Provider's DEA Number (RXE-13).
   ///</summary>
  public int OrderingProviderSDEANumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Pharmacist/Treatment Supplier's Verifier ID(RXE-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPharmacistTreatmentSupplierSVerifierID(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacist/Treatment Supplier's Verifier ID (RXE-14).
   ///</summary>
  public XCN[] GetPharmacistTreatmentSupplierSVerifierID() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacist/Treatment Supplier's Verifier ID (RXE-14).
   ///</summary>
  public int PharmacistTreatmentSupplierSVerifierIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Prescription Number(RXE-15).
	///</summary>
	public ST PrescriptionNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Refills Remaining(RXE-16).
	///</summary>
	public NM NumberOfRefillsRemaining
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Refills/Doses Dispensed(RXE-17).
	///</summary>
	public NM NumberOfRefillsDosesDispensed
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns D/T of Most Recent Refill or Dose Dispensed(RXE-18).
	///</summary>
	public DTM DTOfMostRecentRefillOrDoseDispensed
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Daily Dose(RXE-19).
	///</summary>
	public CQ TotalDailyDose
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Needs Human Review(RXE-20).
	///</summary>
	public ID NeedsHumanReview
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmacy/Treatment Supplier's Special Dispensing Instructions(RXE-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPharmacyTreatmentSupplierSSpecialDispensingInstructions(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacy/Treatment Supplier's Special Dispensing Instructions (RXE-21).
   ///</summary>
  public CWE[] GetPharmacyTreatmentSupplierSSpecialDispensingInstructions() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacy/Treatment Supplier's Special Dispensing Instructions (RXE-21).
   ///</summary>
  public int PharmacyTreatmentSupplierSSpecialDispensingInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Give Per (Time Unit)(RXE-22).
	///</summary>
	public ST GivePerTimeUnit
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Rate Amount(RXE-23).
	///</summary>
	public ST GiveRateAmount
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Rate Units(RXE-24).
	///</summary>
	public CWE GiveRateUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Strength(RXE-25).
	///</summary>
	public NM GiveStrength
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Strength Units(RXE-26).
	///</summary>
	public CWE GiveStrengthUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Give Indication(RXE-27).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetGiveIndication(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Give Indication (RXE-27).
   ///</summary>
  public CWE[] GetGiveIndication() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(27);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Give Indication (RXE-27).
   ///</summary>
  public int GiveIndicationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(27);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Dispense Package Size(RXE-28).
	///</summary>
	public NM DispensePackageSize
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Package Size Unit(RXE-29).
	///</summary>
	public CWE DispensePackageSizeUnit
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Package Method(RXE-30).
	///</summary>
	public ID DispensePackageMethod
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Supplementary Code(RXE-31).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSupplementaryCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(31, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Supplementary Code (RXE-31).
   ///</summary>
  public CWE[] GetSupplementaryCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(31);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Supplementary Code (RXE-31).
   ///</summary>
  public int SupplementaryCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(31);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Original Order Date/Time(RXE-32).
	///</summary>
	public DTM OriginalOrderDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Drug Strength Volume(RXE-33).
	///</summary>
	public NM GiveDrugStrengthVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Drug Strength Volume Units(RXE-34).
	///</summary>
	public CWE GiveDrugStrengthVolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Controlled Substance Schedule(RXE-35).
	///</summary>
	public CWE ControlledSubstanceSchedule
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Formulary Status(RXE-36).
	///</summary>
	public ID FormularyStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmaceutical Substance Alternative(RXE-37).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPharmaceuticalSubstanceAlternative(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(37, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmaceutical Substance Alternative (RXE-37).
   ///</summary>
  public CWE[] GetPharmaceuticalSubstanceAlternative() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(37);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmaceutical Substance Alternative (RXE-37).
   ///</summary>
  public int PharmaceuticalSubstanceAlternativeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(37);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Pharmacy of Most Recent Fill(RXE-38).
	///</summary>
	public CWE PharmacyOfMostRecentFill
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Initial Dispense Amount(RXE-39).
	///</summary>
	public NM InitialDispenseAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispensing Pharmacy(RXE-40).
	///</summary>
	public CWE DispensingPharmacy
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispensing Pharmacy Address(RXE-41).
	///</summary>
	public XAD DispensingPharmacyAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver-to Patient Location(RXE-42).
	///</summary>
	public PL DeliverToPatientLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver-to Address(RXE-43).
	///</summary>
	public XAD DeliverToAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(43, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pharmacy Order Type(RXE-44).
	///</summary>
	public ID PharmacyOrderType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(44, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmacy Phone Number(RXE-45).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPharmacyPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(45, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacy Phone Number (RXE-45).
   ///</summary>
  public XTN[] GetPharmacyPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(45);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacy Phone Number (RXE-45).
   ///</summary>
  public int PharmacyPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(45);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\RXG.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXG message segment. 
/// This segment has the following fields:<ol>
///<li>RXG-1: Give Sub-ID Counter (NM)</li>
///<li>RXG-2: Dispense Sub-ID Counter (NM)</li>
///<li>RXG-3: Quantity/Timing (-)</li>
///<li>RXG-4: Give Code (CWE)</li>
///<li>RXG-5: Give Amount - Minimum (NM)</li>
///<li>RXG-6: Give Amount - Maximum (NM)</li>
///<li>RXG-7: Give Units (CWE)</li>
///<li>RXG-8: Give Dosage Form (CWE)</li>
///<li>RXG-9: Administration Notes (CWE)</li>
///<li>RXG-10: Substitution Status (ID)</li>
///<li>RXG-11: Dispense-to Location (LA2)</li>
///<li>RXG-12: Needs Human Review (ID)</li>
///<li>RXG-13: Pharmacy/Treatment Supplier's Special Administration Instructions (CWE)</li>
///<li>RXG-14: Give Per (Time Unit) (ST)</li>
///<li>RXG-15: Give Rate Amount (ST)</li>
///<li>RXG-16: Give Rate Units (CWE)</li>
///<li>RXG-17: Give Strength (NM)</li>
///<li>RXG-18: Give Strength Units (CWE)</li>
///<li>RXG-19: Substance Lot Number (ST)</li>
///<li>RXG-20: Substance Expiration Date (DTM)</li>
///<li>RXG-21: Substance Manufacturer Name (CWE)</li>
///<li>RXG-22: Indication (CWE)</li>
///<li>RXG-23: Give Drug Strength Volume (NM)</li>
///<li>RXG-24: Give Drug Strength Volume Units (CWE)</li>
///<li>RXG-25: Give Barcode Identifier (CWE)</li>
///<li>RXG-26: Pharmacy Order Type (ID)</li>
///<li>RXG-27: Dispense to Pharmacy (CWE)</li>
///<li>RXG-28: Dispense to Pharmacy Address (XAD)</li>
///<li>RXG-29: Deliver-to Patient Location (PL)</li>
///<li>RXG-30: Deliver-to Address (XAD)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXG : AbstractSegment  {

  /**
   * Creates a RXG (Pharmacy/Treatment Give) segment object that belongs to the given 
   * message.  
   */
	public RXG(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Give Sub-ID Counter");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Dispense Sub-ID Counter");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Quantity/Timing");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Give Code");
       this.add(typeof(NM), true, 1, 0, new System.Object[]{message}, "Give Amount - Minimum");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Give Amount - Maximum");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Give Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Dosage Form");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Administration Notes");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 167}, "Substitution Status");
       this.add(typeof(LA2), false, 1, 0, new System.Object[]{message}, "Dispense-to Location");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Needs Human Review");
       this.add(typeof(CWE), false, 0, 250, new System.Object[]{message}, "Pharmacy/Treatment Supplier's Special Administration Instructions");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Give Per (Time Unit)");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Give Rate Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Rate Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Give Strength");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Strength Units");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Substance Lot Number");
       this.add(typeof(DTM), false, 0, 0, new System.Object[]{message}, "Substance Expiration Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Substance Manufacturer Name");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Indication");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Give Drug Strength Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Drug Strength Volume Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Give Barcode Identifier");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 480}, "Pharmacy Order Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispense to Pharmacy");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Dispense to Pharmacy Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Deliver-to Patient Location");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Deliver-to Address");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Give Sub-ID Counter(RXG-1).
	///</summary>
	public NM GiveSubIDCounter
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense Sub-ID Counter(RXG-2).
	///</summary>
	public NM DispenseSubIDCounter
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity/Timing(RXG-3).
	///</summary>
	public - QuantityTiming
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Code(RXG-4).
	///</summary>
	public CWE GiveCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Amount - Minimum(RXG-5).
	///</summary>
	public NM GiveAmountMinimum
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Amount - Maximum(RXG-6).
	///</summary>
	public NM GiveAmountMaximum
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Units(RXG-7).
	///</summary>
	public CWE GiveUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Dosage Form(RXG-8).
	///</summary>
	public CWE GiveDosageForm
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Administration Notes(RXG-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAdministrationNotes(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Administration Notes (RXG-9).
   ///</summary>
  public CWE[] GetAdministrationNotes() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Administration Notes (RXG-9).
   ///</summary>
  public int AdministrationNotesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Substitution Status(RXG-10).
	///</summary>
	public ID SubstitutionStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense-to Location(RXG-11).
	///</summary>
	public LA2 DispenseToLocation
	{
		get{
			LA2 ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (LA2)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Needs Human Review(RXG-12).
	///</summary>
	public ID NeedsHumanReview
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmacy/Treatment Supplier's Special Administration Instructions(RXG-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPharmacyTreatmentSupplierSSpecialAdministrationInstructions(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacy/Treatment Supplier's Special Administration Instructions (RXG-13).
   ///</summary>
  public CWE[] GetPharmacyTreatmentSupplierSSpecialAdministrationInstructions() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacy/Treatment Supplier's Special Administration Instructions (RXG-13).
   ///</summary>
  public int PharmacyTreatmentSupplierSSpecialAdministrationInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Give Per (Time Unit)(RXG-14).
	///</summary>
	public ST GivePerTimeUnit
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Rate Amount(RXG-15).
	///</summary>
	public ST GiveRateAmount
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Rate Units(RXG-16).
	///</summary>
	public CWE GiveRateUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Strength(RXG-17).
	///</summary>
	public NM GiveStrength
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Strength Units(RXG-18).
	///</summary>
	public CWE GiveStrengthUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Substance Lot Number(RXG-19).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetSubstanceLotNumber(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(19, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Lot Number (RXG-19).
   ///</summary>
  public ST[] GetSubstanceLotNumber() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(19);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Lot Number (RXG-19).
   ///</summary>
  public int SubstanceLotNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(19);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance Expiration Date(RXG-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DTM GetSubstanceExpirationDate(int rep)
	{
			DTM ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (DTM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Expiration Date (RXG-20).
   ///</summary>
  public DTM[] GetSubstanceExpirationDate() {
     DTM[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new DTM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DTM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Expiration Date (RXG-20).
   ///</summary>
  public int SubstanceExpirationDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Substance Manufacturer Name(RXG-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSubstanceManufacturerName(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Substance Manufacturer Name (RXG-21).
   ///</summary>
  public CWE[] GetSubstanceManufacturerName() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Substance Manufacturer Name (RXG-21).
   ///</summary>
  public int SubstanceManufacturerNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Indication(RXG-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetIndication(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Indication (RXG-22).
   ///</summary>
  public CWE[] GetIndication() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Indication (RXG-22).
   ///</summary>
  public int IndicationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Give Drug Strength Volume(RXG-23).
	///</summary>
	public NM GiveDrugStrengthVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Drug Strength Volume Units(RXG-24).
	///</summary>
	public CWE GiveDrugStrengthVolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Give Barcode Identifier(RXG-25).
	///</summary>
	public CWE GiveBarcodeIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pharmacy Order Type(RXG-26).
	///</summary>
	public ID PharmacyOrderType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense to Pharmacy(RXG-27).
	///</summary>
	public CWE DispenseToPharmacy
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispense to Pharmacy Address(RXG-28).
	///</summary>
	public XAD DispenseToPharmacyAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver-to Patient Location(RXG-29).
	///</summary>
	public PL DeliverToPatientLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver-to Address(RXG-30).
	///</summary>
	public XAD DeliverToAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\RXO.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXO message segment. 
/// This segment has the following fields:<ol>
///<li>RXO-1: Requested Give Code (CWE)</li>
///<li>RXO-2: Requested Give Amount - Minimum (NM)</li>
///<li>RXO-3: Requested Give Amount - Maximum (NM)</li>
///<li>RXO-4: Requested Give Units (CWE)</li>
///<li>RXO-5: Requested Dosage Form (CWE)</li>
///<li>RXO-6: Provider's Pharmacy/Treatment Instructions (CWE)</li>
///<li>RXO-7: Provider's Administration Instructions (CWE)</li>
///<li>RXO-8: Deliver-to Location (LA1)</li>
///<li>RXO-9: Allow Substitutions (ID)</li>
///<li>RXO-10: Requested Dispense Code (CWE)</li>
///<li>RXO-11: Requested Dispense Amount (NM)</li>
///<li>RXO-12: Requested Dispense Units (CWE)</li>
///<li>RXO-13: Number Of Refills (NM)</li>
///<li>RXO-14: Ordering Provider's DEA Number (XCN)</li>
///<li>RXO-15: Pharmacist/Treatment Supplier's Verifier ID (XCN)</li>
///<li>RXO-16: Needs Human Review (ID)</li>
///<li>RXO-17: Requested Give Per (Time Unit) (ST)</li>
///<li>RXO-18: Requested Give Strength (NM)</li>
///<li>RXO-19: Requested Give Strength Units (CWE)</li>
///<li>RXO-20: Indication (CWE)</li>
///<li>RXO-21: Requested Give Rate Amount (ST)</li>
///<li>RXO-22: Requested Give Rate Units (CWE)</li>
///<li>RXO-23: Total Daily Dose (CQ)</li>
///<li>RXO-24: Supplementary Code (CWE)</li>
///<li>RXO-25: Requested Drug Strength Volume (NM)</li>
///<li>RXO-26: Requested Drug Strength Volume Units (CWE)</li>
///<li>RXO-27: Pharmacy Order Type (ID)</li>
///<li>RXO-28: Dispensing Interval (NM)</li>
///<li>RXO-29: Medication Instance Identifier (EI)</li>
///<li>RXO-30: Segment Instance Identifier (EI)</li>
///<li>RXO-31: Mood Code (CNE)</li>
///<li>RXO-32: Dispensing Pharmacy (CWE)</li>
///<li>RXO-33: Dispensing Pharmacy Address (XAD)</li>
///<li>RXO-34: Deliver-to Patient Location (PL)</li>
///<li>RXO-35: Deliver-to Address (XAD)</li>
///<li>RXO-36: Pharmacy Phone Number (XTN)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXO : AbstractSegment  {

  /**
   * Creates a RXO (Pharmacy/Treatment Order) segment object that belongs to the given 
   * message.  
   */
	public RXO(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Give Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Requested Give Amount - Minimum");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Requested Give Amount - Maximum");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Give Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Dosage Form");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Provider's Pharmacy/Treatment Instructions");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Provider's Administration Instructions");
       this.add(typeof(LA1), false, 1, 0, new System.Object[]{message}, "Deliver-to Location");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 161}, "Allow Substitutions");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Dispense Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Requested Dispense Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Dispense Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number Of Refills");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Ordering Provider's DEA Number");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Pharmacist/Treatment Supplier's Verifier ID");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Needs Human Review");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Requested Give Per (Time Unit)");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Requested Give Strength");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Give Strength Units");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Indication");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Requested Give Rate Amount");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Give Rate Units");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Total Daily Dose");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Supplementary Code");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Requested Drug Strength Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Requested Drug Strength Volume Units");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 480}, "Pharmacy Order Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Dispensing Interval");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Medication Instance Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Segment Instance Identifier");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Mood Code");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Dispensing Pharmacy");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Dispensing Pharmacy Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Deliver-to Patient Location");
       this.add(typeof(XAD), false, 1, 0, new System.Object[]{message}, "Deliver-to Address");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Pharmacy Phone Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Requested Give Code(RXO-1).
	///</summary>
	public CWE RequestedGiveCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Amount - Minimum(RXO-2).
	///</summary>
	public NM RequestedGiveAmountMinimum
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Amount - Maximum(RXO-3).
	///</summary>
	public NM RequestedGiveAmountMaximum
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Units(RXO-4).
	///</summary>
	public CWE RequestedGiveUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Dosage Form(RXO-5).
	///</summary>
	public CWE RequestedDosageForm
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Provider's Pharmacy/Treatment Instructions(RXO-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProviderSPharmacyTreatmentInstructions(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider's Pharmacy/Treatment Instructions (RXO-6).
   ///</summary>
  public CWE[] GetProviderSPharmacyTreatmentInstructions() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider's Pharmacy/Treatment Instructions (RXO-6).
   ///</summary>
  public int ProviderSPharmacyTreatmentInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Provider's Administration Instructions(RXO-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetProviderSAdministrationInstructions(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Provider's Administration Instructions (RXO-7).
   ///</summary>
  public CWE[] GetProviderSAdministrationInstructions() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Provider's Administration Instructions (RXO-7).
   ///</summary>
  public int ProviderSAdministrationInstructionsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Deliver-to Location(RXO-8).
	///</summary>
	public LA1 DeliverToLocation
	{
		get{
			LA1 ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (LA1)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Allow Substitutions(RXO-9).
	///</summary>
	public ID AllowSubstitutions
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Dispense Code(RXO-10).
	///</summary>
	public CWE RequestedDispenseCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Dispense Amount(RXO-11).
	///</summary>
	public NM RequestedDispenseAmount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Dispense Units(RXO-12).
	///</summary>
	public CWE RequestedDispenseUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number Of Refills(RXO-13).
	///</summary>
	public NM NumberOfRefills
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Ordering Provider's DEA Number(RXO-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOrderingProviderSDEANumber(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Ordering Provider's DEA Number (RXO-14).
   ///</summary>
  public XCN[] GetOrderingProviderSDEANumber() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Ordering Provider's DEA Number (RXO-14).
   ///</summary>
  public int OrderingProviderSDEANumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Pharmacist/Treatment Supplier's Verifier ID(RXO-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPharmacistTreatmentSupplierSVerifierID(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacist/Treatment Supplier's Verifier ID (RXO-15).
   ///</summary>
  public XCN[] GetPharmacistTreatmentSupplierSVerifierID() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacist/Treatment Supplier's Verifier ID (RXO-15).
   ///</summary>
  public int PharmacistTreatmentSupplierSVerifierIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Needs Human Review(RXO-16).
	///</summary>
	public ID NeedsHumanReview
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Per (Time Unit)(RXO-17).
	///</summary>
	public ST RequestedGivePerTimeUnit
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Strength(RXO-18).
	///</summary>
	public NM RequestedGiveStrength
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Strength Units(RXO-19).
	///</summary>
	public CWE RequestedGiveStrengthUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Indication(RXO-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetIndication(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Indication (RXO-20).
   ///</summary>
  public CWE[] GetIndication() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Indication (RXO-20).
   ///</summary>
  public int IndicationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Requested Give Rate Amount(RXO-21).
	///</summary>
	public ST RequestedGiveRateAmount
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Give Rate Units(RXO-22).
	///</summary>
	public CWE RequestedGiveRateUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Daily Dose(RXO-23).
	///</summary>
	public CQ TotalDailyDose
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Supplementary Code(RXO-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSupplementaryCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Supplementary Code (RXO-24).
   ///</summary>
  public CWE[] GetSupplementaryCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Supplementary Code (RXO-24).
   ///</summary>
  public int SupplementaryCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Requested Drug Strength Volume(RXO-25).
	///</summary>
	public NM RequestedDrugStrengthVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Requested Drug Strength Volume Units(RXO-26).
	///</summary>
	public CWE RequestedDrugStrengthVolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pharmacy Order Type(RXO-27).
	///</summary>
	public ID PharmacyOrderType
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispensing Interval(RXO-28).
	///</summary>
	public NM DispensingInterval
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Medication Instance Identifier(RXO-29).
	///</summary>
	public EI MedicationInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Segment Instance Identifier(RXO-30).
	///</summary>
	public EI SegmentInstanceIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Mood Code(RXO-31).
	///</summary>
	public CNE MoodCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispensing Pharmacy(RXO-32).
	///</summary>
	public CWE DispensingPharmacy
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dispensing Pharmacy Address(RXO-33).
	///</summary>
	public XAD DispensingPharmacyAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver-to Patient Location(RXO-34).
	///</summary>
	public PL DeliverToPatientLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Deliver-to Address(RXO-35).
	///</summary>
	public XAD DeliverToAddress
	{
		get{
			XAD ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (XAD)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Pharmacy Phone Number(RXO-36).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPharmacyPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(36, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Pharmacy Phone Number (RXO-36).
   ///</summary>
  public XTN[] GetPharmacyPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(36);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Pharmacy Phone Number (RXO-36).
   ///</summary>
  public int PharmacyPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(36);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\RXR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 RXR message segment. 
/// This segment has the following fields:<ol>
///<li>RXR-1: Route (CWE)</li>
///<li>RXR-2: Administration Site (CWE)</li>
///<li>RXR-3: Administration Device (CWE)</li>
///<li>RXR-4: Administration Method (CWE)</li>
///<li>RXR-5: Routing Instruction (CWE)</li>
///<li>RXR-6: Administration Site Modifier (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class RXR : AbstractSegment  {

  /**
   * Creates a RXR (Pharmacy/Treatment Route) segment object that belongs to the given 
   * message.  
   */
	public RXR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Route");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administration Site");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administration Device");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administration Method");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Routing Instruction");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administration Site Modifier");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Route(RXR-1).
	///</summary>
	public CWE Route
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administration Site(RXR-2).
	///</summary>
	public CWE AdministrationSite
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administration Device(RXR-3).
	///</summary>
	public CWE AdministrationDevice
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administration Method(RXR-4).
	///</summary>
	public CWE AdministrationMethod
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Routing Instruction(RXR-5).
	///</summary>
	public CWE RoutingInstruction
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Administration Site Modifier(RXR-6).
	///</summary>
	public CWE AdministrationSiteModifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SAC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SAC message segment. 
/// This segment has the following fields:<ol>
///<li>SAC-1: External Accession Identifier (EI)</li>
///<li>SAC-2: Accession Identifier (EI)</li>
///<li>SAC-3: Container Identifier (EI)</li>
///<li>SAC-4: Primary (Parent) Container Identifier (EI)</li>
///<li>SAC-5: Equipment Container Identifier (EI)</li>
///<li>SAC-6: Specimen Source (-)</li>
///<li>SAC-7: Registration Date/Time (DTM)</li>
///<li>SAC-8: Container Status (CWE)</li>
///<li>SAC-9: Carrier Type (CWE)</li>
///<li>SAC-10: Carrier Identifier (EI)</li>
///<li>SAC-11: Position in Carrier (NA)</li>
///<li>SAC-12: Tray Type - SAC (CWE)</li>
///<li>SAC-13: Tray Identifier (EI)</li>
///<li>SAC-14: Position in Tray (NA)</li>
///<li>SAC-15: Location (CWE)</li>
///<li>SAC-16: Container Height (NM)</li>
///<li>SAC-17: Container Diameter (NM)</li>
///<li>SAC-18: Barrier Delta (NM)</li>
///<li>SAC-19: Bottom Delta (NM)</li>
///<li>SAC-20: Container Height/Diameter/Delta Units (CWE)</li>
///<li>SAC-21: Container Volume (NM)</li>
///<li>SAC-22: Available Specimen Volume (NM)</li>
///<li>SAC-23: Initial Specimen Volume (NM)</li>
///<li>SAC-24: Volume Units (CWE)</li>
///<li>SAC-25: Separator Type (CWE)</li>
///<li>SAC-26: Cap Type (CWE)</li>
///<li>SAC-27: Additive (CWE)</li>
///<li>SAC-28: Specimen Component (CWE)</li>
///<li>SAC-29: Dilution Factor (SN)</li>
///<li>SAC-30: Treatment (CWE)</li>
///<li>SAC-31: Temperature (SN)</li>
///<li>SAC-32: Hemolysis Index (NM)</li>
///<li>SAC-33: Hemolysis Index Units (CWE)</li>
///<li>SAC-34: Lipemia Index (NM)</li>
///<li>SAC-35: Lipemia Index Units (CWE)</li>
///<li>SAC-36: Icterus Index (NM)</li>
///<li>SAC-37: Icterus Index Units (CWE)</li>
///<li>SAC-38: Fibrin Index (NM)</li>
///<li>SAC-39: Fibrin Index Units (CWE)</li>
///<li>SAC-40: System Induced Contaminants (CWE)</li>
///<li>SAC-41: Drug Interference (CWE)</li>
///<li>SAC-42: Artificial Blood (CWE)</li>
///<li>SAC-43: Special Handling Code (CWE)</li>
///<li>SAC-44: Other Environmental Factors (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SAC : AbstractSegment  {

  /**
   * Creates a SAC (Specimen Container detail) segment object that belongs to the given 
   * message.  
   */
	public SAC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "External Accession Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Accession Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Container Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Primary (Parent) Container Identifier");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Equipment Container Identifier");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Specimen Source");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Registration Date/Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Container Status");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Carrier Type");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Carrier Identifier");
       this.add(typeof(NA), false, 1, 0, new System.Object[]{message}, "Position in Carrier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Tray Type - SAC");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Tray Identifier");
       this.add(typeof(NA), false, 1, 0, new System.Object[]{message}, "Position in Tray");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Location");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Container Height");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Container Diameter");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Barrier Delta");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Bottom Delta");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Container Height/Diameter/Delta Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Container Volume");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Available Specimen Volume");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Initial Specimen Volume");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Volume Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Separator Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Cap Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Additive");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Component");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Dilution Factor");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Treatment");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Temperature");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Hemolysis Index");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Hemolysis Index Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Lipemia Index");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Lipemia Index Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Icterus Index");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Icterus Index Units");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Fibrin Index");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Fibrin Index Units");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "System Induced Contaminants");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Drug Interference");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Artificial Blood");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Special Handling Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Other Environmental Factors");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns External Accession Identifier(SAC-1).
	///</summary>
	public EI ExternalAccessionIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Accession Identifier(SAC-2).
	///</summary>
	public EI AccessionIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Identifier(SAC-3).
	///</summary>
	public EI ContainerIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Primary (Parent) Container Identifier(SAC-4).
	///</summary>
	public EI PrimaryParentContainerIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Equipment Container Identifier(SAC-5).
	///</summary>
	public EI EquipmentContainerIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Source(SAC-6).
	///</summary>
	public - SpecimenSource
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Registration Date/Time(SAC-7).
	///</summary>
	public DTM RegistrationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Status(SAC-8).
	///</summary>
	public CWE ContainerStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Carrier Type(SAC-9).
	///</summary>
	public CWE CarrierType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Carrier Identifier(SAC-10).
	///</summary>
	public EI CarrierIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Position in Carrier(SAC-11).
	///</summary>
	public NA PositionInCarrier
	{
		get{
			NA ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (NA)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Tray Type - SAC(SAC-12).
	///</summary>
	public CWE TrayTypeSAC
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Tray Identifier(SAC-13).
	///</summary>
	public EI TrayIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Position in Tray(SAC-14).
	///</summary>
	public NA PositionInTray
	{
		get{
			NA ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NA)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Location(SAC-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetLocation(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Location (SAC-15).
   ///</summary>
  public CWE[] GetLocation() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Location (SAC-15).
   ///</summary>
  public int LocationRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Container Height(SAC-16).
	///</summary>
	public NM ContainerHeight
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Diameter(SAC-17).
	///</summary>
	public NM ContainerDiameter
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Barrier Delta(SAC-18).
	///</summary>
	public NM BarrierDelta
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bottom Delta(SAC-19).
	///</summary>
	public NM BottomDelta
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Height/Diameter/Delta Units(SAC-20).
	///</summary>
	public CWE ContainerHeightDiameterDeltaUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Volume(SAC-21).
	///</summary>
	public NM ContainerVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Available Specimen Volume(SAC-22).
	///</summary>
	public NM AvailableSpecimenVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Initial Specimen Volume(SAC-23).
	///</summary>
	public NM InitialSpecimenVolume
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Volume Units(SAC-24).
	///</summary>
	public CWE VolumeUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Separator Type(SAC-25).
	///</summary>
	public CWE SeparatorType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cap Type(SAC-26).
	///</summary>
	public CWE CapType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Additive(SAC-27).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetAdditive(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Additive (SAC-27).
   ///</summary>
  public CWE[] GetAdditive() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(27);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Additive (SAC-27).
   ///</summary>
  public int AdditiveRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(27);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Component(SAC-28).
	///</summary>
	public CWE SpecimenComponent
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dilution Factor(SAC-29).
	///</summary>
	public SN DilutionFactor
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Treatment(SAC-30).
	///</summary>
	public CWE Treatment
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Temperature(SAC-31).
	///</summary>
	public SN Temperature
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Hemolysis Index(SAC-32).
	///</summary>
	public NM HemolysisIndex
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Hemolysis Index Units(SAC-33).
	///</summary>
	public CWE HemolysisIndexUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Lipemia Index(SAC-34).
	///</summary>
	public NM LipemiaIndex
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Lipemia Index Units(SAC-35).
	///</summary>
	public CWE LipemiaIndexUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Icterus Index(SAC-36).
	///</summary>
	public NM IcterusIndex
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Icterus Index Units(SAC-37).
	///</summary>
	public CWE IcterusIndexUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Fibrin Index(SAC-38).
	///</summary>
	public NM FibrinIndex
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Fibrin Index Units(SAC-39).
	///</summary>
	public CWE FibrinIndexUnits
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of System Induced Contaminants(SAC-40).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSystemInducedContaminants(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of System Induced Contaminants (SAC-40).
   ///</summary>
  public CWE[] GetSystemInducedContaminants() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(40);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of System Induced Contaminants (SAC-40).
   ///</summary>
  public int SystemInducedContaminantsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(40);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Drug Interference(SAC-41).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetDrugInterference(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(41, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Drug Interference (SAC-41).
   ///</summary>
  public CWE[] GetDrugInterference() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(41);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Drug Interference (SAC-41).
   ///</summary>
  public int DrugInterferenceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(41);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Artificial Blood(SAC-42).
	///</summary>
	public CWE ArtificialBlood
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(42, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Special Handling Code(SAC-43).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecialHandlingCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(43, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Special Handling Code (SAC-43).
   ///</summary>
  public CWE[] GetSpecialHandlingCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(43);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Special Handling Code (SAC-43).
   ///</summary>
  public int SpecialHandlingCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(43);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Other Environmental Factors(SAC-44).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetOtherEnvironmentalFactors(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(44, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Other Environmental Factors (SAC-44).
   ///</summary>
  public CWE[] GetOtherEnvironmentalFactors() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(44);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Other Environmental Factors (SAC-44).
   ///</summary>
  public int OtherEnvironmentalFactorsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(44);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\SCD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SCD message segment. 
/// This segment has the following fields:<ol>
///<li>SCD-1: Cycle Start Time (TM)</li>
///<li>SCD-2: Cycle Count (NM)</li>
///<li>SCD-3: Temp Max (CQ)</li>
///<li>SCD-4: Temp Min (CQ)</li>
///<li>SCD-5: Load Number (NM)</li>
///<li>SCD-6: Condition Time (CQ)</li>
///<li>SCD-7: Sterilize Time (CQ)</li>
///<li>SCD-8: Exhaust Time (CQ)</li>
///<li>SCD-9: Total Cycle Time (CQ)</li>
///<li>SCD-10: Device Status (CWE)</li>
///<li>SCD-11: Cycle Start Date/Time (DTM)</li>
///<li>SCD-12: Dry Time (CQ)</li>
///<li>SCD-13: Leak Rate (CQ)</li>
///<li>SCD-14: Control Temperature (CQ)</li>
///<li>SCD-15: Sterilizer Temperature (CQ)</li>
///<li>SCD-16: Cycle Complete Time (TM)</li>
///<li>SCD-17: Under Temperature (CQ)</li>
///<li>SCD-18: Over Temperature (CQ)</li>
///<li>SCD-19: Abort Cycle (CNE)</li>
///<li>SCD-20: Alarm (CNE)</li>
///<li>SCD-21: Long in Charge Phase (CNE)</li>
///<li>SCD-22: Long in Exhaust Phase (CNE)</li>
///<li>SCD-23: Long in Fast Exhaust Phase (CNE)</li>
///<li>SCD-24: Reset (CNE)</li>
///<li>SCD-25: Operator - Unload (XCN)</li>
///<li>SCD-26: Door Open (CNE)</li>
///<li>SCD-27: Reading Failure (CNE)</li>
///<li>SCD-28: Cycle Type (CWE)</li>
///<li>SCD-29: Thermal Rinse Time (CQ)</li>
///<li>SCD-30: Wash Time (CQ)</li>
///<li>SCD-31: Injection Rate (CQ)</li>
///<li>SCD-32: Procedure Code (CNE)</li>
///<li>SCD-33: Patient Identifier List (CX)</li>
///<li>SCD-34: Attending Doctor (XCN)</li>
///<li>SCD-35: Dilution Factor (SN)</li>
///<li>SCD-36: Fill Time (CQ)</li>
///<li>SCD-37: Inlet Temperature (CQ)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SCD : AbstractSegment  {

  /**
   * Creates a SCD (Anti-Microbial Cycle Data) segment object that belongs to the given 
   * message.  
   */
	public SCD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(TM), false, 1, 0, new System.Object[]{message}, "Cycle Start Time");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Cycle Count");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Temp Max");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Temp Min");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Load Number");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Condition Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Sterilize Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Exhaust Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Total Cycle Time");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Device Status");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Cycle Start Date/Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Dry Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Leak Rate");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Control Temperature");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Sterilizer Temperature");
       this.add(typeof(TM), false, 1, 0, new System.Object[]{message}, "Cycle Complete Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Under Temperature");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Over Temperature");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Abort Cycle");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Alarm");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Long in Charge Phase");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Long in Exhaust Phase");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Long in Fast Exhaust Phase");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Reset");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Operator - Unload");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Door Open");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Reading Failure");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Cycle Type");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Thermal Rinse Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Wash Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Injection Rate");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Procedure Code");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Patient Identifier List");
       this.add(typeof(XCN), false, 1, 0, new System.Object[]{message}, "Attending Doctor");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Dilution Factor");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Fill Time");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Inlet Temperature");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Cycle Start Time(SCD-1).
	///</summary>
	public TM CycleStartTime
	{
		get{
			TM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (TM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cycle Count(SCD-2).
	///</summary>
	public NM CycleCount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Temp Max(SCD-3).
	///</summary>
	public CQ TempMax
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Temp Min(SCD-4).
	///</summary>
	public CQ TempMin
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Load Number(SCD-5).
	///</summary>
	public NM LoadNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Condition Time(SCD-6).
	///</summary>
	public CQ ConditionTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sterilize Time(SCD-7).
	///</summary>
	public CQ SterilizeTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Exhaust Time(SCD-8).
	///</summary>
	public CQ ExhaustTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total Cycle Time(SCD-9).
	///</summary>
	public CQ TotalCycleTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Status(SCD-10).
	///</summary>
	public CWE DeviceStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cycle Start Date/Time(SCD-11).
	///</summary>
	public DTM CycleStartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dry Time(SCD-12).
	///</summary>
	public CQ DryTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Leak Rate(SCD-13).
	///</summary>
	public CQ LeakRate
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Control Temperature(SCD-14).
	///</summary>
	public CQ ControlTemperature
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sterilizer Temperature(SCD-15).
	///</summary>
	public CQ SterilizerTemperature
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cycle Complete Time(SCD-16).
	///</summary>
	public TM CycleCompleteTime
	{
		get{
			TM ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (TM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Under Temperature(SCD-17).
	///</summary>
	public CQ UnderTemperature
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Over Temperature(SCD-18).
	///</summary>
	public CQ OverTemperature
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Abort Cycle(SCD-19).
	///</summary>
	public CNE AbortCycle
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Alarm(SCD-20).
	///</summary>
	public CNE Alarm
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Long in Charge Phase(SCD-21).
	///</summary>
	public CNE LongInChargePhase
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Long in Exhaust Phase(SCD-22).
	///</summary>
	public CNE LongInExhaustPhase
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Long in Fast Exhaust Phase(SCD-23).
	///</summary>
	public CNE LongInFastExhaustPhase
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reset(SCD-24).
	///</summary>
	public CNE Reset
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Operator - Unload(SCD-25).
	///</summary>
	public XCN OperatorUnload
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Door Open(SCD-26).
	///</summary>
	public CNE DoorOpen
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reading Failure(SCD-27).
	///</summary>
	public CNE ReadingFailure
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cycle Type(SCD-28).
	///</summary>
	public CWE CycleType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Thermal Rinse Time(SCD-29).
	///</summary>
	public CQ ThermalRinseTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Wash Time(SCD-30).
	///</summary>
	public CQ WashTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(30, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Injection Rate(SCD-31).
	///</summary>
	public CQ InjectionRate
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Procedure Code(SCD-32).
	///</summary>
	public CNE ProcedureCode
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Patient Identifier List(SCD-33).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetPatientIdentifierList(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(33, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Patient Identifier List (SCD-33).
   ///</summary>
  public CX[] GetPatientIdentifierList() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(33);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Patient Identifier List (SCD-33).
   ///</summary>
  public int PatientIdentifierListRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(33);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Attending Doctor(SCD-34).
	///</summary>
	public XCN AttendingDoctor
	{
		get{
			XCN ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (XCN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Dilution Factor(SCD-35).
	///</summary>
	public SN DilutionFactor
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Fill Time(SCD-36).
	///</summary>
	public CQ FillTime
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(36, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inlet Temperature(SCD-37).
	///</summary>
	public CQ InletTemperature
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SCH.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SCH message segment. 
/// This segment has the following fields:<ol>
///<li>SCH-1: Placer Appointment ID (EI)</li>
///<li>SCH-2: Filler Appointment ID (EI)</li>
///<li>SCH-3: Occurrence Number (NM)</li>
///<li>SCH-4: Placer Group Number (EI)</li>
///<li>SCH-5: Schedule ID (CWE)</li>
///<li>SCH-6: Event Reason (CWE)</li>
///<li>SCH-7: Appointment Reason (CWE)</li>
///<li>SCH-8: Appointment Type (CWE)</li>
///<li>SCH-9: Appointment Duration (NM)</li>
///<li>SCH-10: Appointment Duration Units (CNE)</li>
///<li>SCH-11: Appointment Timing Quantity (-)</li>
///<li>SCH-12: Placer Contact Person (XCN)</li>
///<li>SCH-13: Placer Contact Phone Number (XTN)</li>
///<li>SCH-14: Placer Contact Address (XAD)</li>
///<li>SCH-15: Placer Contact Location (PL)</li>
///<li>SCH-16: Filler Contact Person (XCN)</li>
///<li>SCH-17: Filler Contact Phone Number (XTN)</li>
///<li>SCH-18: Filler Contact Address (XAD)</li>
///<li>SCH-19: Filler Contact Location (PL)</li>
///<li>SCH-20: Entered By Person (XCN)</li>
///<li>SCH-21: Entered By Phone Number (XTN)</li>
///<li>SCH-22: Entered By Location (PL)</li>
///<li>SCH-23: Parent Placer Appointment ID (EI)</li>
///<li>SCH-24: Parent Filler Appointment ID (EI)</li>
///<li>SCH-25: Filler Status Code (CWE)</li>
///<li>SCH-26: Placer Order Number (EI)</li>
///<li>SCH-27: Filler Order Number (EI)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SCH : AbstractSegment  {

  /**
   * Creates a SCH (Scheduling Activity Information) segment object that belongs to the given 
   * message.  
   */
	public SCH(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Placer Appointment ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Filler Appointment ID");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Occurrence Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Placer Group Number");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Schedule ID");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Event Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Appointment Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Appointment Type");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Appointment Duration");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Appointment Duration Units");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Appointment Timing Quantity");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Placer Contact Person");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Placer Contact Phone Number");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Placer Contact Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Placer Contact Location");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Filler Contact Person");
       this.add(typeof(XTN), false, 1, 0, new System.Object[]{message}, "Filler Contact Phone Number");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Filler Contact Address");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Filler Contact Location");
       this.add(typeof(XCN), true, 0, 0, new System.Object[]{message}, "Entered By Person");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Entered By Phone Number");
       this.add(typeof(PL), false, 1, 0, new System.Object[]{message}, "Entered By Location");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Placer Appointment ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Filler Appointment ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Filler Status Code");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Placer Order Number");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Filler Order Number");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Placer Appointment ID(SCH-1).
	///</summary>
	public EI PlacerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Appointment ID(SCH-2).
	///</summary>
	public EI FillerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Occurrence Number(SCH-3).
	///</summary>
	public NM OccurrenceNumber
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Placer Group Number(SCH-4).
	///</summary>
	public EI PlacerGroupNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Schedule ID(SCH-5).
	///</summary>
	public CWE ScheduleID
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Event Reason(SCH-6).
	///</summary>
	public CWE EventReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Reason(SCH-7).
	///</summary>
	public CWE AppointmentReason
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Type(SCH-8).
	///</summary>
	public CWE AppointmentType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Duration(SCH-9).
	///</summary>
	public NM AppointmentDuration
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Duration Units(SCH-10).
	///</summary>
	public CNE AppointmentDurationUnits
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Appointment Timing Quantity(SCH-11).
	///</summary>
	public - AppointmentTimingQuantity
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Contact Person(SCH-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPlacerContactPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Contact Person (SCH-12).
   ///</summary>
  public XCN[] GetPlacerContactPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Contact Person (SCH-12).
   ///</summary>
  public int PlacerContactPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Placer Contact Phone Number(SCH-13).
	///</summary>
	public XTN PlacerContactPhoneNumber
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Contact Address(SCH-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetPlacerContactAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Contact Address (SCH-14).
   ///</summary>
  public XAD[] GetPlacerContactAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Contact Address (SCH-14).
   ///</summary>
  public int PlacerContactAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Placer Contact Location(SCH-15).
	///</summary>
	public PL PlacerContactLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Filler Contact Person(SCH-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetFillerContactPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Contact Person (SCH-16).
   ///</summary>
  public XCN[] GetFillerContactPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Contact Person (SCH-16).
   ///</summary>
  public int FillerContactPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Filler Contact Phone Number(SCH-17).
	///</summary>
	public XTN FillerContactPhoneNumber
	{
		get{
			XTN ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (XTN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Filler Contact Address(SCH-18).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetFillerContactAddress(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(18, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Contact Address (SCH-18).
   ///</summary>
  public XAD[] GetFillerContactAddress() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(18);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Contact Address (SCH-18).
   ///</summary>
  public int FillerContactAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(18);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Filler Contact Location(SCH-19).
	///</summary>
	public PL FillerContactLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Entered By Person(SCH-20).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetEnteredByPerson(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(20, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Entered By Person (SCH-20).
   ///</summary>
  public XCN[] GetEnteredByPerson() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(20);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Entered By Person (SCH-20).
   ///</summary>
  public int EnteredByPersonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(20);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Entered By Phone Number(SCH-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetEnteredByPhoneNumber(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Entered By Phone Number (SCH-21).
   ///</summary>
  public XTN[] GetEnteredByPhoneNumber() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Entered By Phone Number (SCH-21).
   ///</summary>
  public int EnteredByPhoneNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Entered By Location(SCH-22).
	///</summary>
	public PL EnteredByLocation
	{
		get{
			PL ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (PL)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Placer Appointment ID(SCH-23).
	///</summary>
	public EI ParentPlacerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Filler Appointment ID(SCH-24).
	///</summary>
	public EI ParentFillerAppointmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Filler Status Code(SCH-25).
	///</summary>
	public CWE FillerStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Order Number(SCH-26).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetPlacerOrderNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(26, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Order Number (SCH-26).
   ///</summary>
  public EI[] GetPlacerOrderNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(26);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Order Number (SCH-26).
   ///</summary>
  public int PlacerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(26);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Filler Order Number(SCH-27).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetFillerOrderNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(27, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Filler Order Number (SCH-27).
   ///</summary>
  public EI[] GetFillerOrderNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(27);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Filler Order Number (SCH-27).
   ///</summary>
  public int FillerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(27);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\SCP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SCP message segment. 
/// This segment has the following fields:<ol>
///<li>SCP-1: Number Of Decontamination/Sterilization Devices (NM)</li>
///<li>SCP-2: Labor Calculation Type (CWE)</li>
///<li>SCP-3: Date Format (CWE)</li>
///<li>SCP-4: Device Number (EI)</li>
///<li>SCP-5: Device Name (ST)</li>
///<li>SCP-6: Device Model Name (ST)</li>
///<li>SCP-7: Device Type (CWE)</li>
///<li>SCP-8: Lot Control (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SCP : AbstractSegment  {

  /**
   * Creates a SCP (Sterilizer Configuration (Anti-Microbial Devices)) segment object that belongs to the given 
   * message.  
   */
	public SCP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number Of Decontamination/Sterilization Devices");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Labor Calculation Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Date Format");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Device Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Device Name");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Device Model Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Device Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Lot Control");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Number Of Decontamination/Sterilization Devices(SCP-1).
	///</summary>
	public NM NumberOfDecontaminationSterilizationDevices
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Labor Calculation Type(SCP-2).
	///</summary>
	public CWE LaborCalculationType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Format(SCP-3).
	///</summary>
	public CWE DateFormat
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Number(SCP-4).
	///</summary>
	public EI DeviceNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Name(SCP-5).
	///</summary>
	public ST DeviceName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Model Name(SCP-6).
	///</summary>
	public ST DeviceModelName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Type(SCP-7).
	///</summary>
	public CWE DeviceType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Lot Control(SCP-8).
	///</summary>
	public CWE LotControl
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SDD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SDD message segment. 
/// This segment has the following fields:<ol>
///<li>SDD-1: Lot Number (EI)</li>
///<li>SDD-2: Device Number (EI)</li>
///<li>SDD-3: Device Name (ST)</li>
///<li>SDD-4: Device Data State (CWE)</li>
///<li>SDD-5: Load Status (CWE)</li>
///<li>SDD-6: Control Code (NM)</li>
///<li>SDD-7: Operator Name (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SDD : AbstractSegment  {

  /**
   * Creates a SDD (Sterilization Device Data) segment object that belongs to the given 
   * message.  
   */
	public SDD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Lot Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Device Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Device Name");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Device Data State");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Load Status");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Control Code");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Operator Name");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Lot Number(SDD-1).
	///</summary>
	public EI LotNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Number(SDD-2).
	///</summary>
	public EI DeviceNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Name(SDD-3).
	///</summary>
	public ST DeviceName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Data State(SDD-4).
	///</summary>
	public CWE DeviceDataState
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Load Status(SDD-5).
	///</summary>
	public CWE LoadStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Control Code(SDD-6).
	///</summary>
	public NM ControlCode
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Operator Name(SDD-7).
	///</summary>
	public ST OperatorName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SFT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SFT message segment. 
/// This segment has the following fields:<ol>
///<li>SFT-1: Software Vendor Organization (XON)</li>
///<li>SFT-2: Software Certified Version or Release Number (ST)</li>
///<li>SFT-3: Software Product Name (ST)</li>
///<li>SFT-4: Software Binary ID (ST)</li>
///<li>SFT-5: Software Product Information (TX)</li>
///<li>SFT-6: Software Install Date (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SFT : AbstractSegment  {

  /**
   * Creates a SFT (Software Segment) segment object that belongs to the given 
   * message.  
   */
	public SFT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(XON), true, 1, 0, new System.Object[]{message}, "Software Vendor Organization");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Software Certified Version or Release Number");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Software Product Name");
       this.add(typeof(ST), true, 1, 0, new System.Object[]{message}, "Software Binary ID");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Software Product Information");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Software Install Date");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Software Vendor Organization(SFT-1).
	///</summary>
	public XON SoftwareVendorOrganization
	{
		get{
			XON ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (XON)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Software Certified Version or Release Number(SFT-2).
	///</summary>
	public ST SoftwareCertifiedVersionOrReleaseNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Software Product Name(SFT-3).
	///</summary>
	public ST SoftwareProductName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Software Binary ID(SFT-4).
	///</summary>
	public ST SoftwareBinaryID
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Software Product Information(SFT-5).
	///</summary>
	public TX SoftwareProductInformation
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Software Install Date(SFT-6).
	///</summary>
	public DTM SoftwareInstallDate
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SHP.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SHP message segment. 
/// This segment has the following fields:<ol>
///<li>SHP-1: Shipment ID (EI)</li>
///<li>SHP-2: Internal Shipment ID (EI)</li>
///<li>SHP-3: Shipment Status (CWE)</li>
///<li>SHP-4: Shipment Status Date/Time (DTM)</li>
///<li>SHP-5: Shipment Status Reason (TX)</li>
///<li>SHP-6: Shipment Priority (CWE)</li>
///<li>SHP-7: Shipment Confidentiality (CWE)</li>
///<li>SHP-8: Number of Packages in Shipment (NM)</li>
///<li>SHP-9: Shipment Condition (CWE)</li>
///<li>SHP-10: Shipment Handling Code (CWE)</li>
///<li>SHP-11: Shipment Risk Code (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SHP : AbstractSegment  {

  /**
   * Creates a SHP (Shipment) segment object that belongs to the given 
   * message.  
   */
	public SHP(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Shipment ID");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Internal Shipment ID");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Shipment Status");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Shipment Status Date/Time");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Shipment Status Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Shipment Priority");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Shipment Confidentiality");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Packages in Shipment");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Shipment Condition");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Shipment Handling Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Shipment Risk Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Shipment ID(SHP-1).
	///</summary>
	public EI ShipmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Internal Shipment ID(SHP-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetInternalShipmentID(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Internal Shipment ID (SHP-2).
   ///</summary>
  public EI[] GetInternalShipmentID() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Internal Shipment ID (SHP-2).
   ///</summary>
  public int InternalShipmentIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Shipment Status(SHP-3).
	///</summary>
	public CWE ShipmentStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Shipment Status Date/Time(SHP-4).
	///</summary>
	public DTM ShipmentStatusDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Shipment Status Reason(SHP-5).
	///</summary>
	public TX ShipmentStatusReason
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Shipment Priority(SHP-6).
	///</summary>
	public CWE ShipmentPriority
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Shipment Confidentiality(SHP-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetShipmentConfidentiality(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Shipment Confidentiality (SHP-7).
   ///</summary>
  public CWE[] GetShipmentConfidentiality() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Shipment Confidentiality (SHP-7).
   ///</summary>
  public int ShipmentConfidentialityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Number of Packages in Shipment(SHP-8).
	///</summary>
	public NM NumberOfPackagesInShipment
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Shipment Condition(SHP-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetShipmentCondition(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Shipment Condition (SHP-9).
   ///</summary>
  public CWE[] GetShipmentCondition() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Shipment Condition (SHP-9).
   ///</summary>
  public int ShipmentConditionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Shipment Handling Code(SHP-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetShipmentHandlingCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Shipment Handling Code (SHP-10).
   ///</summary>
  public CWE[] GetShipmentHandlingCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Shipment Handling Code (SHP-10).
   ///</summary>
  public int ShipmentHandlingCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Shipment Risk Code(SHP-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetShipmentRiskCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Shipment Risk Code (SHP-11).
   ///</summary>
  public CWE[] GetShipmentRiskCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Shipment Risk Code (SHP-11).
   ///</summary>
  public int ShipmentRiskCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\SID.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SID message segment. 
/// This segment has the following fields:<ol>
///<li>SID-1: Application/Method Identifier (CWE)</li>
///<li>SID-2: Substance Lot Number (ST)</li>
///<li>SID-3: Substance Container Identifier (ST)</li>
///<li>SID-4: Substance Manufacturer Identifier (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SID : AbstractSegment  {

  /**
   * Creates a SID (Substance Identifier) segment object that belongs to the given 
   * message.  
   */
	public SID(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Application/Method Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Substance Lot Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Substance Container Identifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Substance Manufacturer Identifier");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Application/Method Identifier(SID-1).
	///</summary>
	public CWE ApplicationMethodIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Substance Lot Number(SID-2).
	///</summary>
	public ST SubstanceLotNumber
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Substance Container Identifier(SID-3).
	///</summary>
	public ST SubstanceContainerIdentifier
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Substance Manufacturer Identifier(SID-4).
	///</summary>
	public CWE SubstanceManufacturerIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SLT.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SLT message segment. 
/// This segment has the following fields:<ol>
///<li>SLT-1: Device Number (EI)</li>
///<li>SLT-2: Device Name (ST)</li>
///<li>SLT-3: Lot Number (EI)</li>
///<li>SLT-4: Item Identifier (EI)</li>
///<li>SLT-5: Bar Code (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SLT : AbstractSegment  {

  /**
   * Creates a SLT (Sterilization Lot) segment object that belongs to the given 
   * message.  
   */
	public SLT(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Device Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Device Name");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Lot Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Item Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Bar Code");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Device Number(SLT-1).
	///</summary>
	public EI DeviceNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Device Name(SLT-2).
	///</summary>
	public ST DeviceName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Lot Number(SLT-3).
	///</summary>
	public EI LotNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Item Identifier(SLT-4).
	///</summary>
	public EI ItemIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Bar Code(SLT-5).
	///</summary>
	public ST BarCode
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\SPM.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 SPM message segment. 
/// This segment has the following fields:<ol>
///<li>SPM-1: Set ID - SPM (SI)</li>
///<li>SPM-2: Specimen ID (EIP)</li>
///<li>SPM-3: Specimen Parent IDs (EIP)</li>
///<li>SPM-4: Specimen Type (CWE)</li>
///<li>SPM-5: Specimen Type Modifier (CWE)</li>
///<li>SPM-6: Specimen Additives (CWE)</li>
///<li>SPM-7: Specimen Collection Method (CWE)</li>
///<li>SPM-8: Specimen Source Site (CWE)</li>
///<li>SPM-9: Specimen Source Site Modifier (CWE)</li>
///<li>SPM-10: Specimen Collection Site (CWE)</li>
///<li>SPM-11: Specimen Role (CWE)</li>
///<li>SPM-12: Specimen Collection Amount (CQ)</li>
///<li>SPM-13: Grouped Specimen Count (NM)</li>
///<li>SPM-14: Specimen Description (ST)</li>
///<li>SPM-15: Specimen Handling Code (CWE)</li>
///<li>SPM-16: Specimen Risk Code (CWE)</li>
///<li>SPM-17: Specimen Collection Date/Time (DR)</li>
///<li>SPM-18: Specimen Received Date/Time (DTM)</li>
///<li>SPM-19: Specimen Expiration Date/Time (DTM)</li>
///<li>SPM-20: Specimen Availability (ID)</li>
///<li>SPM-21: Specimen Reject Reason (CWE)</li>
///<li>SPM-22: Specimen Quality (CWE)</li>
///<li>SPM-23: Specimen Appropriateness (CWE)</li>
///<li>SPM-24: Specimen Condition (CWE)</li>
///<li>SPM-25: Specimen Current Quantity (CQ)</li>
///<li>SPM-26: Number of Specimen Containers (NM)</li>
///<li>SPM-27: Container Type (CWE)</li>
///<li>SPM-28: Container Condition (CWE)</li>
///<li>SPM-29: Specimen Child Role (CWE)</li>
///<li>SPM-30: Accession ID (CX)</li>
///<li>SPM-31: Other Specimen ID (CX)</li>
///<li>SPM-32: Shipment ID (EI)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class SPM : AbstractSegment  {

  /**
   * Creates a SPM (Specimen) segment object that belongs to the given 
   * message.  
   */
	public SPM(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - SPM");
       this.add(typeof(EIP), false, 1, 0, new System.Object[]{message}, "Specimen ID");
       this.add(typeof(EIP), false, 0, 0, new System.Object[]{message}, "Specimen Parent IDs");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Specimen Type");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Type Modifier");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Additives");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Collection Method");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Source Site");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Source Site Modifier");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Collection Site");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Role");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Specimen Collection Amount");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Grouped Specimen Count");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Specimen Description");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Handling Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Risk Code");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Specimen Collection Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Specimen Received Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Specimen Expiration Date/Time");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Specimen Availability");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Reject Reason");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Quality");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Appropriateness");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Specimen Condition");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Specimen Current Quantity");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Number of Specimen Containers");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Container Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Container Condition");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Specimen Child Role");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Accession ID");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Other Specimen ID");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Shipment ID");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - SPM(SPM-1).
	///</summary>
	public SI SetIDSPM
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen ID(SPM-2).
	///</summary>
	public EIP SpecimenID
	{
		get{
			EIP ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EIP)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Parent IDs(SPM-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EIP GetSpecimenParentIDs(int rep)
	{
			EIP ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (EIP)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Parent IDs (SPM-3).
   ///</summary>
  public EIP[] GetSpecimenParentIDs() {
     EIP[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new EIP[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EIP)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Parent IDs (SPM-3).
   ///</summary>
  public int SpecimenParentIDsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Type(SPM-4).
	///</summary>
	public CWE SpecimenType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Type Modifier(SPM-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenTypeModifier(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Type Modifier (SPM-5).
   ///</summary>
  public CWE[] GetSpecimenTypeModifier() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Type Modifier (SPM-5).
   ///</summary>
  public int SpecimenTypeModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Specimen Additives(SPM-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenAdditives(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Additives (SPM-6).
   ///</summary>
  public CWE[] GetSpecimenAdditives() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Additives (SPM-6).
   ///</summary>
  public int SpecimenAdditivesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Collection Method(SPM-7).
	///</summary>
	public CWE SpecimenCollectionMethod
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Source Site(SPM-8).
	///</summary>
	public CWE SpecimenSourceSite
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Source Site Modifier(SPM-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenSourceSiteModifier(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Source Site Modifier (SPM-9).
   ///</summary>
  public CWE[] GetSpecimenSourceSiteModifier() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Source Site Modifier (SPM-9).
   ///</summary>
  public int SpecimenSourceSiteModifierRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Collection Site(SPM-10).
	///</summary>
	public CWE SpecimenCollectionSite
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Role(SPM-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenRole(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Role (SPM-11).
   ///</summary>
  public CWE[] GetSpecimenRole() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Role (SPM-11).
   ///</summary>
  public int SpecimenRoleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Collection Amount(SPM-12).
	///</summary>
	public CQ SpecimenCollectionAmount
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Grouped Specimen Count(SPM-13).
	///</summary>
	public NM GroupedSpecimenCount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Description(SPM-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetSpecimenDescription(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Description (SPM-14).
   ///</summary>
  public ST[] GetSpecimenDescription() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Description (SPM-14).
   ///</summary>
  public int SpecimenDescriptionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Specimen Handling Code(SPM-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenHandlingCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Handling Code (SPM-15).
   ///</summary>
  public CWE[] GetSpecimenHandlingCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Handling Code (SPM-15).
   ///</summary>
  public int SpecimenHandlingCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Specimen Risk Code(SPM-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenRiskCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Risk Code (SPM-16).
   ///</summary>
  public CWE[] GetSpecimenRiskCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Risk Code (SPM-16).
   ///</summary>
  public int SpecimenRiskCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Collection Date/Time(SPM-17).
	///</summary>
	public DR SpecimenCollectionDateTime
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Received Date/Time(SPM-18).
	///</summary>
	public DTM SpecimenReceivedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Expiration Date/Time(SPM-19).
	///</summary>
	public DTM SpecimenExpirationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Availability(SPM-20).
	///</summary>
	public ID SpecimenAvailability
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Reject Reason(SPM-21).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenRejectReason(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(21, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Reject Reason (SPM-21).
   ///</summary>
  public CWE[] GetSpecimenRejectReason() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(21);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Reject Reason (SPM-21).
   ///</summary>
  public int SpecimenRejectReasonRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(21);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Quality(SPM-22).
	///</summary>
	public CWE SpecimenQuality
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Appropriateness(SPM-23).
	///</summary>
	public CWE SpecimenAppropriateness
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Specimen Condition(SPM-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetSpecimenCondition(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Specimen Condition (SPM-24).
   ///</summary>
  public CWE[] GetSpecimenCondition() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Specimen Condition (SPM-24).
   ///</summary>
  public int SpecimenConditionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Specimen Current Quantity(SPM-25).
	///</summary>
	public CQ SpecimenCurrentQuantity
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Number of Specimen Containers(SPM-26).
	///</summary>
	public NM NumberOfSpecimenContainers
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Type(SPM-27).
	///</summary>
	public CWE ContainerType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Container Condition(SPM-28).
	///</summary>
	public CWE ContainerCondition
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Child Role(SPM-29).
	///</summary>
	public CWE SpecimenChildRole
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Accession ID(SPM-30).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetAccessionID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(30, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Accession ID (SPM-30).
   ///</summary>
  public CX[] GetAccessionID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(30);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Accession ID (SPM-30).
   ///</summary>
  public int AccessionIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(30);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Other Specimen ID(SPM-31).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetOtherSpecimenID(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(31, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Other Specimen ID (SPM-31).
   ///</summary>
  public CX[] GetOtherSpecimenID() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(31);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Other Specimen ID (SPM-31).
   ///</summary>
  public int OtherSpecimenIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(31);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Shipment ID(SPM-32).
	///</summary>
	public EI ShipmentID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\STF.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 STF message segment. 
/// This segment has the following fields:<ol>
///<li>STF-1: Primary Key Value - STF (CWE)</li>
///<li>STF-2: Staff Identifier List (CX)</li>
///<li>STF-3: Staff Name (XPN)</li>
///<li>STF-4: Staff Type (CWE)</li>
///<li>STF-5: Administrative Sex (CWE)</li>
///<li>STF-6: Date/Time of Birth (DTM)</li>
///<li>STF-7: Active/Inactive Flag (ID)</li>
///<li>STF-8: Department (CWE)</li>
///<li>STF-9: Hospital Service - STF (CWE)</li>
///<li>STF-10: Phone (XTN)</li>
///<li>STF-11: Office/Home Address/Birthplace (XAD)</li>
///<li>STF-12: Institution Activation Date (DIN)</li>
///<li>STF-13: Institution Inactivation Date (DIN)</li>
///<li>STF-14: Backup Person ID (CWE)</li>
///<li>STF-15: E-Mail Address (ST)</li>
///<li>STF-16: Preferred Method of Contact (CWE)</li>
///<li>STF-17: Marital Status (CWE)</li>
///<li>STF-18: Job Title (ST)</li>
///<li>STF-19: Job Code/Class (JCC)</li>
///<li>STF-20: Employment Status Code (CWE)</li>
///<li>STF-21: Additional Insured on Auto (ID)</li>
///<li>STF-22: Driver's License Number - Staff (DLN)</li>
///<li>STF-23: Copy Auto Ins (ID)</li>
///<li>STF-24: Auto Ins Expires (DT)</li>
///<li>STF-25: Date Last DMV Review (DT)</li>
///<li>STF-26: Date Next DMV Review (DT)</li>
///<li>STF-27: Race (CWE)</li>
///<li>STF-28: Ethnic Group (CWE)</li>
///<li>STF-29: Re-activation Approval Indicator (ID)</li>
///<li>STF-30: Citizenship (CWE)</li>
///<li>STF-31: Date/Time of Death (DTM)</li>
///<li>STF-32: Death Indicator (ID)</li>
///<li>STF-33: Institution Relationship Type Code (CWE)</li>
///<li>STF-34: Institution Relationship Period (DR)</li>
///<li>STF-35: Expected Return Date (DT)</li>
///<li>STF-36: Cost Center Code (CWE)</li>
///<li>STF-37: Generic Classification Indicator (ID)</li>
///<li>STF-38: Inactive Reason Code (CWE)</li>
///<li>STF-39: Generic resource type or category (CWE)</li>
///<li>STF-40: Religion (CWE)</li>
///<li>STF-41: Signature (ED)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class STF : AbstractSegment  {

  /**
   * Creates a STF (Staff Identification) segment object that belongs to the given 
   * message.  
   */
	public STF(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Primary Key Value - STF");
       this.add(typeof(CX), false, 0, 0, new System.Object[]{message}, "Staff Identifier List");
       this.add(typeof(XPN), false, 0, 0, new System.Object[]{message}, "Staff Name");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Staff Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Administrative Sex");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of Birth");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 183}, "Active/Inactive Flag");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Department");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Hospital Service - STF");
       this.add(typeof(XTN), false, 0, 0, new System.Object[]{message}, "Phone");
       this.add(typeof(XAD), false, 0, 0, new System.Object[]{message}, "Office/Home Address/Birthplace");
       this.add(typeof(DIN), false, 0, 0, new System.Object[]{message}, "Institution Activation Date");
       this.add(typeof(DIN), false, 0, 0, new System.Object[]{message}, "Institution Inactivation Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Backup Person ID");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "E-Mail Address");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Preferred Method of Contact");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Marital Status");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Job Title");
       this.add(typeof(JCC), false, 1, 0, new System.Object[]{message}, "Job Code/Class");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Employment Status Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Additional Insured on Auto");
       this.add(typeof(DLN), false, 1, 0, new System.Object[]{message}, "Driver's License Number - Staff");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Copy Auto Ins");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Auto Ins Expires");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Date Last DMV Review");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Date Next DMV Review");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Race");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Ethnic Group");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Re-activation Approval Indicator");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Citizenship");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Date/Time of Death");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Death Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Institution Relationship Type Code");
       this.add(typeof(DR), false, 1, 0, new System.Object[]{message}, "Institution Relationship Period");
       this.add(typeof(DT), false, 1, 0, new System.Object[]{message}, "Expected Return Date");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Cost Center Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Generic Classification Indicator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Inactive Reason Code");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Generic resource type or category");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Religion");
       this.add(typeof(ED), false, 1, 0, new System.Object[]{message}, "Signature");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Primary Key Value - STF(STF-1).
	///</summary>
	public CWE PrimaryKeyValueSTF
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Staff Identifier List(STF-2).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CX GetStaffIdentifierList(int rep)
	{
			CX ret = null;
			try
			{
			IType t = this.GetField(2, rep);
				ret = (CX)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Staff Identifier List (STF-2).
   ///</summary>
  public CX[] GetStaffIdentifierList() {
     CX[] ret = null;
    try {
        IType[] t = this.GetField(2);  
        ret = new CX[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CX)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Staff Identifier List (STF-2).
   ///</summary>
  public int StaffIdentifierListRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(2);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Staff Name(STF-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XPN GetStaffName(int rep)
	{
			XPN ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (XPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Staff Name (STF-3).
   ///</summary>
  public XPN[] GetStaffName() {
     XPN[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new XPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Staff Name (STF-3).
   ///</summary>
  public int StaffNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Staff Type(STF-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetStaffType(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Staff Type (STF-4).
   ///</summary>
  public CWE[] GetStaffType() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Staff Type (STF-4).
   ///</summary>
  public int StaffTypeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Administrative Sex(STF-5).
	///</summary>
	public CWE AdministrativeSex
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date/Time of Birth(STF-6).
	///</summary>
	public DTM DateTimeOfBirth
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Active/Inactive Flag(STF-7).
	///</summary>
	public ID ActiveInactiveFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Department(STF-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetDepartment(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Department (STF-8).
   ///</summary>
  public CWE[] GetDepartment() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Department (STF-8).
   ///</summary>
  public int DepartmentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Hospital Service - STF(STF-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetHospitalServiceSTF(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Hospital Service - STF (STF-9).
   ///</summary>
  public CWE[] GetHospitalServiceSTF() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Hospital Service - STF (STF-9).
   ///</summary>
  public int HospitalServiceSTFRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Phone(STF-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XTN GetPhone(int rep)
	{
			XTN ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (XTN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Phone (STF-10).
   ///</summary>
  public XTN[] GetPhone() {
     XTN[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new XTN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XTN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Phone (STF-10).
   ///</summary>
  public int PhoneRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Office/Home Address/Birthplace(STF-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XAD GetOfficeHomeAddressBirthplace(int rep)
	{
			XAD ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XAD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Office/Home Address/Birthplace (STF-11).
   ///</summary>
  public XAD[] GetOfficeHomeAddressBirthplace() {
     XAD[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XAD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XAD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Office/Home Address/Birthplace (STF-11).
   ///</summary>
  public int OfficeHomeAddressBirthplaceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Institution Activation Date(STF-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DIN GetInstitutionActivationDate(int rep)
	{
			DIN ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (DIN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Institution Activation Date (STF-12).
   ///</summary>
  public DIN[] GetInstitutionActivationDate() {
     DIN[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new DIN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DIN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Institution Activation Date (STF-12).
   ///</summary>
  public int InstitutionActivationDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Institution Inactivation Date(STF-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DIN GetInstitutionInactivationDate(int rep)
	{
			DIN ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (DIN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Institution Inactivation Date (STF-13).
   ///</summary>
  public DIN[] GetInstitutionInactivationDate() {
     DIN[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new DIN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DIN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Institution Inactivation Date (STF-13).
   ///</summary>
  public int InstitutionInactivationDateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Backup Person ID(STF-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetBackupPersonID(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Backup Person ID (STF-14).
   ///</summary>
  public CWE[] GetBackupPersonID() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Backup Person ID (STF-14).
   ///</summary>
  public int BackupPersonIDRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of E-Mail Address(STF-15).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetEMailAddress(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of E-Mail Address (STF-15).
   ///</summary>
  public ST[] GetEMailAddress() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(15);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of E-Mail Address (STF-15).
   ///</summary>
  public int EMailAddressRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(15);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Preferred Method of Contact(STF-16).
	///</summary>
	public CWE PreferredMethodOfContact
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Marital Status(STF-17).
	///</summary>
	public CWE MaritalStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Title(STF-18).
	///</summary>
	public ST JobTitle
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Job Code/Class(STF-19).
	///</summary>
	public JCC JobCodeClass
	{
		get{
			JCC ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (JCC)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Employment Status Code(STF-20).
	///</summary>
	public CWE EmploymentStatusCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Additional Insured on Auto(STF-21).
	///</summary>
	public ID AdditionalInsuredOnAuto
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Driver's License Number - Staff(STF-22).
	///</summary>
	public DLN DriverSLicenseNumberStaff
	{
		get{
			DLN ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (DLN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Copy Auto Ins(STF-23).
	///</summary>
	public ID CopyAutoIns
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Auto Ins Expires(STF-24).
	///</summary>
	public DT AutoInsExpires
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(24, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Last DMV Review(STF-25).
	///</summary>
	public DT DateLastDMVReview
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(25, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Date Next DMV Review(STF-26).
	///</summary>
	public DT DateNextDMVReview
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Race(STF-27).
	///</summary>
	public CWE Race
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(27, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Ethnic Group(STF-28).
	///</summary>
	public CWE EthnicGroup
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(28, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Re-activation Approval Indicator(STF-29).
	///</summary>
	public ID ReActivationApprovalIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(29, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Citizenship(STF-30).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCitizenship(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(30, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Citizenship (STF-30).
   ///</summary>
  public CWE[] GetCitizenship() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(30);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Citizenship (STF-30).
   ///</summary>
  public int CitizenshipRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(30);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Date/Time of Death(STF-31).
	///</summary>
	public DTM DateTimeOfDeath
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(31, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Death Indicator(STF-32).
	///</summary>
	public ID DeathIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(32, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Institution Relationship Type Code(STF-33).
	///</summary>
	public CWE InstitutionRelationshipTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(33, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Institution Relationship Period(STF-34).
	///</summary>
	public DR InstitutionRelationshipPeriod
	{
		get{
			DR ret = null;
			try
			{
			IType t = this.GetField(34, 0);
				ret = (DR)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Expected Return Date(STF-35).
	///</summary>
	public DT ExpectedReturnDate
	{
		get{
			DT ret = null;
			try
			{
			IType t = this.GetField(35, 0);
				ret = (DT)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Cost Center Code(STF-36).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetCostCenterCode(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(36, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Cost Center Code (STF-36).
   ///</summary>
  public CWE[] GetCostCenterCode() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(36);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Cost Center Code (STF-36).
   ///</summary>
  public int CostCenterCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(36);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Generic Classification Indicator(STF-37).
	///</summary>
	public ID GenericClassificationIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(37, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inactive Reason Code(STF-38).
	///</summary>
	public CWE InactiveReasonCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(38, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Generic resource type or category(STF-39).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetGenericResourceTypeOrCategory(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(39, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Generic resource type or category (STF-39).
   ///</summary>
  public CWE[] GetGenericResourceTypeOrCategory() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(39);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Generic resource type or category (STF-39).
   ///</summary>
  public int GenericResourceTypeOrCategoryRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(39);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Religion(STF-40).
	///</summary>
	public CWE Religion
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(40, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Signature(STF-41).
	///</summary>
	public ED Signature
	{
		get{
			ED ret = null;
			try
			{
			IType t = this.GetField(41, 0);
				ret = (ED)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\STZ.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 STZ message segment. 
/// This segment has the following fields:<ol>
///<li>STZ-1: Sterilization Type (CWE)</li>
///<li>STZ-2: Sterilization Cycle (CWE)</li>
///<li>STZ-3: Maintenance Cycle (CWE)</li>
///<li>STZ-4: Maintenance Type (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class STZ : AbstractSegment  {

  /**
   * Creates a STZ (Sterilization Parameter) segment object that belongs to the given 
   * message.  
   */
	public STZ(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Sterilization Type");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Sterilization Cycle");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Maintenance Cycle");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Maintenance Type");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Sterilization Type(STZ-1).
	///</summary>
	public CWE SterilizationType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sterilization Cycle(STZ-2).
	///</summary>
	public CWE SterilizationCycle
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Maintenance Cycle(STZ-3).
	///</summary>
	public CWE MaintenanceCycle
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Maintenance Type(STZ-4).
	///</summary>
	public CWE MaintenanceType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\TCC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 TCC message segment. 
/// This segment has the following fields:<ol>
///<li>TCC-1: Universal Service Identifier (CWE)</li>
///<li>TCC-2: Equipment Test Application Identifier (EI)</li>
///<li>TCC-3: Specimen Source (-)</li>
///<li>TCC-4: Auto-Dilution Factor Default (SN)</li>
///<li>TCC-5: Rerun Dilution Factor Default (SN)</li>
///<li>TCC-6: Pre-Dilution Factor Default (SN)</li>
///<li>TCC-7: Endogenous Content of Pre-Dilution Diluent (SN)</li>
///<li>TCC-8: Inventory Limits Warning Level (NM)</li>
///<li>TCC-9: Automatic Rerun Allowed (ID)</li>
///<li>TCC-10: Automatic Repeat Allowed (ID)</li>
///<li>TCC-11: Automatic Reflex Allowed (ID)</li>
///<li>TCC-12: Equipment Dynamic Range (SN)</li>
///<li>TCC-13: Units (CWE)</li>
///<li>TCC-14: Processing Type (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class TCC : AbstractSegment  {

  /**
   * Creates a TCC (Test Code Configuration) segment object that belongs to the given 
   * message.  
   */
	public TCC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Universal Service Identifier");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Equipment Test Application Identifier");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Specimen Source");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Auto-Dilution Factor Default");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Rerun Dilution Factor Default");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Pre-Dilution Factor Default");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Endogenous Content of Pre-Dilution Diluent");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Inventory Limits Warning Level");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Automatic Rerun Allowed");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Automatic Repeat Allowed");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Automatic Reflex Allowed");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Equipment Dynamic Range");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Units");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Processing Type");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Universal Service Identifier(TCC-1).
	///</summary>
	public CWE UniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Equipment Test Application Identifier(TCC-2).
	///</summary>
	public EI EquipmentTestApplicationIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Specimen Source(TCC-3).
	///</summary>
	public - SpecimenSource
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Auto-Dilution Factor Default(TCC-4).
	///</summary>
	public SN AutoDilutionFactorDefault
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Rerun Dilution Factor Default(TCC-5).
	///</summary>
	public SN RerunDilutionFactorDefault
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pre-Dilution Factor Default(TCC-6).
	///</summary>
	public SN PreDilutionFactorDefault
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Endogenous Content of Pre-Dilution Diluent(TCC-7).
	///</summary>
	public SN EndogenousContentOfPreDilutionDiluent
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Inventory Limits Warning Level(TCC-8).
	///</summary>
	public NM InventoryLimitsWarningLevel
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Automatic Rerun Allowed(TCC-9).
	///</summary>
	public ID AutomaticRerunAllowed
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Automatic Repeat Allowed(TCC-10).
	///</summary>
	public ID AutomaticRepeatAllowed
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Automatic Reflex Allowed(TCC-11).
	///</summary>
	public ID AutomaticReflexAllowed
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Equipment Dynamic Range(TCC-12).
	///</summary>
	public SN EquipmentDynamicRange
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Units(TCC-13).
	///</summary>
	public CWE Units
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Processing Type(TCC-14).
	///</summary>
	public CWE ProcessingType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\TCD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 TCD message segment. 
/// This segment has the following fields:<ol>
///<li>TCD-1: Universal Service Identifier (CWE)</li>
///<li>TCD-2: Auto-Dilution Factor (SN)</li>
///<li>TCD-3: Rerun Dilution Factor (SN)</li>
///<li>TCD-4: Pre-Dilution Factor (SN)</li>
///<li>TCD-5: Endogenous Content of Pre-Dilution Diluent (SN)</li>
///<li>TCD-6: Automatic Repeat Allowed (ID)</li>
///<li>TCD-7: Reflex Allowed (ID)</li>
///<li>TCD-8: Analyte Repeat Status (CWE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class TCD : AbstractSegment  {

  /**
   * Creates a TCD (Test Code Detail) segment object that belongs to the given 
   * message.  
   */
	public TCD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Universal Service Identifier");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Auto-Dilution Factor");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Rerun Dilution Factor");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Pre-Dilution Factor");
       this.add(typeof(SN), false, 1, 0, new System.Object[]{message}, "Endogenous Content of Pre-Dilution Diluent");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Automatic Repeat Allowed");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 136}, "Reflex Allowed");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Analyte Repeat Status");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Universal Service Identifier(TCD-1).
	///</summary>
	public CWE UniversalServiceIdentifier
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Auto-Dilution Factor(TCD-2).
	///</summary>
	public SN AutoDilutionFactor
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Rerun Dilution Factor(TCD-3).
	///</summary>
	public SN RerunDilutionFactor
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Pre-Dilution Factor(TCD-4).
	///</summary>
	public SN PreDilutionFactor
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Endogenous Content of Pre-Dilution Diluent(TCD-5).
	///</summary>
	public SN EndogenousContentOfPreDilutionDiluent
	{
		get{
			SN ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (SN)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Automatic Repeat Allowed(TCD-6).
	///</summary>
	public ID AutomaticRepeatAllowed
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Reflex Allowed(TCD-7).
	///</summary>
	public ID ReflexAllowed
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Analyte Repeat Status(TCD-8).
	///</summary>
	public CWE AnalyteRepeatStatus
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\TQ1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 TQ1 message segment. 
/// This segment has the following fields:<ol>
///<li>TQ1-1: Set ID - TQ1 (SI)</li>
///<li>TQ1-2: Quantity (CQ)</li>
///<li>TQ1-3: Repeat Pattern (RPT)</li>
///<li>TQ1-4: Explicit Time (TM)</li>
///<li>TQ1-5: Relative Time and Units (CQ)</li>
///<li>TQ1-6: Service Duration (CQ)</li>
///<li>TQ1-7: Start date/time (DTM)</li>
///<li>TQ1-8: End date/time (DTM)</li>
///<li>TQ1-9: Priority (CWE)</li>
///<li>TQ1-10: Condition text (TX)</li>
///<li>TQ1-11: Text instruction (TX)</li>
///<li>TQ1-12: Conjunction (ID)</li>
///<li>TQ1-13: Occurrence duration (CQ)</li>
///<li>TQ1-14: Total occurrences (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class TQ1 : AbstractSegment  {

  /**
   * Creates a TQ1 (Timing/Quantity) segment object that belongs to the given 
   * message.  
   */
	public TQ1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - TQ1");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Quantity");
       this.add(typeof(RPT), false, 0, 0, new System.Object[]{message}, "Repeat Pattern");
       this.add(typeof(TM), false, 0, 0, new System.Object[]{message}, "Explicit Time");
       this.add(typeof(CQ), false, 0, 0, new System.Object[]{message}, "Relative Time and Units");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Service Duration");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Start date/time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "End date/time");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Priority");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Condition text");
       this.add(typeof(TX), false, 1, 0, new System.Object[]{message}, "Text instruction");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 472}, "Conjunction");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Occurrence duration");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Total occurrences");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - TQ1(TQ1-1).
	///</summary>
	public SI SetIDTQ1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Quantity(TQ1-2).
	///</summary>
	public CQ Quantity
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Repeat Pattern(TQ1-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public RPT GetRepeatPattern(int rep)
	{
			RPT ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (RPT)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Repeat Pattern (TQ1-3).
   ///</summary>
  public RPT[] GetRepeatPattern() {
     RPT[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new RPT[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (RPT)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Repeat Pattern (TQ1-3).
   ///</summary>
  public int RepeatPatternRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Explicit Time(TQ1-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public TM GetExplicitTime(int rep)
	{
			TM ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (TM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Explicit Time (TQ1-4).
   ///</summary>
  public TM[] GetExplicitTime() {
     TM[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new TM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (TM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Explicit Time (TQ1-4).
   ///</summary>
  public int ExplicitTimeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Relative Time and Units(TQ1-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CQ GetRelativeTimeAndUnits(int rep)
	{
			CQ ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (CQ)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Relative Time and Units (TQ1-5).
   ///</summary>
  public CQ[] GetRelativeTimeAndUnits() {
     CQ[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new CQ[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CQ)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Relative Time and Units (TQ1-5).
   ///</summary>
  public int RelativeTimeAndUnitsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Service Duration(TQ1-6).
	///</summary>
	public CQ ServiceDuration
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Start date/time(TQ1-7).
	///</summary>
	public DTM StartDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns End date/time(TQ1-8).
	///</summary>
	public DTM EndDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Priority(TQ1-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetPriority(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Priority (TQ1-9).
   ///</summary>
  public CWE[] GetPriority() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Priority (TQ1-9).
   ///</summary>
  public int PriorityRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Condition text(TQ1-10).
	///</summary>
	public TX ConditionText
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Text instruction(TQ1-11).
	///</summary>
	public TX TextInstruction
	{
		get{
			TX ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (TX)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Conjunction(TQ1-12).
	///</summary>
	public ID Conjunction
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Occurrence duration(TQ1-13).
	///</summary>
	public CQ OccurrenceDuration
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Total occurrences(TQ1-14).
	///</summary>
	public NM TotalOccurrences
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\TQ2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 TQ2 message segment. 
/// This segment has the following fields:<ol>
///<li>TQ2-1: Set ID - TQ2 (SI)</li>
///<li>TQ2-2: Sequence/Results Flag (ID)</li>
///<li>TQ2-3: Related Placer Number (EI)</li>
///<li>TQ2-4: Related Filler Number (EI)</li>
///<li>TQ2-5: Related Placer Group Number (EI)</li>
///<li>TQ2-6: Sequence Condition Code (ID)</li>
///<li>TQ2-7: Cyclic Entry/Exit Indicator (ID)</li>
///<li>TQ2-8: Sequence Condition Time Interval (CQ)</li>
///<li>TQ2-9: Cyclic Group Maximum Number of Repeats (NM)</li>
///<li>TQ2-10: Special Service Request Relationship (ID)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class TQ2 : AbstractSegment  {

  /**
   * Creates a TQ2 (Timing/Quantity Relationship) segment object that belongs to the given 
   * message.  
   */
	public TQ2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - TQ2");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 503}, "Sequence/Results Flag");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Related Placer Number");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Related Filler Number");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Related Placer Group Number");
       this.add(typeof(ID), false, 1, 0, new System.Object[]{message, 504}, "Sequence Condition Code");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 505}, "Cyclic Entry/Exit Indicator");
       this.add(typeof(CQ), false, 1, 0, new System.Object[]{message}, "Sequence Condition Time Interval");
       this.add(typeof(NM), false, 1, 0, new System.Object[]{message}, "Cyclic Group Maximum Number of Repeats");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 506}, "Special Service Request Relationship");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - TQ2(TQ2-1).
	///</summary>
	public SI SetIDTQ2
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sequence/Results Flag(TQ2-2).
	///</summary>
	public ID SequenceResultsFlag
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Related Placer Number(TQ2-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetRelatedPlacerNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Related Placer Number (TQ2-3).
   ///</summary>
  public EI[] GetRelatedPlacerNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Related Placer Number (TQ2-3).
   ///</summary>
  public int RelatedPlacerNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Related Filler Number(TQ2-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetRelatedFillerNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Related Filler Number (TQ2-4).
   ///</summary>
  public EI[] GetRelatedFillerNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Related Filler Number (TQ2-4).
   ///</summary>
  public int RelatedFillerNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Related Placer Group Number(TQ2-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetRelatedPlacerGroupNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Related Placer Group Number (TQ2-5).
   ///</summary>
  public EI[] GetRelatedPlacerGroupNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Related Placer Group Number (TQ2-5).
   ///</summary>
  public int RelatedPlacerGroupNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Sequence Condition Code(TQ2-6).
	///</summary>
	public ID SequenceConditionCode
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cyclic Entry/Exit Indicator(TQ2-7).
	///</summary>
	public ID CyclicEntryExitIndicator
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Sequence Condition Time Interval(TQ2-8).
	///</summary>
	public CQ SequenceConditionTimeInterval
	{
		get{
			CQ ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (CQ)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Cyclic Group Maximum Number of Repeats(TQ2-9).
	///</summary>
	public NM CyclicGroupMaximumNumberOfRepeats
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Special Service Request Relationship(TQ2-10).
	///</summary>
	public ID SpecialServiceRequestRelationship
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(10, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\TXA.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 TXA message segment. 
/// This segment has the following fields:<ol>
///<li>TXA-1: Set ID- TXA (SI)</li>
///<li>TXA-2: Document Type (CWE)</li>
///<li>TXA-3: Document Content Presentation (ID)</li>
///<li>TXA-4: Activity Date/Time (DTM)</li>
///<li>TXA-5: Primary Activity Provider Code/Name (XCN)</li>
///<li>TXA-6: Origination Date/Time (DTM)</li>
///<li>TXA-7: Transcription Date/Time (DTM)</li>
///<li>TXA-8: Edit Date/Time (DTM)</li>
///<li>TXA-9: Originator Code/Name (XCN)</li>
///<li>TXA-10: Assigned Document Authenticator (XCN)</li>
///<li>TXA-11: Transcriptionist Code/Name (XCN)</li>
///<li>TXA-12: Unique Document Number (EI)</li>
///<li>TXA-13: Parent Document Number (EI)</li>
///<li>TXA-14: Placer Order Number (EI)</li>
///<li>TXA-15: Filler Order Number (EI)</li>
///<li>TXA-16: Unique Document File Name (ST)</li>
///<li>TXA-17: Document Completion Status (ID)</li>
///<li>TXA-18: Document Confidentiality Status (ID)</li>
///<li>TXA-19: Document Availability Status (ID)</li>
///<li>TXA-20: Document Storage Status (ID)</li>
///<li>TXA-21: Document Change Reason (ST)</li>
///<li>TXA-22: Authentication Person, Time Stamp (set) (PPN)</li>
///<li>TXA-23: Distributed Copies (Code and Name of Recipient(s) ) (XCN)</li>
///<li>TXA-24: Folder Assignment (CWE)</li>
///<li>TXA-25: Document Title (ST)</li>
///<li>TXA-26: Agreed Due Date/Time (DTM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class TXA : AbstractSegment  {

  /**
   * Creates a TXA (Transcription Document Header) segment object that belongs to the given 
   * message.  
   */
	public TXA(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set ID- TXA");
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "Document Type");
       this.add(typeof(ID), false, 1, 0, new System.Object[]{message, 191}, "Document Content Presentation");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Activity Date/Time");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Primary Activity Provider Code/Name");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Origination Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Transcription Date/Time");
       this.add(typeof(DTM), false, 0, 0, new System.Object[]{message}, "Edit Date/Time");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Originator Code/Name");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Assigned Document Authenticator");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Transcriptionist Code/Name");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Unique Document Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Parent Document Number");
       this.add(typeof(EI), false, 0, 0, new System.Object[]{message}, "Placer Order Number");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Filler Order Number");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Unique Document File Name");
       this.add(typeof(ID), true, 1, 2, new System.Object[]{message, 271}, "Document Completion Status");
       this.add(typeof(ID), false, 1, 1, new System.Object[]{message, 272}, "Document Confidentiality Status");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 273}, "Document Availability Status");
       this.add(typeof(ID), false, 1, 2, new System.Object[]{message, 275}, "Document Storage Status");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Document Change Reason");
       this.add(typeof(PPN), false, 0, 0, new System.Object[]{message}, "Authentication Person, Time Stamp (set)");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Distributed Copies (Code and Name of Recipient(s) )");
       this.add(typeof(CWE), false, 0, 0, new System.Object[]{message}, "Folder Assignment");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Document Title");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Agreed Due Date/Time");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID- TXA(TXA-1).
	///</summary>
	public SI SetIDTXA
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Type(TXA-2).
	///</summary>
	public CWE DocumentType
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Content Presentation(TXA-3).
	///</summary>
	public ID DocumentContentPresentation
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Activity Date/Time(TXA-4).
	///</summary>
	public DTM ActivityDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Primary Activity Provider Code/Name(TXA-5).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetPrimaryActivityProviderCodeName(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(5, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Primary Activity Provider Code/Name (TXA-5).
   ///</summary>
  public XCN[] GetPrimaryActivityProviderCodeName() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(5);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Primary Activity Provider Code/Name (TXA-5).
   ///</summary>
  public int PrimaryActivityProviderCodeNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(5);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Origination Date/Time(TXA-6).
	///</summary>
	public DTM OriginationDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Transcription Date/Time(TXA-7).
	///</summary>
	public DTM TranscriptionDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(7, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Edit Date/Time(TXA-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public DTM GetEditDateTime(int rep)
	{
			DTM ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (DTM)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Edit Date/Time (TXA-8).
   ///</summary>
  public DTM[] GetEditDateTime() {
     DTM[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new DTM[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (DTM)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Edit Date/Time (TXA-8).
   ///</summary>
  public int EditDateTimeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Originator Code/Name(TXA-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetOriginatorCodeName(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Originator Code/Name (TXA-9).
   ///</summary>
  public XCN[] GetOriginatorCodeName() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Originator Code/Name (TXA-9).
   ///</summary>
  public int OriginatorCodeNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Assigned Document Authenticator(TXA-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetAssignedDocumentAuthenticator(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Assigned Document Authenticator (TXA-10).
   ///</summary>
  public XCN[] GetAssignedDocumentAuthenticator() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Assigned Document Authenticator (TXA-10).
   ///</summary>
  public int AssignedDocumentAuthenticatorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Transcriptionist Code/Name(TXA-11).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetTranscriptionistCodeName(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(11, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Transcriptionist Code/Name (TXA-11).
   ///</summary>
  public XCN[] GetTranscriptionistCodeName() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(11);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Transcriptionist Code/Name (TXA-11).
   ///</summary>
  public int TranscriptionistCodeNameRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(11);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Unique Document Number(TXA-12).
	///</summary>
	public EI UniqueDocumentNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Parent Document Number(TXA-13).
	///</summary>
	public EI ParentDocumentNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Placer Order Number(TXA-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public EI GetPlacerOrderNumber(int rep)
	{
			EI ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (EI)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Placer Order Number (TXA-14).
   ///</summary>
  public EI[] GetPlacerOrderNumber() {
     EI[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new EI[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (EI)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Placer Order Number (TXA-14).
   ///</summary>
  public int PlacerOrderNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Filler Order Number(TXA-15).
	///</summary>
	public EI FillerOrderNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Unique Document File Name(TXA-16).
	///</summary>
	public ST UniqueDocumentFileName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(16, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Completion Status(TXA-17).
	///</summary>
	public ID DocumentCompletionStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Confidentiality Status(TXA-18).
	///</summary>
	public ID DocumentConfidentialityStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Availability Status(TXA-19).
	///</summary>
	public ID DocumentAvailabilityStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Storage Status(TXA-20).
	///</summary>
	public ID DocumentStorageStatus
	{
		get{
			ID ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (ID)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Document Change Reason(TXA-21).
	///</summary>
	public ST DocumentChangeReason
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Authentication Person, Time Stamp (set)(TXA-22).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public PPN GetAuthenticationPersonTimeStampSet(int rep)
	{
			PPN ret = null;
			try
			{
			IType t = this.GetField(22, rep);
				ret = (PPN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Authentication Person, Time Stamp (set) (TXA-22).
   ///</summary>
  public PPN[] GetAuthenticationPersonTimeStampSet() {
     PPN[] ret = null;
    try {
        IType[] t = this.GetField(22);  
        ret = new PPN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (PPN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Authentication Person, Time Stamp (set) (TXA-22).
   ///</summary>
  public int AuthenticationPersonTimeStampSetRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(22);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Distributed Copies (Code and Name of Recipient(s) )(TXA-23).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetDistributedCopiesCodeandNameofRecipients(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(23, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Distributed Copies (Code and Name of Recipient(s) ) (TXA-23).
   ///</summary>
  public XCN[] GetDistributedCopiesCodeandNameofRecipients() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(23);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Distributed Copies (Code and Name of Recipient(s) ) (TXA-23).
   ///</summary>
  public int DistributedCopiesCodeandNameofRecipientsRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(23);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Folder Assignment(TXA-24).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetFolderAssignment(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(24, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Folder Assignment (TXA-24).
   ///</summary>
  public CWE[] GetFolderAssignment() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(24);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Folder Assignment (TXA-24).
   ///</summary>
  public int FolderAssignmentRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(24);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Document Title(TXA-25).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetDocumentTitle(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(25, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Document Title (TXA-25).
   ///</summary>
  public ST[] GetDocumentTitle() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(25);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Document Title (TXA-25).
   ///</summary>
  public int DocumentTitleRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(25);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Agreed Due Date/Time(TXA-26).
	///</summary>
	public DTM AgreedDueDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(26, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\UAC.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 UAC message segment. 
/// This segment has the following fields:<ol>
///<li>UAC-1: User Authentication Credential Type Code (CWE)</li>
///<li>UAC-2: User Authentication Credential (ED)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class UAC : AbstractSegment  {

  /**
   * Creates a UAC (User Authentication Credential Segment) segment object that belongs to the given 
   * message.  
   */
	public UAC(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(CWE), true, 1, 0, new System.Object[]{message}, "User Authentication Credential Type Code");
       this.add(typeof(ED), true, 1, 0, new System.Object[]{message}, "User Authentication Credential");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns User Authentication Credential Type Code(UAC-1).
	///</summary>
	public CWE UserAuthenticationCredentialTypeCode
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns User Authentication Credential(UAC-2).
	///</summary>
	public ED UserAuthenticationCredential
	{
		get{
			ED ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ED)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\UB1.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 UB1 message segment. 
/// This segment has the following fields:<ol>
///<li>UB1-1: Set ID - UB1 (SI)</li>
///<li>UB1-2: Blood Deductible (-)</li>
///<li>UB1-3: Blood Furnished-Pints (-)</li>
///<li>UB1-4: Blood Replaced-Pints (-)</li>
///<li>UB1-5: Blood Not Replaced-Pints (-)</li>
///<li>UB1-6: Co-Insurance Days (-)</li>
///<li>UB1-7: Condition Code (-)</li>
///<li>UB1-8: Covered Days (-)</li>
///<li>UB1-9: Non Covered Days (-)</li>
///<li>UB1-10: Value Amount and Code (-)</li>
///<li>UB1-11: Number Of Grace Days (-)</li>
///<li>UB1-12: Special Program Indicator (-)</li>
///<li>UB1-13: PSRO/UR Approval Indicator (-)</li>
///<li>UB1-14: PSRO/UR Approved Stay-Fm (-)</li>
///<li>UB1-15: PSRO/UR Approved Stay-To (-)</li>
///<li>UB1-16: Occurrence (-)</li>
///<li>UB1-17: Occurrence Span (-)</li>
///<li>UB1-18: Occur Span Start Date (-)</li>
///<li>UB1-19: Occur Span End Date (-)</li>
///<li>UB1-20: UB-82 Locator 2 (-)</li>
///<li>UB1-21: UB-82 Locator 9 (-)</li>
///<li>UB1-22: UB-82 Locator 27 (-)</li>
///<li>UB1-23: UB-82 Locator 45 (-)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class UB1 : AbstractSegment  {

  /**
   * Creates a UB1 (UB82) segment object that belongs to the given 
   * message.  
   */
	public UB1(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 0, new System.Object[]{message}, "Set ID - UB1");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Blood Deductible");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Blood Furnished-Pints");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Blood Replaced-Pints");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Blood Not Replaced-Pints");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Co-Insurance Days");
       this.add(typeof(-), false, 5, 0, new System.Object[]{message}, "Condition Code");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Covered Days");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Non Covered Days");
       this.add(typeof(-), false, 8, 0, new System.Object[]{message}, "Value Amount and Code");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Number Of Grace Days");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Special Program Indicator");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "PSRO/UR Approval Indicator");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "PSRO/UR Approved Stay-Fm");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "PSRO/UR Approved Stay-To");
       this.add(typeof(-), false, 5, 0, new System.Object[]{message}, "Occurrence");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Occurrence Span");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Occur Span Start Date");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "Occur Span End Date");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "UB-82 Locator 2");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "UB-82 Locator 9");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "UB-82 Locator 27");
       this.add(typeof(-), false, 1, 0, new System.Object[]{message}, "UB-82 Locator 45");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - UB1(UB1-1).
	///</summary>
	public SI SetIDUB1
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Blood Deductible(UB1-2).
	///</summary>
	public - BloodDeductible
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Blood Furnished-Pints(UB1-3).
	///</summary>
	public - BloodFurnishedPints
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Blood Replaced-Pints(UB1-4).
	///</summary>
	public - BloodReplacedPints
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Blood Not Replaced-Pints(UB1-5).
	///</summary>
	public - BloodNotReplacedPints
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Co-Insurance Days(UB1-6).
	///</summary>
	public - CoInsuranceDays
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(6, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Condition Code(UB1-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public - GetConditionCode(int rep)
	{
			- ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (-)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Condition Code (UB1-7).
   ///</summary>
  public -[] GetConditionCode() {
     -[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new -[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (-)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Condition Code (UB1-7).
   ///</summary>
  public int ConditionCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Covered Days(UB1-8).
	///</summary>
	public - CoveredDays
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(8, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Non Covered Days(UB1-9).
	///</summary>
	public - NonCoveredDays
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(9, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Value Amount and Code(UB1-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public - GetValueAmountCode(int rep)
	{
			- ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (-)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Value Amount and Code (UB1-10).
   ///</summary>
  public -[] GetValueAmountCode() {
     -[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new -[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (-)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Value Amount and Code (UB1-10).
   ///</summary>
  public int ValueAmountCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Number Of Grace Days(UB1-11).
	///</summary>
	public - NumberOfGraceDays
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Special Program Indicator(UB1-12).
	///</summary>
	public - SpecialProgramIndicator
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(12, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns PSRO/UR Approval Indicator(UB1-13).
	///</summary>
	public - PSROURApprovalIndicator
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(13, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns PSRO/UR Approved Stay-Fm(UB1-14).
	///</summary>
	public - PSROURApprovedStayFm
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(14, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns PSRO/UR Approved Stay-To(UB1-15).
	///</summary>
	public - PSROURApprovedStayTo
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Occurrence(UB1-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public - GetOccurrence(int rep)
	{
			- ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (-)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Occurrence (UB1-16).
   ///</summary>
  public -[] GetOccurrence() {
     -[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new -[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (-)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Occurrence (UB1-16).
   ///</summary>
  public int OccurrenceRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Occurrence Span(UB1-17).
	///</summary>
	public - OccurrenceSpan
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Occur Span Start Date(UB1-18).
	///</summary>
	public - OccurSpanStartDate
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(18, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Occur Span End Date(UB1-19).
	///</summary>
	public - OccurSpanEndDate
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(19, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns UB-82 Locator 2(UB1-20).
	///</summary>
	public - UB82Locator2
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(20, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns UB-82 Locator 9(UB1-21).
	///</summary>
	public - UB82Locator9
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(21, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns UB-82 Locator 27(UB1-22).
	///</summary>
	public - UB82Locator27
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(22, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns UB-82 Locator 45(UB1-23).
	///</summary>
	public - UB82Locator45
	{
		get{
			- ret = null;
			try
			{
			IType t = this.GetField(23, 0);
				ret = (-)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\UB2.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 UB2 message segment. 
/// This segment has the following fields:<ol>
///<li>UB2-1: Set ID - UB2 (SI)</li>
///<li>UB2-2: Co-Insurance Days (9) (ST)</li>
///<li>UB2-3: Condition Code (24-30) (CWE)</li>
///<li>UB2-4: Covered Days (7) (ST)</li>
///<li>UB2-5: Non-Covered Days (8) (ST)</li>
///<li>UB2-6: Value Amount and Code (UVC)</li>
///<li>UB2-7: Occurrence Code and Date (32-35) (OCD)</li>
///<li>UB2-8: Occurrence Span Code/Dates (36) (OSP)</li>
///<li>UB2-9: Uniform Billing Locator 2 (State) (ST)</li>
///<li>UB2-10: Uniform Billing 11 (State) (ST)</li>
///<li>UB2-11: Uniform Billing 31 (National) (ST)</li>
///<li>UB2-12: Document Control Number (ST)</li>
///<li>UB2-13: Uniform Billing 49 (National) (ST)</li>
///<li>UB2-14: Uniform Billing 56 (State) (ST)</li>
///<li>UB2-15: Uniform Billing 57 (National) (ST)</li>
///<li>UB2-16: Uniform Billing 78 (State) (ST)</li>
///<li>UB2-17: Special Visit Count (NM)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class UB2 : AbstractSegment  {

  /**
   * Creates a UB2 (Uniform Billing Data) segment object that belongs to the given 
   * message.  
   */
	public UB2(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), false, 1, 4, new System.Object[]{message}, "Set ID - UB2");
       this.add(typeof(ST), false, 1, 3, new System.Object[]{message}, "Co-Insurance Days (9)");
       this.add(typeof(CWE), false, 7, 0, new System.Object[]{message}, "Condition Code (24-30)");
       this.add(typeof(ST), false, 1, 3, new System.Object[]{message}, "Covered Days (7)");
       this.add(typeof(ST), false, 1, 4, new System.Object[]{message}, "Non-Covered Days (8)");
       this.add(typeof(UVC), false, 12, 0, new System.Object[]{message}, "Value Amount and Code");
       this.add(typeof(OCD), false, 8, 0, new System.Object[]{message}, "Occurrence Code and Date (32-35)");
       this.add(typeof(OSP), false, 2, 0, new System.Object[]{message}, "Occurrence Span Code/Dates (36)");
       this.add(typeof(ST), false, 2, 29, new System.Object[]{message}, "Uniform Billing Locator 2 (State)");
       this.add(typeof(ST), false, 2, 12, new System.Object[]{message}, "Uniform Billing 11 (State)");
       this.add(typeof(ST), false, 1, 5, new System.Object[]{message}, "Uniform Billing 31 (National)");
       this.add(typeof(ST), false, 3, 23, new System.Object[]{message}, "Document Control Number");
       this.add(typeof(ST), false, 23, 4, new System.Object[]{message}, "Uniform Billing 49 (National)");
       this.add(typeof(ST), false, 5, 14, new System.Object[]{message}, "Uniform Billing 56 (State)");
       this.add(typeof(ST), false, 1, 27, new System.Object[]{message}, "Uniform Billing 57 (National)");
       this.add(typeof(ST), false, 2, 2, new System.Object[]{message}, "Uniform Billing 78 (State)");
       this.add(typeof(NM), false, 1, 3, new System.Object[]{message}, "Special Visit Count");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set ID - UB2(UB2-1).
	///</summary>
	public SI SetIDUB2
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Co-Insurance Days (9)(UB2-2).
	///</summary>
	public ST CoInsuranceDays9
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Condition Code (24-30)(UB2-3).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public CWE GetConditionCode2430(int rep)
	{
			CWE ret = null;
			try
			{
			IType t = this.GetField(3, rep);
				ret = (CWE)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Condition Code (24-30) (UB2-3).
   ///</summary>
  public CWE[] GetConditionCode2430() {
     CWE[] ret = null;
    try {
        IType[] t = this.GetField(3);  
        ret = new CWE[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (CWE)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Condition Code (24-30) (UB2-3).
   ///</summary>
  public int ConditionCode2430RepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(3);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Covered Days (7)(UB2-4).
	///</summary>
	public ST CoveredDays7
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Non-Covered Days (8)(UB2-5).
	///</summary>
	public ST NonCoveredDays8
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Value Amount and Code(UB2-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public UVC GetValueAmountCode(int rep)
	{
			UVC ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (UVC)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Value Amount and Code (UB2-6).
   ///</summary>
  public UVC[] GetValueAmountCode() {
     UVC[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new UVC[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (UVC)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Value Amount and Code (UB2-6).
   ///</summary>
  public int ValueAmountCodeRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Occurrence Code and Date (32-35)(UB2-7).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public OCD GetOccurrenceCodeDate3235(int rep)
	{
			OCD ret = null;
			try
			{
			IType t = this.GetField(7, rep);
				ret = (OCD)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Occurrence Code and Date (32-35) (UB2-7).
   ///</summary>
  public OCD[] GetOccurrenceCodeDate3235() {
     OCD[] ret = null;
    try {
        IType[] t = this.GetField(7);  
        ret = new OCD[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (OCD)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Occurrence Code and Date (32-35) (UB2-7).
   ///</summary>
  public int OccurrenceCodeDate3235RepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(7);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Occurrence Span Code/Dates (36)(UB2-8).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public OSP GetOccurrenceSpanCodeDates(int rep)
	{
			OSP ret = null;
			try
			{
			IType t = this.GetField(8, rep);
				ret = (OSP)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Occurrence Span Code/Dates (36) (UB2-8).
   ///</summary>
  public OSP[] GetOccurrenceSpanCodeDates() {
     OSP[] ret = null;
    try {
        IType[] t = this.GetField(8);  
        ret = new OSP[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (OSP)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Occurrence Span Code/Dates (36) (UB2-8).
   ///</summary>
  public int OccurrenceSpanCodeDatesRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(8);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Uniform Billing Locator 2 (State)(UB2-9).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetUniformBillingLocator2State(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(9, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Uniform Billing Locator 2 (State) (UB2-9).
   ///</summary>
  public ST[] GetUniformBillingLocator2State() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(9);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Uniform Billing Locator 2 (State) (UB2-9).
   ///</summary>
  public int UniformBillingLocator2StateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(9);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Uniform Billing 11 (State)(UB2-10).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetUniformBilling11State(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(10, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Uniform Billing 11 (State) (UB2-10).
   ///</summary>
  public ST[] GetUniformBilling11State() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(10);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Uniform Billing 11 (State) (UB2-10).
   ///</summary>
  public int UniformBilling11StateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(10);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Uniform Billing 31 (National)(UB2-11).
	///</summary>
	public ST UniformBilling31National
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(11, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Document Control Number(UB2-12).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetDocumentControlNumber(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(12, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Document Control Number (UB2-12).
   ///</summary>
  public ST[] GetDocumentControlNumber() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(12);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Document Control Number (UB2-12).
   ///</summary>
  public int DocumentControlNumberRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(12);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Uniform Billing 49 (National)(UB2-13).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetUniformBilling49National(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(13, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Uniform Billing 49 (National) (UB2-13).
   ///</summary>
  public ST[] GetUniformBilling49National() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(13);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Uniform Billing 49 (National) (UB2-13).
   ///</summary>
  public int UniformBilling49NationalRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(13);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns a single repetition of Uniform Billing 56 (State)(UB2-14).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetUniformBilling56State(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(14, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Uniform Billing 56 (State) (UB2-14).
   ///</summary>
  public ST[] GetUniformBilling56State() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(14);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Uniform Billing 56 (State) (UB2-14).
   ///</summary>
  public int UniformBilling56StateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(14);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Uniform Billing 57 (National)(UB2-15).
	///</summary>
	public ST UniformBilling57National
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(15, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Uniform Billing 78 (State)(UB2-16).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetUniformBilling78State(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(16, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Uniform Billing 78 (State) (UB2-16).
   ///</summary>
  public ST[] GetUniformBilling78State() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(16);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Uniform Billing 78 (State) (UB2-16).
   ///</summary>
  public int UniformBilling78StateRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(16);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Special Visit Count(UB2-17).
	///</summary>
	public NM SpecialVisitCount
	{
		get{
			NM ret = null;
			try
			{
			IType t = this.GetField(17, 0);
				ret = (NM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\URD.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 URD message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class URD : AbstractSegment  {

  /**
   * Creates a URD () segment object that belongs to the given 
   * message.  
   */
	public URD(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\URS.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 URS message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class URS : AbstractSegment  {

  /**
   * Creates a URS () segment object that belongs to the given 
   * message.  
   */
	public URS(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\VAR.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 VAR message segment. 
/// This segment has the following fields:<ol>
///<li>VAR-1: Variance Instance ID (EI)</li>
///<li>VAR-2: Documented Date/Time (DTM)</li>
///<li>VAR-3: Stated Variance Date/Time (DTM)</li>
///<li>VAR-4: Variance Originator (XCN)</li>
///<li>VAR-5: Variance Classification (CWE)</li>
///<li>VAR-6: Variance Description (ST)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class VAR : AbstractSegment  {

  /**
   * Creates a VAR (Variance) segment object that belongs to the given 
   * message.  
   */
	public VAR(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Variance Instance ID");
       this.add(typeof(DTM), true, 1, 0, new System.Object[]{message}, "Documented Date/Time");
       this.add(typeof(DTM), false, 1, 0, new System.Object[]{message}, "Stated Variance Date/Time");
       this.add(typeof(XCN), false, 0, 0, new System.Object[]{message}, "Variance Originator");
       this.add(typeof(CWE), false, 1, 0, new System.Object[]{message}, "Variance Classification");
       this.add(typeof(ST), false, 0, 0, new System.Object[]{message}, "Variance Description");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Variance Instance ID(VAR-1).
	///</summary>
	public EI VarianceInstanceID
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Documented Date/Time(VAR-2).
	///</summary>
	public DTM DocumentedDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Stated Variance Date/Time(VAR-3).
	///</summary>
	public DTM StatedVarianceDateTime
	{
		get{
			DTM ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (DTM)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Variance Originator(VAR-4).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public XCN GetVarianceOriginator(int rep)
	{
			XCN ret = null;
			try
			{
			IType t = this.GetField(4, rep);
				ret = (XCN)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Variance Originator (VAR-4).
   ///</summary>
  public XCN[] GetVarianceOriginator() {
     XCN[] ret = null;
    try {
        IType[] t = this.GetField(4);  
        ret = new XCN[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (XCN)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Variance Originator (VAR-4).
   ///</summary>
  public int VarianceOriginatorRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(4);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}
	///<summary>
	/// Returns Variance Classification(VAR-5).
	///</summary>
	public CWE VarianceClassification
	{
		get{
			CWE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CWE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns a single repetition of Variance Description(VAR-6).
	/// throws HL7Exception if the repetition number is invalid.
	/// <param name="rep">The repetition number (this is a repeating field)</param>
	///</summary>
	public ST GetVarianceDescription(int rep)
	{
			ST ret = null;
			try
			{
			IType t = this.GetField(6, rep);
				ret = (ST)t;
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
  }

  ///<summary>
  /// Returns all repetitions of Variance Description (VAR-6).
   ///</summary>
  public ST[] GetVarianceDescription() {
     ST[] ret = null;
    try {
        IType[] t = this.GetField(6);  
        ret = new ST[t.Length];
        for (int i = 0; i < ret.Length; i++) {
            ret[i] = (ST)t[i];
        }
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
    } catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
  }
 return ret;
}

  ///<summary>
  /// Returns the total repetitions of Variance Description (VAR-6).
   ///</summary>
  public int VarianceDescriptionRepetitionsUsed
{
get{
    try {
	return GetTotalFieldRepetitionsUsed(6);
    }
catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
        throw new System.Exception("An unexpected error occurred", he);
} catch (System.Exception cce) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", cce);
        throw new System.Exception("An unexpected error occurred", cce);
}
}
}

}},
  basepath\\NHapi.Model.V27\\Segment\\VND.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 VND message segment. 
/// This segment has the following fields:<ol>
///<li>VND-1: Set Id - VND (SI)</li>
///<li>VND-2: Vendor Identifier (EI)</li>
///<li>VND-3: Vendor Name (ST)</li>
///<li>VND-4: Vendor Catalog Number (EI)</li>
///<li>VND-5: Primary Vendor Indicator (CNE)</li>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class VND : AbstractSegment  {

  /**
   * Creates a VND (Purchasing Vendor) segment object that belongs to the given 
   * message.  
   */
	public VND(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
    try {
       this.add(typeof(SI), true, 1, 4, new System.Object[]{message}, "Set Id - VND");
       this.add(typeof(EI), true, 1, 0, new System.Object[]{message}, "Vendor Identifier");
       this.add(typeof(ST), false, 1, 0, new System.Object[]{message}, "Vendor Name");
       this.add(typeof(EI), false, 1, 0, new System.Object[]{message}, "Vendor Catalog Number");
       this.add(typeof(CNE), false, 1, 0, new System.Object[]{message}, "Primary Vendor Indicator");
    } catch (HL7Exception he) {
        HapiLogFactory.GetHapiLog(GetType()).Error("Can't instantiate " + GetType().Name, he);
    }
  }

	///<summary>
	/// Returns Set Id - VND(VND-1).
	///</summary>
	public SI SetIdVND
	{
		get{
			SI ret = null;
			try
			{
			IType t = this.GetField(1, 0);
				ret = (SI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Vendor Identifier(VND-2).
	///</summary>
	public EI VendorIdentifier
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(2, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Vendor Name(VND-3).
	///</summary>
	public ST VendorName
	{
		get{
			ST ret = null;
			try
			{
			IType t = this.GetField(3, 0);
				ret = (ST)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Vendor Catalog Number(VND-4).
	///</summary>
	public EI VendorCatalogNumber
	{
		get{
			EI ret = null;
			try
			{
			IType t = this.GetField(4, 0);
				ret = (EI)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }

	///<summary>
	/// Returns Primary Vendor Indicator(VND-5).
	///</summary>
	public CNE PrimaryVendorIndicator
	{
		get{
			CNE ret = null;
			try
			{
			IType t = this.GetField(5, 0);
				ret = (CNE)t;
			}
			 catch (HL7Exception he) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", he);
				throw new System.Exception("An unexpected error occurred", he);
		} catch (System.Exception ex) {
			HapiLogFactory.GetHapiLog(GetType()).Error("Unexpected problem obtaining field value.  This is a bug.", ex);
				throw new System.Exception("An unexpected error occurred", ex);
    }
			return ret;
	}
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\ZL7.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 ZL7 message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class ZL7 : AbstractSegment  {

  /**
   * Creates a ZL7 () segment object that belongs to the given 
   * message.  
   */
	public ZL7(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}},
  basepath\\NHapi.Model.V27\\Segment\\Zxx.cs:
using System;
using NHapi.Base;
using NHapi.Base.Parser;
using NHapi.Base.Model;
using NHapi.Model.V27.Datatype;
using NHapi.Base.Log;

namespace NHapi.Model.V27.Segment{

///<summary>
/// Represents an HL7 Zxx message segment. 
/// This segment has the following fields:<ol>
///</ol>
/// The get...() methods return data from individual fields.  These methods 
/// do not throw exceptions and may therefore have to handle exceptions internally.  
/// If an exception is handled internally, it is logged and null is returned.  
/// This is not expected to happen - if it does happen this indicates not so much 
/// an exceptional circumstance as a bug in the code for this class.
///</summary>
[Serializable]
public class Zxx : AbstractSegment  {

  /**
   * Creates a Zxx () segment object that belongs to the given 
   * message.  
   */
	public Zxx(IGroup parent, IModelClassFactory factory) : base(parent,factory) {
	IMessage message = Message;
  }


}}
}