{
  basepath\\NHapi.Model.V27\\Datatype\\AD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 AD (Address) data type.  Consists of the following components: </p><ol>
/// <li>Street Address (ST)</li>
/// <li>Other Designation (ST)</li>
/// <li>City (ST)</li>
/// <li>State or Province (ST)</li>
/// <li>Zip or Postal Code (ST)</li>
/// <li>Country (ID)</li>
/// <li>Address Type (ID)</li>
/// <li>Other Geographic Designation (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class AD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a AD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public AD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a AD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public AD(IMessage message, string description) : base(message, description){
		data = new IType[8];
		data[0] = new ST(message,"Street Address");
		data[1] = new ST(message,"Other Designation");
		data[2] = new ST(message,"City");
		data[3] = new ST(message,"State or Province");
		data[4] = new ST(message,"Zip or Postal Code");
		data[5] = new ID(message, 399,"Country");
		data[6] = new ID(message, 190,"Address Type");
		data[7] = new ST(message,"Other Geographic Designation");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 8 element AD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Street Address (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Other Designation (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns City (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST City {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns State or Province (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOrProvince {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Zip or Postal Code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ZipOrPostalCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Country (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Country {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Type (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Other Geographic Designation (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherGeographicDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\AUI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 AUI (Authorization Information) data type.  Consists of the following components: </p><ol>
/// <li>Authorization Number (ST)</li>
/// <li>Date (DT)</li>
/// <li>Source (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class AUI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a AUI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public AUI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a AUI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public AUI(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"Authorization Number");
		data[1] = new DT(message,"Date");
		data[2] = new ST(message,"Source");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element AUI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Authorization Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AuthorizationNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT Date {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Source (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Source {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CCD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CCD (Charge Code and Date) data type.  Consists of the following components: </p><ol>
/// <li>Invocation Event (ID)</li>
/// <li>Date/time (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class CCD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CCD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CCD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CCD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CCD(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ID(message, 100,"Invocation Event");
		data[1] = new DTM(message,"Date/time");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CCD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Invocation Event (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID InvocationEvent {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Date/time (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM DateTime {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CCP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CCP (Channel Calibration Parameters) data type.  Consists of the following components: </p><ol>
/// <li>Channel Calibration Sensitivity Correction Factor (NM)</li>
/// <li>Channel Calibration Baseline (NM)</li>
/// <li>Channel Calibration Time Skew (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class CCP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CCP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CCP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CCP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CCP(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new NM(message,"Channel Calibration Sensitivity Correction Factor");
		data[1] = new NM(message,"Channel Calibration Baseline");
		data[2] = new NM(message,"Channel Calibration Time Skew");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element CCP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Channel Calibration Sensitivity Correction Factor (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelCalibrationSensitivityCorrectionFactor {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Calibration Baseline (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelCalibrationBaseline {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Calibration Time Skew (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelCalibrationTimeSkew {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CD (Channel Definition) data type.  Consists of the following components: </p><ol>
/// <li>Channel Identifier (WVI)</li>
/// <li>Waveform Source (WVS)</li>
/// <li>Channel Sensitivity and Units (CSU)</li>
/// <li>Channel Calibration Parameters (CCP)</li>
/// <li>Channel Sampling Frequency (NM)</li>
/// <li>Minimum and Maximum Data Values (NR)</li>
/// </ol>
///</summary>
[Serializable]
public class CD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CD(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new WVI(message,"Channel Identifier");
		data[1] = new WVS(message,"Waveform Source");
		data[2] = new CSU(message,"Channel Sensitivity and Units");
		data[3] = new CCP(message,"Channel Calibration Parameters");
		data[4] = new NM(message,"Channel Sampling Frequency");
		data[5] = new NR(message,"Minimum and Maximum Data Values");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Channel Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public WVI ChannelIdentifier {
get{
	   WVI ret = null;
	   try {
	      ret = (WVI)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Waveform Source (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public WVS WaveformSource {
get{
	   WVS ret = null;
	   try {
	      ret = (WVS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Sensitivity and Units (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CSU ChannelSensitivityAndUnits {
get{
	   CSU ret = null;
	   try {
	      ret = (CSU)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Calibration Parameters (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CCP ChannelCalibrationParameters {
get{
	   CCP ret = null;
	   try {
	      ret = (CCP)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Sampling Frequency (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelSamplingFrequency {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Minimum and Maximum Data Values (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NR MinimumAndMaximumDataValues {
get{
	   NR ret = null;
	   try {
	      ret = (NR)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CF.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CF (Coded Element with Formatted Values) data type.  Consists of the following components: </p><ol>
/// <li>Identifier (ST)</li>
/// <li>Formatted Text (FT)</li>
/// <li>Name of Coding System (ID)</li>
/// <li>Alternate Identifier (ST)</li>
/// <li>Alternate Formatted Text (FT)</li>
/// <li>Name of Alternate Coding System (ID)</li>
/// <li>Coding System Version ID (ST)</li>
/// <li>Alternate Coding System Version ID (ST)</li>
/// <li>Original Text (ST)</li>
/// <li>Second Alternate Identifier (ST)</li>
/// <li>Second Alternate Formatted Text (FT)</li>
/// <li>Name of Second Alternate Coding System (ID)</li>
/// <li>Second Alternate Coding System Version ID (ST)</li>
/// <li>Coding System OID (ST)</li>
/// <li>Value Set OID (ST)</li>
/// <li>Value Set Version ID (DTM)</li>
/// <li>Alternate Coding System OID (ST)</li>
/// <li>Alternate Value Set OID (ST)</li>
/// <li>Alternate Value Set Version ID (DTM)</li>
/// <li>Second Alternate Coding System OID (ST)</li>
/// <li>Second Alternate Value Set OID (ST)</li>
/// <li>Second Alternate Value Set Version ID (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class CF : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CF.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CF(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CF.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CF(IMessage message, string description) : base(message, description){
		data = new IType[22];
		data[0] = new ST(message,"Identifier");
		data[1] = new FT(message,"Formatted Text");
		data[2] = new ID(message, 396,"Name of Coding System");
		data[3] = new ST(message,"Alternate Identifier");
		data[4] = new FT(message,"Alternate Formatted Text");
		data[5] = new ID(message, 396,"Name of Alternate Coding System");
		data[6] = new ST(message,"Coding System Version ID");
		data[7] = new ST(message,"Alternate Coding System Version ID");
		data[8] = new ST(message,"Original Text");
		data[9] = new ST(message,"Second Alternate Identifier");
		data[10] = new FT(message,"Second Alternate Formatted Text");
		data[11] = new ID(message, 396,"Name of Second Alternate Coding System");
		data[12] = new ST(message,"Second Alternate Coding System Version ID");
		data[13] = new ST(message,"Coding System OID");
		data[14] = new ST(message,"Value Set OID");
		data[15] = new DTM(message,"Value Set Version ID");
		data[16] = new ST(message,"Alternate Coding System OID");
		data[17] = new ST(message,"Alternate Value Set OID");
		data[18] = new DTM(message,"Alternate Value Set Version ID");
		data[19] = new ST(message,"Second Alternate Coding System OID");
		data[20] = new ST(message,"Second Alternate Value Set OID");
		data[21] = new DTM(message,"Second Alternate Value Set Version ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 22 element CF composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Identifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Formatted Text (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FT FormattedText {
get{
	   FT ret = null;
	   try {
	      ret = (FT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Coding System (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Identifier (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Formatted Text (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FT AlternateFormattedText {
get{
	   FT ret = null;
	   try {
	      ret = (FT)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Alternate Coding System (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfAlternateCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coding System Version ID (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Coding System Version ID (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Original Text (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OriginalText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Identifier (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Formatted Text (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FT SecondAlternateFormattedText {
get{
	   FT ret = null;
	   try {
	      ret = (FT)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Second Alternate Coding System (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfSecondAlternateCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Coding System Version ID (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coding System OID (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Set OID (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Set Version ID (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Coding System OID (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Value Set OID (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Value Set Version ID (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM AlternateValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Coding System OID (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Value Set OID (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Value Set Version ID (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM SecondAlternateValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CNE.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CNE (Coded with No Exceptions) data type.  Consists of the following components: </p><ol>
/// <li>Identifier (ST)</li>
/// <li>Text (ST)</li>
/// <li>Name of Coding System (ID)</li>
/// <li>Alternate Identifier (ST)</li>
/// <li>Alternate Text (ST)</li>
/// <li>Name of Alternate Coding System (ID)</li>
/// <li>Coding System Version ID (ST)</li>
/// <li>Alternate Coding System Version ID (ST)</li>
/// <li>Original Text (ST)</li>
/// <li>Second Alternate Identifier (ST)</li>
/// <li>Second Alternate Text (ST)</li>
/// <li>Name of Second Alternate Coding System (ID)</li>
/// <li>Second Alternate Coding System Version ID (ST)</li>
/// <li>Coding System OID (ST)</li>
/// <li>Value Set OID (ST)</li>
/// <li>Value Set Version ID (DTM)</li>
/// <li>Alternate Coding System OID (ST)</li>
/// <li>Alternate Value Set OID (ST)</li>
/// <li>Alternate Value Set Version ID (DTM)</li>
/// <li>Second Alternate Coding System OID (ST)</li>
/// <li>Second Alternate Value Set OID (ST)</li>
/// <li>Second Alternate Value Set Version ID (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class CNE : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CNE.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CNE(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CNE.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CNE(IMessage message, string description) : base(message, description){
		data = new IType[22];
		data[0] = new ST(message,"Identifier");
		data[1] = new ST(message,"Text");
		data[2] = new ID(message, 396,"Name of Coding System");
		data[3] = new ST(message,"Alternate Identifier");
		data[4] = new ST(message,"Alternate Text");
		data[5] = new ID(message, 396,"Name of Alternate Coding System");
		data[6] = new ST(message,"Coding System Version ID");
		data[7] = new ST(message,"Alternate Coding System Version ID");
		data[8] = new ST(message,"Original Text");
		data[9] = new ST(message,"Second Alternate Identifier");
		data[10] = new ST(message,"Second Alternate Text");
		data[11] = new ID(message, 396,"Name of Second Alternate Coding System");
		data[12] = new ST(message,"Second Alternate Coding System Version ID");
		data[13] = new ST(message,"Coding System OID");
		data[14] = new ST(message,"Value Set OID");
		data[15] = new DTM(message,"Value Set Version ID");
		data[16] = new ST(message,"Alternate Coding System OID");
		data[17] = new ST(message,"Alternate Value Set OID");
		data[18] = new DTM(message,"Alternate Value Set Version ID");
		data[19] = new ST(message,"Second Alternate Coding System OID");
		data[20] = new ST(message,"Second Alternate Value Set OID");
		data[21] = new DTM(message,"Second Alternate Value Set Version ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 22 element CNE composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Identifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Text (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Text {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Coding System (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Identifier (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Text (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Alternate Coding System (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfAlternateCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coding System Version ID (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Coding System Version ID (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Original Text (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OriginalText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Identifier (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Text (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Second Alternate Coding System (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfSecondAlternateCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Coding System Version ID (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coding System OID (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Set OID (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Set Version ID (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Coding System OID (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Value Set OID (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Value Set Version ID (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM AlternateValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Coding System OID (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Value Set OID (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Value Set Version ID (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM SecondAlternateValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CNN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CNN (Composite ID Number and Name Simplified) data type.  Consists of the following components: </p><ol>
/// <li>ID Number (ST)</li>
/// <li>Family Name (ST)</li>
/// <li>Given Name (ST)</li>
/// <li>Second and Further Given Names or Initials Thereof (ST)</li>
/// <li>Suffix (e.g., JR or III) (ST)</li>
/// <li>Prefix (e.g., DR) (ST)</li>
/// <li>Degree (e.g., MD) (IS)</li>
/// <li>Source Table (IS)</li>
/// <li>Assigning Authority   - Namespace ID (IS)</li>
/// <li>Assigning Authority  - Universal ID (ST)</li>
/// <li>Assigning Authority  - Universal ID Type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class CNN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CNN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CNN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CNN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CNN(IMessage message, string description) : base(message, description){
		data = new IType[11];
		data[0] = new ST(message,"ID Number");
		data[1] = new ST(message,"Family Name");
		data[2] = new ST(message,"Given Name");
		data[3] = new ST(message,"Second and Further Given Names or Initials Thereof");
		data[4] = new ST(message,"Suffix (e.g., JR or III)");
		data[5] = new ST(message,"Prefix (e.g., DR)");
		data[6] = new IS(message, 360,"Degree (e.g., MD)");
		data[7] = new IS(message, 297,"Source Table");
		data[8] = new IS(message, 363,"Assigning Authority   - Namespace ID");
		data[9] = new ST(message,"Assigning Authority  - Universal ID");
		data[10] = new ID(message, 301,"Assigning Authority  - Universal ID Type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 11 element CNN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Family Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FamilyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Given Name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second and Further Given Names or Initials Thereof (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAndFurtherGivenNamesOrInitialsThereof {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Suffix (e.g., JR or III) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Prefix (e.g., DR) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Degree (e.g., MD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS DegreeEgMD {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Source Table (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS SourceTable {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority   - Namespace ID (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS AssigningAuthorityNamespaceID {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority  - Universal ID (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AssigningAuthorityUniversalID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority  - Universal ID Type (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AssigningAuthorityUniversalIDType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CP (Composite Price) data type.  Consists of the following components: </p><ol>
/// <li>Price (MO)</li>
/// <li>Price Type (ID)</li>
/// <li>From Value (NM)</li>
/// <li>To Value (NM)</li>
/// <li>Range Units (CWE)</li>
/// <li>Range Type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class CP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CP(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new MO(message,"Price");
		data[1] = new ID(message, 205,"Price Type");
		data[2] = new NM(message,"From Value");
		data[3] = new NM(message,"To Value");
		data[4] = new CWE(message,"Range Units");
		data[5] = new ID(message, 298,"Range Type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element CP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Price (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MO Price {
get{
	   MO ret = null;
	   try {
	      ret = (MO)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Price Type (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID PriceType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns From Value (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM FromValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns To Value (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ToValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Range Units (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE RangeUnits {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Range Type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID RangeType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CQ.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CQ (Composite Quantity with Units) data type.  Consists of the following components: </p><ol>
/// <li>Quantity (NM)</li>
/// <li>Units (CWE)</li>
/// </ol>
///</summary>
[Serializable]
public class CQ : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CQ.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CQ(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CQ.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CQ(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Quantity");
		data[1] = new CWE(message,"Units");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element CQ composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Quantity (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Quantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Units (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE Units {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CSU.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CSU (Channel Sensitivity and Units) data type.  Consists of the following components: </p><ol>
/// <li>Channel Sensitivity (NM)</li>
/// <li>Unit of Measure Identifier (ST)</li>
/// <li>Unit of Measure Description (ST)</li>
/// <li>Unit of Measure Coding System (ID)</li>
/// <li>Alternate Unit of Measure Identifier (ST)</li>
/// <li>Alternate Unit of Measure Description (ST)</li>
/// <li>Alternate Unit of Measure Coding System (ID)</li>
/// <li>Unit of Measure Coding System Version ID (ST)</li>
/// <li>Alternate Unit of Measure Coding System Version ID (ST)</li>
/// <li>Original Text (ST)</li>
/// <li>Second Alternate Unit of Measure Identifier (ST)</li>
/// <li>Second Alternate Unit of Measure Text (ST)</li>
/// <li>Name of Second Alternate Unit of Measure Coding Sy (ID)</li>
/// <li>Second Alternate Unit of Measure Coding System Ver (ST)</li>
/// <li>Unit of Measure Coding System OID (ST)</li>
/// <li>Unit of Measure Value Set OID (ST)</li>
/// <li>Unit of Measure Value Set Version ID (DTM)</li>
/// <li>Alternate Unit of Measure Coding System OID (ST)</li>
/// <li>Alternate Unit of Measure Value Set OID (ST)</li>
/// <li>Alternate Unit of Measure Value Set Version ID (DTM)</li>
/// <li>Alternate Unit of Measure Coding System OID (ST)</li>
/// <li>Alternate Unit of Measure Value Set OID (ST)</li>
/// <li>Alternate Unit of Measure Value Set Version ID (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class CSU : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CSU.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CSU(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CSU.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CSU(IMessage message, string description) : base(message, description){
		data = new IType[23];
		data[0] = new NM(message,"Channel Sensitivity");
		data[1] = new ST(message,"Unit of Measure Identifier");
		data[2] = new ST(message,"Unit of Measure Description");
		data[3] = new ID(message, 396,"Unit of Measure Coding System");
		data[4] = new ST(message,"Alternate Unit of Measure Identifier");
		data[5] = new ST(message,"Alternate Unit of Measure Description");
		data[6] = new ID(message, 396,"Alternate Unit of Measure Coding System");
		data[7] = new ST(message,"Unit of Measure Coding System Version ID");
		data[8] = new ST(message,"Alternate Unit of Measure Coding System Version ID");
		data[9] = new ST(message,"Original Text");
		data[10] = new ST(message,"Second Alternate Unit of Measure Identifier");
		data[11] = new ST(message,"Second Alternate Unit of Measure Text");
		data[12] = new ID(message, 396,"Name of Second Alternate Unit of Measure Coding Sy");
		data[13] = new ST(message,"Second Alternate Unit of Measure Coding System Ver");
		data[14] = new ST(message,"Unit of Measure Coding System OID");
		data[15] = new ST(message,"Unit of Measure Value Set OID");
		data[16] = new DTM(message,"Unit of Measure Value Set Version ID");
		data[17] = new ST(message,"Alternate Unit of Measure Coding System OID");
		data[18] = new ST(message,"Alternate Unit of Measure Value Set OID");
		data[19] = new DTM(message,"Alternate Unit of Measure Value Set Version ID");
		data[20] = new ST(message,"Alternate Unit of Measure Coding System OID");
		data[21] = new ST(message,"Alternate Unit of Measure Value Set OID");
		data[22] = new ST(message,"Alternate Unit of Measure Value Set Version ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 23 element CSU composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Channel Sensitivity (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelSensitivity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Identifier (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UnitOfMeasureIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Description (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UnitOfMeasureDescription {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Coding System (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID UnitOfMeasureCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Identifier (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Description (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureDescription {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Coding System (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AlternateUnitOfMeasureCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Coding System Version ID (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UnitOfMeasureCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Coding System Version ID (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Original Text (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OriginalText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Unit of Measure Identifier (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateUnitOfMeasureIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Unit of Measure Text (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateUnitOfMeasureText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Second Alternate Unit of Measure Coding Sy (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfSecondAlternateUnitOfMeasureCodingSy {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Unit of Measure Coding System Ver (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateUnitOfMeasureCodingSystemVer {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Coding System OID (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UnitOfMeasureCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Value Set OID (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UnitOfMeasureValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unit of Measure Value Set Version ID (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM UnitOfMeasureValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Coding System OID (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureCodingSystemOID_17 {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Value Set OID (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureValueSetOID_18 {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Value Set Version ID (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM AlternateUnitOfMeasureValueSetVersionID_19 {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Coding System OID (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureCodingSystemOID_20 {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Value Set OID (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureValueSetOID_21 {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Unit of Measure Value Set Version ID (component #22).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateUnitOfMeasureValueSetVersionID_22 {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[22];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CWE.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CWE (Coded with Exceptions) data type.  Consists of the following components: </p><ol>
/// <li>Identifier (ST)</li>
/// <li>Text (ST)</li>
/// <li>Name of Coding System (ID)</li>
/// <li>Alternate Identifier (ST)</li>
/// <li>Alternate Text (ST)</li>
/// <li>Name of Alternate Coding System (ID)</li>
/// <li>Coding System Version ID (ST)</li>
/// <li>Alternate Coding System Version ID (ST)</li>
/// <li>Original Text (ST)</li>
/// <li>Second Alternate Identifier (ST)</li>
/// <li>Second Alternate Text (ST)</li>
/// <li>Name of Second Alternate Coding System (ID)</li>
/// <li>Second Alternate Coding System Version ID (ST)</li>
/// <li>Coding System OID (ST)</li>
/// <li>Value Set OID (ST)</li>
/// <li>Value Set Version ID (DTM)</li>
/// <li>Alternate Coding System OID (ST)</li>
/// <li>Alternate Value Set OID (ST)</li>
/// <li>Alternate Value Set Version ID (DTM)</li>
/// <li>Second Alternate Coding System OID (ST)</li>
/// <li>Second Alternate Value Set OID (ST)</li>
/// <li>Second Alternate Value Set Version ID (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class CWE : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CWE.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CWE(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CWE.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CWE(IMessage message, string description) : base(message, description){
		data = new IType[22];
		data[0] = new ST(message,"Identifier");
		data[1] = new ST(message,"Text");
		data[2] = new ID(message, 396,"Name of Coding System");
		data[3] = new ST(message,"Alternate Identifier");
		data[4] = new ST(message,"Alternate Text");
		data[5] = new ID(message, 396,"Name of Alternate Coding System");
		data[6] = new ST(message,"Coding System Version ID");
		data[7] = new ST(message,"Alternate Coding System Version ID");
		data[8] = new ST(message,"Original Text");
		data[9] = new ST(message,"Second Alternate Identifier");
		data[10] = new ST(message,"Second Alternate Text");
		data[11] = new ID(message, 396,"Name of Second Alternate Coding System");
		data[12] = new ST(message,"Second Alternate Coding System Version ID");
		data[13] = new ST(message,"Coding System OID");
		data[14] = new ST(message,"Value Set OID");
		data[15] = new DTM(message,"Value Set Version ID");
		data[16] = new ST(message,"Alternate Coding System OID");
		data[17] = new ST(message,"Alternate Value Set OID");
		data[18] = new DTM(message,"Alternate Value Set Version ID");
		data[19] = new ST(message,"Second Alternate Coding System OID");
		data[20] = new ST(message,"Second Alternate Value Set OID");
		data[21] = new DTM(message,"Second Alternate Value Set Version ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 22 element CWE composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Identifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Text (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Text {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Coding System (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Identifier (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Text (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Alternate Coding System (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfAlternateCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coding System Version ID (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Coding System Version ID (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Original Text (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OriginalText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Identifier (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Text (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name of Second Alternate Coding System (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameOfSecondAlternateCodingSystem {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Coding System Version ID (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateCodingSystemVersionID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coding System OID (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Set OID (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Set Version ID (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Coding System OID (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Value Set OID (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AlternateValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Alternate Value Set Version ID (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM AlternateValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Coding System OID (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateCodingSystemOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Value Set OID (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAlternateValueSetOID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second Alternate Value Set Version ID (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM SecondAlternateValueSetVersionID {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\CX.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 CX (Extended Composite ID with Check Digit) data type.  Consists of the following components: </p><ol>
/// <li>ID Number (ST)</li>
/// <li>Identifier Check Digit (ST)</li>
/// <li>Check Digit Scheme (ID)</li>
/// <li>Assigning Authority (HD)</li>
/// <li>Identifier Type Code (ID)</li>
/// <li>Assigning Facility (HD)</li>
/// <li>Effective Date (DT)</li>
/// <li>Expiration Date (DT)</li>
/// <li>Assigning Jurisdiction (CWE)</li>
/// <li>Assigning Agency or Department (CWE)</li>
/// <li>Security Check (ST)</li>
/// <li>Security Check Scheme (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class CX : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a CX.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public CX(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a CX.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public CX(IMessage message, string description) : base(message, description){
		data = new IType[12];
		data[0] = new ST(message,"ID Number");
		data[1] = new ST(message,"Identifier Check Digit");
		data[2] = new ID(message, 61,"Check Digit Scheme");
		data[3] = new HD(message,"Assigning Authority");
		data[4] = new ID(message, 203,"Identifier Type Code");
		data[5] = new HD(message,"Assigning Facility");
		data[6] = new DT(message,"Effective Date");
		data[7] = new DT(message,"Expiration Date");
		data[8] = new CWE(message,"Assigning Jurisdiction");
		data[9] = new CWE(message,"Assigning Agency or Department");
		data[10] = new ST(message,"Security Check");
		data[11] = new ID(message, 904,"Security Check Scheme");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 12 element CX composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Check Digit (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IdentifierCheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Check Digit Scheme (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CheckDigitScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Type Code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID IdentifierTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Facility (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT EffectiveDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Jurisdiction (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AssigningJurisdiction {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Agency or Department (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AssigningAgencyOrDepartment {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Security Check (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecurityCheck {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Security Check Scheme (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID SecurityCheckScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DDI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DDI (Daily Deductible Information) data type.  Consists of the following components: </p><ol>
/// <li>Delay Days (NM)</li>
/// <li>Monetary Amount (MO)</li>
/// <li>Number of Days (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class DDI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DDI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DDI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DDI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DDI(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new NM(message,"Delay Days");
		data[1] = new MO(message,"Monetary Amount");
		data[2] = new NM(message,"Number of Days");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element DDI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Delay Days (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM DelayDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Monetary Amount (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MO MonetaryAmount {
get{
	   MO ret = null;
	   try {
	      ret = (MO)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Number of Days (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumberOfDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DIN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DIN (Date and Institution Name) data type.  Consists of the following components: </p><ol>
/// <li>Date (DTM)</li>
/// <li>Institution Name (CWE)</li>
/// </ol>
///</summary>
[Serializable]
public class DIN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DIN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DIN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DIN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DIN(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new DTM(message,"Date");
		data[1] = new CWE(message,"Institution Name");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element DIN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Date (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM Date {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Institution Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE InstitutionName {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DLD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DLD (Discharge to Location and Date) data type.  Consists of the following components: </p><ol>
/// <li>Discharge to Location (CWE)</li>
/// <li>Effective Date (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class DLD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DLD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DLD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DLD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DLD(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CWE(message,"Discharge to Location");
		data[1] = new DTM(message,"Effective Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element DLD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Discharge to Location (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE DischargeToLocation {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DLN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DLN (Driver's License Number) data type.  Consists of the following components: </p><ol>
/// <li>License Number (ST)</li>
/// <li>Issuing State, Province, Country (CWE)</li>
/// <li>Expiration Date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class DLN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DLN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DLN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DLN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DLN(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"License Number");
		data[1] = new CWE(message,"Issuing State, Province, Country");
		data[2] = new DT(message,"Expiration Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element DLN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns License Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST LicenseNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Issuing State, Province, Country (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE IssuingStateProvinceCountry {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DLT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DLT (Delta) data type.  Consists of the following components: </p><ol>
/// <li>Normal Range (NR)</li>
/// <li>Numeric Threshold (NM)</li>
/// <li>Change Computation (ID)</li>
/// <li>Days Retained (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class DLT : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DLT.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DLT(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DLT.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DLT(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new NR(message,"Normal Range");
		data[1] = new NM(message,"Numeric Threshold");
		data[2] = new ID(message, 523,"Change Computation");
		data[3] = new NM(message,"Days Retained");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element DLT composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Normal Range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NR NormalRange {
get{
	   NR ret = null;
	   try {
	      ret = (NR)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Numeric Threshold (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumericThreshold {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Change Computation (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID ChangeComputation {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Days Retained (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM DaysRetained {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DR (Date/Time Range) data type.  Consists of the following components: </p><ol>
/// <li>Range Start Date/Time (DTM)</li>
/// <li>Range End Date/Time (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class DR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DR(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new DTM(message,"Range Start Date/Time");
		data[1] = new DTM(message,"Range End Date/Time");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element DR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Range Start Date/Time (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM RangeStartDateTime {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Range End Date/Time (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM RangeEndDateTime {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\DTN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 DTN (Day Type and Number) data type.  Consists of the following components: </p><ol>
/// <li>Day Type (CWE)</li>
/// <li>Number of Days (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class DTN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a DTN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public DTN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a DTN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public DTN(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CWE(message,"Day Type");
		data[1] = new NM(message,"Number of Days");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element DTN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Day Type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE DayType {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Number of Days (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NumberOfDays {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\ED.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 ED (Encapsulated Data) data type.  Consists of the following components: </p><ol>
/// <li>Source Application (HD)</li>
/// <li>Type of Data (ID)</li>
/// <li>Data Subtype (ID)</li>
/// <li>Encoding (ID)</li>
/// <li>Data (TX)</li>
/// </ol>
///</summary>
[Serializable]
public class ED : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a ED.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public ED(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a ED.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public ED(IMessage message, string description) : base(message, description){
		data = new IType[5];
		data[0] = new HD(message,"Source Application");
		data[1] = new ID(message, 834,"Type of Data");
		data[2] = new ID(message, 291,"Data Subtype");
		data[3] = new ID(message, 299,"Encoding");
		data[4] = new TX(message,"Data");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 5 element ED composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Source Application (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD SourceApplication {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Type of Data (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TypeOfData {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Data Subtype (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID DataSubtype {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Encoding (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Encoding {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Data (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Data {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\EI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 EI (Entity Identifier) data type.  Consists of the following components: </p><ol>
/// <li>Entity Identifier (ST)</li>
/// <li>Namespace ID (IS)</li>
/// <li>Universal ID (ST)</li>
/// <li>Universal ID Type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class EI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a EI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public EI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a EI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public EI(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Entity Identifier");
		data[1] = new IS(message, 363,"Namespace ID");
		data[2] = new ST(message,"Universal ID");
		data[3] = new ID(message, 301,"Universal ID Type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element EI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Entity Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST EntityIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Namespace ID (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS NamespaceID {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Universal ID (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UniversalID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Universal ID Type (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID UniversalIDType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\EIP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 EIP (Entity Identifier Pair) data type.  Consists of the following components: </p><ol>
/// <li>Placer Assigned Identifier (EI)</li>
/// <li>Filler Assigned Identifier (EI)</li>
/// </ol>
///</summary>
[Serializable]
public class EIP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a EIP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public EIP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a EIP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public EIP(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new EI(message,"Placer Assigned Identifier");
		data[1] = new EI(message,"Filler Assigned Identifier");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element EIP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Placer Assigned Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI PlacerAssignedIdentifier {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Filler Assigned Identifier (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI FillerAssignedIdentifier {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\ERL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 ERL (Error Location) data type.  Consists of the following components: </p><ol>
/// <li>Segment ID (ST)</li>
/// <li>Segment Sequence (NM)</li>
/// <li>Field Position (NM)</li>
/// <li>Field Repetition (NM)</li>
/// <li>Component Number (NM)</li>
/// <li>Sub-Component Number (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class ERL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a ERL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public ERL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a ERL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public ERL(IMessage message, string description) : base(message, description){
		data = new IType[6];
		data[0] = new ST(message,"Segment ID");
		data[1] = new NM(message,"Segment Sequence");
		data[2] = new NM(message,"Field Position");
		data[3] = new NM(message,"Field Repetition");
		data[4] = new NM(message,"Component Number");
		data[5] = new NM(message,"Sub-Component Number");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 6 element ERL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Segment ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SegmentID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Segment Sequence (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SegmentSequence {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Field Position (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM FieldPosition {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Field Repetition (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM FieldRepetition {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Component Number (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ComponentNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Sub-Component Number (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SubComponentNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\FC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 FC (Financial Class) data type.  Consists of the following components: </p><ol>
/// <li>Financial Class Code (CWE)</li>
/// <li>Effective Date (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class FC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a FC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public FC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a FC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public FC(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CWE(message,"Financial Class Code");
		data[1] = new DTM(message,"Effective Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element FC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Financial Class Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE FinancialClassCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\FN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 FN (Family Name) data type.  Consists of the following components: </p><ol>
/// <li>Surname (ST)</li>
/// <li>Own Surname Prefix (ST)</li>
/// <li>Own Surname (ST)</li>
/// <li>Surname Prefix from Partner/Spouse (ST)</li>
/// <li>Surname from Partner/Spouse (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class FN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a FN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public FN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a FN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public FN(IMessage message, string description) : base(message, description){
		data = new IType[5];
		data[0] = new ST(message,"Surname");
		data[1] = new ST(message,"Own Surname Prefix");
		data[2] = new ST(message,"Own Surname");
		data[3] = new ST(message,"Surname Prefix from Partner/Spouse");
		data[4] = new ST(message,"Surname from Partner/Spouse");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 5 element FN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Surname (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Surname {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Own Surname Prefix (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OwnSurnamePrefix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Own Surname (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OwnSurname {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Surname Prefix from Partner/Spouse (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SurnamePrefixFromPartnerSpouse {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Surname from Partner/Spouse (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SurnameFromPartnerSpouse {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\FT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V27.Datatype
{
///<summary>
///Represents the HL7 FT (Formatted Text Data) datatype.  A FT contains a single String value.
///</summary>
[Serializable]
public class FT : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized FT.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public FT(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized FT.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public FT(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.7"
	///</summary>
	public string getVersion() {
	    return "2.7";
}
}
},
  basepath\\NHapi.Model.V27\\Datatype\\GTS.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V27.Datatype
{
///<summary>
///Represents the HL7 GTS (General Timing Specification) datatype.  A GTS contains a single String value.
///</summary>
[Serializable]
public class GTS : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized GTS.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public GTS(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized GTS.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public GTS(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.7"
	///</summary>
	public string getVersion() {
	    return "2.7";
}
}
},
  basepath\\NHapi.Model.V27\\Datatype\\HD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 HD (Hierarchic Designator) data type.  Consists of the following components: </p><ol>
/// <li>Namespace ID (IS)</li>
/// <li>Universal ID (ST)</li>
/// <li>Universal ID Type (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class HD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a HD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public HD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a HD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public HD(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new IS(message, 300,"Namespace ID");
		data[1] = new ST(message,"Universal ID");
		data[2] = new ID(message, 301,"Universal ID Type");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element HD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Namespace ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS NamespaceID {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Universal ID (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UniversalID {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Universal ID Type (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID UniversalIDType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\ICD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 ICD (Insurance Certification Definition) data type.  Consists of the following components: </p><ol>
/// <li>Certification Patient Type (CWE)</li>
/// <li>Certification Required (ID)</li>
/// <li>Date/Time Certification Required (DTM)</li>
/// </ol>
///</summary>
[Serializable]
public class ICD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a ICD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public ICD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a ICD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public ICD(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new CWE(message,"Certification Patient Type");
		data[1] = new ID(message, 136,"Certification Required");
		data[2] = new DTM(message,"Date/Time Certification Required");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element ICD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Certification Patient Type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE CertificationPatientType {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Certification Required (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CertificationRequired {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Date/Time Certification Required (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM DateTimeCertificationRequired {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\JCC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 JCC (Job Code/Class) data type.  Consists of the following components: </p><ol>
/// <li>Job Code (CWE)</li>
/// <li>Job Class (CWE)</li>
/// <li>Job Description Text (TX)</li>
/// </ol>
///</summary>
[Serializable]
public class JCC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a JCC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public JCC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a JCC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public JCC(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new CWE(message,"Job Code");
		data[1] = new CWE(message,"Job Class");
		data[2] = new TX(message,"Job Description Text");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element JCC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Job Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE JobCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Job Class (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE JobClass {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Job Description Text (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX JobDescriptionText {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\LA1.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 LA1 (Location with Address Variation 1) data type.  Consists of the following components: </p><ol>
/// <li>Point of Care (IS)</li>
/// <li>Room (IS)</li>
/// <li>Bed (IS)</li>
/// <li>Facility (HD)</li>
/// <li>Location Status (IS)</li>
/// <li>Patient Location Type (IS)</li>
/// <li>Building (IS)</li>
/// <li>Floor (IS)</li>
/// <li>Address (AD)</li>
/// </ol>
///</summary>
[Serializable]
public class LA1 : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a LA1.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public LA1(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a LA1.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public LA1(IMessage message, string description) : base(message, description){
		data = new IType[9];
		data[0] = new IS(message, 302,"Point of Care");
		data[1] = new IS(message, 303,"Room");
		data[2] = new IS(message, 304,"Bed");
		data[3] = new HD(message,"Facility");
		data[4] = new IS(message, 306,"Location Status");
		data[5] = new IS(message, 305,"Patient Location Type");
		data[6] = new IS(message, 307,"Building");
		data[7] = new IS(message, 308,"Floor");
		data[8] = new AD(message,"Address");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 9 element LA1 composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Point of Care (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PointOfCare {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Room (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Room {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Bed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Bed {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Facility (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Location Status (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Patient Location Type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PatientLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Building (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Building {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Floor (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Floor {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public AD Address {
get{
	   AD ret = null;
	   try {
	      ret = (AD)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\LA2.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 LA2 (Location with Address Variation 2) data type.  Consists of the following components: </p><ol>
/// <li>Point of Care (IS)</li>
/// <li>Room (IS)</li>
/// <li>Bed (IS)</li>
/// <li>Facility (HD)</li>
/// <li>Location Status (IS)</li>
/// <li>Patient Location Type (IS)</li>
/// <li>Building (IS)</li>
/// <li>Floor (IS)</li>
/// <li>Street Address (ST)</li>
/// <li>Other Designation (ST)</li>
/// <li>City (ST)</li>
/// <li>State or Province (ST)</li>
/// <li>Zip or Postal Code (ST)</li>
/// <li>Country (ID)</li>
/// <li>Address Type (ID)</li>
/// <li>Other Geographic Designation (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class LA2 : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a LA2.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public LA2(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a LA2.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public LA2(IMessage message, string description) : base(message, description){
		data = new IType[16];
		data[0] = new IS(message, 302,"Point of Care");
		data[1] = new IS(message, 303,"Room");
		data[2] = new IS(message, 304,"Bed");
		data[3] = new HD(message,"Facility");
		data[4] = new IS(message, 306,"Location Status");
		data[5] = new IS(message, 305,"Patient Location Type");
		data[6] = new IS(message, 307,"Building");
		data[7] = new IS(message, 308,"Floor");
		data[8] = new ST(message,"Street Address");
		data[9] = new ST(message,"Other Designation");
		data[10] = new ST(message,"City");
		data[11] = new ST(message,"State or Province");
		data[12] = new ST(message,"Zip or Postal Code");
		data[13] = new ID(message, 399,"Country");
		data[14] = new ID(message, 190,"Address Type");
		data[15] = new ST(message,"Other Geographic Designation");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 16 element LA2 composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Point of Care (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PointOfCare {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Room (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Room {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Bed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Bed {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Facility (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Location Status (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Patient Location Type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PatientLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Building (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Building {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Floor (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Floor {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Street Address (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Other Designation (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns City (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST City {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns State or Province (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOrProvince {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Zip or Postal Code (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ZipOrPostalCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Country (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Country {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Type (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Other Geographic Designation (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherGeographicDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\MA.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 MA (Multiplexed Array) data type.  Consists of the following components: </p><ol>
/// <li>Sample Y From Channel 1 (NM)</li>
/// <li>Sample Y From Channel 2 (NM)</li>
/// <li>Sample Y From Channel 3 (NM)</li>
/// <li>Sample Y From Channel 4 (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class MA : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MA.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MA(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MA.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MA(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new NM(message,"Sample Y From Channel 1");
		data[1] = new NM(message,"Sample Y From Channel 2");
		data[2] = new NM(message,"Sample Y From Channel 3");
		data[3] = new NM(message,"Sample Y From Channel 4");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element MA composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Sample Y From Channel 1 (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SampleYFromChannel1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Sample Y From Channel 2 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SampleYFromChannel2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Sample Y From Channel 3 (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SampleYFromChannel3 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Sample Y From Channel 4 (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM SampleYFromChannel4 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\MO.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 MO (Money) data type.  Consists of the following components: </p><ol>
/// <li>Quantity (NM)</li>
/// <li>Denomination (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class MO : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MO.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MO(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MO.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MO(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Quantity");
		data[1] = new ID(message, 913,"Denomination");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element MO composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Quantity (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Quantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Denomination (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Denomination {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\MOC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 MOC (Money and Code) data type.  Consists of the following components: </p><ol>
/// <li>Monetary Amount (MO)</li>
/// <li>Charge Code (CWE)</li>
/// </ol>
///</summary>
[Serializable]
public class MOC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MOC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MOC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MOC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MOC(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new MO(message,"Monetary Amount");
		data[1] = new CWE(message,"Charge Code");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element MOC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Monetary Amount (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MO MonetaryAmount {
get{
	   MO ret = null;
	   try {
	      ret = (MO)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Charge Code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ChargeCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\MOP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 MOP (Money or Percentage) data type.  Consists of the following components: </p><ol>
/// <li>Money or Percentage Indicator (ID)</li>
/// <li>Money or Percentage Quantity (NM)</li>
/// <li>Monetary  Denomination (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class MOP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MOP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MOP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MOP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MOP(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ID(message, 148,"Money or Percentage Indicator");
		data[1] = new NM(message,"Money or Percentage Quantity");
		data[2] = new ID(message, 913,"Monetary  Denomination");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element MOP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Money or Percentage Indicator (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID MoneyOrPercentageIndicator {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Money or Percentage Quantity (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM MoneyOrPercentageQuantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Monetary  Denomination (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID MonetaryDenomination {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\MSG.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 MSG (Message Type) data type.  Consists of the following components: </p><ol>
/// <li>Message Code (ID)</li>
/// <li>Trigger Event (ID)</li>
/// <li>Message Structure (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class MSG : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a MSG.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public MSG(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a MSG.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public MSG(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ID(message, 76,"Message Code");
		data[1] = new ID(message, 3,"Trigger Event");
		data[2] = new ID(message, 354,"Message Structure");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element MSG composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Message Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID MessageCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Trigger Event (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TriggerEvent {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Message Structure (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID MessageStructure {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\NA.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 NA (Numeric Array) data type.  Consists of the following components: </p><ol>
/// <li>Value1 (NM)</li>
/// <li>Value2 (NM)</li>
/// <li>Value3 (NM)</li>
/// <li>Value4 (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class NA : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a NA.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public NA(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a NA.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public NA(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new NM(message,"Value1");
		data[1] = new NM(message,"Value2");
		data[2] = new NM(message,"Value3");
		data[3] = new NM(message,"Value4");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element NA composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Value1 (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value2 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value3 (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value3 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value4 (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Value4 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\NDL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 NDL (Name with Date and Location) data type.  Consists of the following components: </p><ol>
/// <li>Name (CNN)</li>
/// <li>Start Date/time (DTM)</li>
/// <li>End Date/time (DTM)</li>
/// <li>Point of Care (IS)</li>
/// <li>Room (IS)</li>
/// <li>Bed (IS)</li>
/// <li>Facility (HD)</li>
/// <li>Location Status (IS)</li>
/// <li>Patient Location Type (IS)</li>
/// <li>Building (IS)</li>
/// <li>Floor (IS)</li>
/// </ol>
///</summary>
[Serializable]
public class NDL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a NDL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public NDL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a NDL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public NDL(IMessage message, string description) : base(message, description){
		data = new IType[11];
		data[0] = new CNN(message,"Name");
		data[1] = new DTM(message,"Start Date/time");
		data[2] = new DTM(message,"End Date/time");
		data[3] = new IS(message, 302,"Point of Care");
		data[4] = new IS(message, 303,"Room");
		data[5] = new IS(message, 304,"Bed");
		data[6] = new HD(message,"Facility");
		data[7] = new IS(message, 306,"Location Status");
		data[8] = new IS(message, 305,"Patient Location Type");
		data[9] = new IS(message, 307,"Building");
		data[10] = new IS(message, 308,"Floor");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 11 element NDL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CNN Name {
get{
	   CNN ret = null;
	   try {
	      ret = (CNN)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Start Date/time (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM StartDateTime {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns End Date/time (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EndDateTime {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Point of Care (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PointOfCare {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Room (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Room {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Bed (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Bed {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Facility (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Location Status (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Patient Location Type (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PatientLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Building (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Building {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Floor (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS Floor {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\NM.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V27.Datatype
{
///<summary>
///Represents the HL7 NM (Numeric) datatype.  A NM contains a single String value.
///</summary>
[Serializable]
public class NM : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized NM.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public NM(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized NM.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public NM(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.7"
	///</summary>
	public string getVersion() {
	    return "2.7";
}
}
},
  basepath\\NHapi.Model.V27\\Datatype\\NR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 NR (Numeric Range) data type.  Consists of the following components: </p><ol>
/// <li>Low Value (NM)</li>
/// <li>High Value (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class NR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a NR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public NR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a NR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public NR(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Low Value");
		data[1] = new NM(message,"High Value");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element NR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Low Value (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM LowValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns High Value (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM HighValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\OCD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 OCD (Occurrence Code and Date) data type.  Consists of the following components: </p><ol>
/// <li>Occurrence Code (CNE)</li>
/// <li>Occurrence Date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class OCD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a OCD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public OCD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a OCD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public OCD(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CNE(message,"Occurrence Code");
		data[1] = new DT(message,"Occurrence Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element OCD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Occurrence Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CNE OccurrenceCode {
get{
	   CNE ret = null;
	   try {
	      ret = (CNE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Occurrence Date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT OccurrenceDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\OSP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 OSP (Occurrence Span Code and Date) data type.  Consists of the following components: </p><ol>
/// <li>Occurrence Span Code (CNE)</li>
/// <li>Occurrence Span Start Date (DT)</li>
/// <li>Occurrence Span Stop Date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class OSP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a OSP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public OSP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a OSP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public OSP(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new CNE(message,"Occurrence Span Code");
		data[1] = new DT(message,"Occurrence Span Start Date");
		data[2] = new DT(message,"Occurrence Span Stop Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element OSP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Occurrence Span Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CNE OccurrenceSpanCode {
get{
	   CNE ret = null;
	   try {
	      ret = (CNE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Occurrence Span Start Date (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT OccurrenceSpanStartDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Occurrence Span Stop Date (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT OccurrenceSpanStopDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PIP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PIP (Practitioner Institutional Privileges) data type.  Consists of the following components: </p><ol>
/// <li>Privilege (CWE)</li>
/// <li>Privilege Class (CWE)</li>
/// <li>Expiration Date (DT)</li>
/// <li>Activation Date (DT)</li>
/// <li>Facility (EI)</li>
/// </ol>
///</summary>
[Serializable]
public class PIP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PIP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PIP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PIP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PIP(IMessage message, string description) : base(message, description){
		data = new IType[5];
		data[0] = new CWE(message,"Privilege");
		data[1] = new CWE(message,"Privilege Class");
		data[2] = new DT(message,"Expiration Date");
		data[3] = new DT(message,"Activation Date");
		data[4] = new EI(message,"Facility");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 5 element PIP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Privilege (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE Privilege {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Privilege Class (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE PrivilegeClass {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Activation Date (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ActivationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Facility (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI Facility {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PL (Person Location) data type.  Consists of the following components: </p><ol>
/// <li>Point of Care (HD)</li>
/// <li>Room (HD)</li>
/// <li>Bed (HD)</li>
/// <li>Facility (HD)</li>
/// <li>Location Status (IS)</li>
/// <li>Person Location Type (IS)</li>
/// <li>Building (HD)</li>
/// <li>Floor (HD)</li>
/// <li>Location Description (ST)</li>
/// <li>Comprehensive Location Identifier (EI)</li>
/// <li>Assigning Authority for Location (HD)</li>
/// </ol>
///</summary>
[Serializable]
public class PL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PL(IMessage message, string description) : base(message, description){
		data = new IType[11];
		data[0] = new HD(message,"Point of Care");
		data[1] = new HD(message,"Room");
		data[2] = new HD(message,"Bed");
		data[3] = new HD(message,"Facility");
		data[4] = new IS(message, 306,"Location Status");
		data[5] = new IS(message, 305,"Person Location Type");
		data[6] = new HD(message,"Building");
		data[7] = new HD(message,"Floor");
		data[8] = new ST(message,"Location Description");
		data[9] = new EI(message,"Comprehensive Location Identifier");
		data[10] = new HD(message,"Assigning Authority for Location");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 11 element PL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Point of Care (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD PointOfCare {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Room (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Room {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Bed (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Bed {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Facility (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Facility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Location Status (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS LocationStatus {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Person Location Type (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public IS PersonLocationType {
get{
	   IS ret = null;
	   try {
	      ret = (IS)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Building (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Building {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Floor (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD Floor {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Location Description (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST LocationDescription {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Comprehensive Location Identifier (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI ComprehensiveLocationIdentifier {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority for Location (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthorityForLocation {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PLN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PLN (Practitioner License or Other ID Number) data type.  Consists of the following components: </p><ol>
/// <li>ID Number (ST)</li>
/// <li>Type of ID Number (CWE)</li>
/// <li>State/other Qualifying Information (ST)</li>
/// <li>Expiration Date (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class PLN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PLN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PLN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PLN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PLN(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"ID Number");
		data[1] = new CWE(message,"Type of ID Number");
		data[2] = new ST(message,"State/other Qualifying Information");
		data[3] = new DT(message,"Expiration Date");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element PLN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns ID Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IDNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Type of ID Number (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE TypeOfIDNumber {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns State/other Qualifying Information (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOtherQualifyingInformation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT ExpirationDate {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PPN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PPN (Performing Person Time Stamp) data type.  Consists of the following components: </p><ol>
/// <li>Person Identifier (ST)</li>
/// <li>Family Name (FN)</li>
/// <li>Given Name (ST)</li>
/// <li>Second and Further Given Names or Initials Thereof (ST)</li>
/// <li>Suffix (e.g., JR or III) (ST)</li>
/// <li>Prefix (e.g., DR) (ST)</li>
/// <li>Degree (e.g., MD) (-)</li>
/// <li>Source Table (CWE)</li>
/// <li>Assigning Authority (HD)</li>
/// <li>Name Type Code (ID)</li>
/// <li>Identifier Check Digit (ST)</li>
/// <li>Check Digit Scheme (ID)</li>
/// <li>Identifier Type Code (ID)</li>
/// <li>Assigning Facility (HD)</li>
/// <li>Date/Time Action Performed (DTM)</li>
/// <li>Name Representation Code (ID)</li>
/// <li>Name Context (CWE)</li>
/// <li>Name Validity Range (-)</li>
/// <li>Name Assembly Order (ID)</li>
/// <li>Effective Date (DTM)</li>
/// <li>Expiration Date (DTM)</li>
/// <li>Professional Suffix (ST)</li>
/// <li>Assigning Jurisdiction (CWE)</li>
/// <li>Assigning Agency or Department (CWE)</li>
/// <li>Security Check (ST)</li>
/// <li>Security Check Scheme (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class PPN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PPN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PPN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PPN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PPN(IMessage message, string description) : base(message, description){
		data = new IType[26];
		data[0] = new ST(message,"Person Identifier");
		data[1] = new FN(message,"Family Name");
		data[2] = new ST(message,"Given Name");
		data[3] = new ST(message,"Second and Further Given Names or Initials Thereof");
		data[4] = new ST(message,"Suffix (e.g., JR or III)");
		data[5] = new ST(message,"Prefix (e.g., DR)");
		data[6] = new -(message,"Degree (e.g., MD)");
		data[7] = new CWE(message,"Source Table");
		data[8] = new HD(message,"Assigning Authority");
		data[9] = new ID(message, 200,"Name Type Code");
		data[10] = new ST(message,"Identifier Check Digit");
		data[11] = new ID(message, 61,"Check Digit Scheme");
		data[12] = new ID(message, 203,"Identifier Type Code");
		data[13] = new HD(message,"Assigning Facility");
		data[14] = new DTM(message,"Date/Time Action Performed");
		data[15] = new ID(message, 465,"Name Representation Code");
		data[16] = new CWE(message,"Name Context");
		data[17] = new -(message,"Name Validity Range");
		data[18] = new ID(message, 444,"Name Assembly Order");
		data[19] = new DTM(message,"Effective Date");
		data[20] = new DTM(message,"Expiration Date");
		data[21] = new ST(message,"Professional Suffix");
		data[22] = new CWE(message,"Assigning Jurisdiction");
		data[23] = new CWE(message,"Assigning Agency or Department");
		data[24] = new ST(message,"Security Check");
		data[25] = new ID(message, 904,"Security Check Scheme");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 26 element PPN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Person Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PersonIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Family Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FN FamilyName {
get{
	   FN ret = null;
	   try {
	      ret = (FN)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Given Name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second and Further Given Names or Initials Thereof (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAndFurtherGivenNamesOrInitialsThereof {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Suffix (e.g., JR or III) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Prefix (e.g., DR) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Degree (e.g., MD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - DegreeEgMD {
get{
	   - ret = null;
	   try {
	      ret = (-)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Source Table (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE SourceTable {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Type Code (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Check Digit (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IdentifierCheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Check Digit Scheme (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CheckDigitScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Type Code (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID IdentifierTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Facility (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Date/Time Action Performed (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM DateTimeActionPerformed {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Representation Code (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameRepresentationCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Context (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE NameContext {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Validity Range (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - NameValidityRange {
get{
	   - ret = null;
	   try {
	      ret = (-)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Assembly Order (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameAssemblyOrder {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ExpirationDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Professional Suffix (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ProfessionalSuffix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Jurisdiction (component #22).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AssigningJurisdiction {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[22];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Agency or Department (component #23).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AssigningAgencyOrDepartment {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[23];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Security Check (component #24).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecurityCheck {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[24];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Security Check Scheme (component #25).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID SecurityCheckScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[25];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PRL.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PRL (Parent Result Link) data type.  Consists of the following components: </p><ol>
/// <li>Parent Observation Identifier (CWE)</li>
/// <li>Parent Observation Sub-identifier (ST)</li>
/// <li>Parent Observation Value Descriptor (TX)</li>
/// </ol>
///</summary>
[Serializable]
public class PRL : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PRL.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PRL(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PRL.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PRL(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new CWE(message,"Parent Observation Identifier");
		data[1] = new ST(message,"Parent Observation Sub-identifier");
		data[2] = new TX(message,"Parent Observation Value Descriptor");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element PRL composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Parent Observation Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ParentObservationIdentifier {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Parent Observation Sub-identifier (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ParentObservationSubIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Parent Observation Value Descriptor (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX ParentObservationValueDescriptor {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PT (Processing Type) data type.  Consists of the following components: </p><ol>
/// <li>Processing ID (ID)</li>
/// <li>Processing Mode (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class PT : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PT.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PT(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PT.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PT(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ID(message, 103,"Processing ID");
		data[1] = new ID(message, 207,"Processing Mode");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element PT composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Processing ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID ProcessingID {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Processing Mode (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID ProcessingMode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\PTA.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 PTA (Policy Type and Amount) data type.  Consists of the following components: </p><ol>
/// <li>Policy Type (CWE)</li>
/// <li>Amount Class (CWE)</li>
/// <li>Money or Percentage Quantity (-)</li>
/// <li>Money or Percentage (MOP)</li>
/// </ol>
///</summary>
[Serializable]
public class PTA : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a PTA.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public PTA(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a PTA.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public PTA(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new CWE(message,"Policy Type");
		data[1] = new CWE(message,"Amount Class");
		data[2] = new -(message,"Money or Percentage Quantity");
		data[3] = new MOP(message,"Money or Percentage");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element PTA composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Policy Type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE PolicyType {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Amount Class (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AmountClass {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Money or Percentage Quantity (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - MoneyOrPercentageQuantity {
get{
	   - ret = null;
	   try {
	      ret = (-)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Money or Percentage (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MOP MoneyOrPercentage {
get{
	   MOP ret = null;
	   try {
	      ret = (MOP)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\QIP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 QIP (Query Input Parameter List) data type.  Consists of the following components: </p><ol>
/// <li>Segment Field Name (ST)</li>
/// <li>Values (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class QIP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a QIP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public QIP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a QIP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public QIP(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"Segment Field Name");
		data[1] = new ST(message,"Values");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element QIP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Segment Field Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SegmentFieldName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Values (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Values {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\QSC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 QSC (Query Selection Criteria) data type.  Consists of the following components: </p><ol>
/// <li>Segment Field Name (ST)</li>
/// <li>Relational Operator (ID)</li>
/// <li>Value (ST)</li>
/// <li>Relational Conjunction (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class QSC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a QSC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public QSC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a QSC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public QSC(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Segment Field Name");
		data[1] = new ID(message, 209,"Relational Operator");
		data[2] = new ST(message,"Value");
		data[3] = new ID(message, 210,"Relational Conjunction");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element QSC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Segment Field Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SegmentFieldName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Relational Operator (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID RelationalOperator {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Value {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Relational Conjunction (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID RelationalConjunction {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\RCD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 RCD (Row Column Definition) data type.  Consists of the following components: </p><ol>
/// <li>Segment Field Name (ST)</li>
/// <li>HL7 Data Type (ID)</li>
/// <li>Maximum Column Width (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class RCD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RCD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RCD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RCD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RCD(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"Segment Field Name");
		data[1] = new ID(message, 440,"HL7 Data Type");
		data[2] = new NM(message,"Maximum Column Width");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element RCD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Segment Field Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SegmentFieldName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns HL7 Data Type (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID HL7DataType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Maximum Column Width (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM MaximumColumnWidth {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\RFR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 RFR (Reference Range) data type.  Consists of the following components: </p><ol>
/// <li>Numeric Range (NR)</li>
/// <li>Administrative Sex (CWE)</li>
/// <li>Age Range (NR)</li>
/// <li>Gestational Age Range (NR)</li>
/// <li>Species (ST)</li>
/// <li>Race/subspecies (ST)</li>
/// <li>Conditions (TX)</li>
/// </ol>
///</summary>
[Serializable]
public class RFR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RFR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RFR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RFR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RFR(IMessage message, string description) : base(message, description){
		data = new IType[7];
		data[0] = new NR(message,"Numeric Range");
		data[1] = new CWE(message,"Administrative Sex");
		data[2] = new NR(message,"Age Range");
		data[3] = new NR(message,"Gestational Age Range");
		data[4] = new ST(message,"Species");
		data[5] = new ST(message,"Race/subspecies");
		data[6] = new TX(message,"Conditions");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 7 element RFR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Numeric Range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NR NumericRange {
get{
	   NR ret = null;
	   try {
	      ret = (NR)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Administrative Sex (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AdministrativeSex {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Age Range (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NR AgeRange {
get{
	   NR ret = null;
	   try {
	      ret = (NR)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Gestational Age Range (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NR GestationalAgeRange {
get{
	   NR ret = null;
	   try {
	      ret = (NR)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Species (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Species {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Race/subspecies (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST RaceSubspecies {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Conditions (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TX Conditions {
get{
	   TX ret = null;
	   try {
	      ret = (TX)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\RI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 RI (Repeat Interval) data type.  Consists of the following components: </p><ol>
/// <li>Repeat Pattern (CWE)</li>
/// <li>Explicit Time Interval (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class RI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RI(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CWE(message,"Repeat Pattern");
		data[1] = new ST(message,"Explicit Time Interval");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element RI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Repeat Pattern (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE RepeatPattern {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Explicit Time Interval (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ExplicitTimeInterval {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\RMC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 RMC (Room Coverage) data type.  Consists of the following components: </p><ol>
/// <li>Room Type (CWE)</li>
/// <li>Amount Type (CWE)</li>
/// <li>Coverage Amount (-)</li>
/// <li>Money or Percentage (MOP)</li>
/// </ol>
///</summary>
[Serializable]
public class RMC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RMC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RMC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RMC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RMC(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new CWE(message,"Room Type");
		data[1] = new CWE(message,"Amount Type");
		data[2] = new -(message,"Coverage Amount");
		data[3] = new MOP(message,"Money or Percentage");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element RMC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Room Type (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE RoomType {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Amount Type (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AmountType {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Coverage Amount (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - CoverageAmount {
get{
	   - ret = null;
	   try {
	      ret = (-)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Money or Percentage (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MOP MoneyOrPercentage {
get{
	   MOP ret = null;
	   try {
	      ret = (MOP)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\RP.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 RP (Reference Pointer) data type.  Consists of the following components: </p><ol>
/// <li>Pointer (ST)</li>
/// <li>Application ID (HD)</li>
/// <li>Type of Data (ID)</li>
/// <li>Subtype (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class RP : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RP.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RP(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RP.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RP(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Pointer");
		data[1] = new HD(message,"Application ID");
		data[2] = new ID(message, 834,"Type of Data");
		data[3] = new ID(message, 291,"Subtype");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element RP composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Pointer (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Pointer {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Application ID (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD ApplicationID {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Type of Data (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TypeOfData {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Subtype (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Subtype {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\RPT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 RPT (Repeat Pattern) data type.  Consists of the following components: </p><ol>
/// <li>Repeat Pattern Code (CWE)</li>
/// <li>Calendar Alignment (ID)</li>
/// <li>Phase Range Begin Value (NM)</li>
/// <li>Phase Range End Value (NM)</li>
/// <li>Period Quantity (NM)</li>
/// <li>Period Units (CWE)</li>
/// <li>Institution Specified Time (ID)</li>
/// <li>Event (ID)</li>
/// <li>Event Offset Quantity (NM)</li>
/// <li>Event Offset Units (CWE)</li>
/// <li>General Timing Specification (GTS)</li>
/// </ol>
///</summary>
[Serializable]
public class RPT : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a RPT.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public RPT(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a RPT.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public RPT(IMessage message, string description) : base(message, description){
		data = new IType[11];
		data[0] = new CWE(message,"Repeat Pattern Code");
		data[1] = new ID(message, 527,"Calendar Alignment");
		data[2] = new NM(message,"Phase Range Begin Value");
		data[3] = new NM(message,"Phase Range End Value");
		data[4] = new NM(message,"Period Quantity");
		data[5] = new CWE(message,"Period Units");
		data[6] = new ID(message, 136,"Institution Specified Time");
		data[7] = new ID(message, 528,"Event");
		data[8] = new NM(message,"Event Offset Quantity");
		data[9] = new CWE(message,"Event Offset Units");
		data[10] = new GTS(message,"General Timing Specification");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 11 element RPT composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Repeat Pattern Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE RepeatPatternCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Calendar Alignment (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CalendarAlignment {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Phase Range Begin Value (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PhaseRangeBeginValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Phase Range End Value (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PhaseRangeEndValue {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Period Quantity (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PeriodQuantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Period Units (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE PeriodUnits {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Institution Specified Time (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID InstitutionSpecifiedTime {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Event (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Event {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Event Offset Quantity (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM EventOffsetQuantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Event Offset Units (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE EventOffsetUnits {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns General Timing Specification (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public GTS GeneralTimingSpecification {
get{
	   GTS ret = null;
	   try {
	      ret = (GTS)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\SAD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 SAD (Street Address) data type.  Consists of the following components: </p><ol>
/// <li>Street or Mailing Address (ST)</li>
/// <li>Street Name (ST)</li>
/// <li>Dwelling Number (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class SAD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SAD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SAD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SAD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SAD(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ST(message,"Street or Mailing Address");
		data[1] = new ST(message,"Street Name");
		data[2] = new ST(message,"Dwelling Number");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element SAD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Street or Mailing Address (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetOrMailingAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Street Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StreetName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Dwelling Number (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST DwellingNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\SCV.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 SCV (Scheduling Class Value Pair) data type.  Consists of the following components: </p><ol>
/// <li>Parameter Class (CWE)</li>
/// <li>Parameter Value (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class SCV : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SCV.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SCV(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SCV.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SCV(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new CWE(message,"Parameter Class");
		data[1] = new ST(message,"Parameter Value");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element SCV composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Parameter Class (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ParameterClass {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Parameter Value (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ParameterValue {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\SI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V27.Datatype
{
///<summary>
///Represents the HL7 SI (Sequence ID) datatype.  A SI contains a single String value.
///</summary>
[Serializable]
public class SI : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized SI.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SI(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized SI.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public SI(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.7"
	///</summary>
	public string getVersion() {
	    return "2.7";
}
}
},
  basepath\\NHapi.Model.V27\\Datatype\\SN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 SN (Structured Numeric) data type.  Consists of the following components: </p><ol>
/// <li>Comparator (ST)</li>
/// <li>Num1 (NM)</li>
/// <li>Separator/Suffix (ST)</li>
/// <li>Num2 (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class SN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SN(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Comparator");
		data[1] = new NM(message,"Num1");
		data[2] = new ST(message,"Separator/Suffix");
		data[3] = new NM(message,"Num2");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element SN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Comparator (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Comparator {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Num1 (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Num1 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Separator/Suffix (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SeparatorSuffix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Num2 (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM Num2 {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\SPD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 SPD (Specialty Description) data type.  Consists of the following components: </p><ol>
/// <li>Specialty Name (ST)</li>
/// <li>Governing Board (ST)</li>
/// <li>Eligible or Certified (ID)</li>
/// <li>Date of Certification (DT)</li>
/// </ol>
///</summary>
[Serializable]
public class SPD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SPD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SPD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SPD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SPD(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ST(message,"Specialty Name");
		data[1] = new ST(message,"Governing Board");
		data[2] = new ID(message, 337,"Eligible or Certified");
		data[3] = new DT(message,"Date of Certification");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element SPD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Specialty Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SpecialtyName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Governing Board (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GoverningBoard {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Eligible or Certified (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID EligibleOrCertified {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Date of Certification (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DT DateOfCertification {
get{
	   DT ret = null;
	   try {
	      ret = (DT)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\SRT.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 SRT (Sort Order) data type.  Consists of the following components: </p><ol>
/// <li>Sort-by Field (ST)</li>
/// <li>Sequencing (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class SRT : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a SRT.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public SRT(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a SRT.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public SRT(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"Sort-by Field");
		data[1] = new ID(message, 397,"Sequencing");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element SRT composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Sort-by Field (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SortByField {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Sequencing (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Sequencing {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\ST.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V27.Datatype
{
///<summary>
///Represents the HL7 ST (String Data) datatype.  A ST contains a single String value.
///</summary>
[Serializable]
public class ST : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized ST.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public ST(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized ST.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public ST(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.7"
	///</summary>
	public string getVersion() {
	    return "2.7";
}
}
},
  basepath\\NHapi.Model.V27\\Datatype\\TX.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base;
using NHapi.Base.Model.Primitive;
namespace NHapi.Model.V27.Datatype
{
///<summary>
///Represents the HL7 TX (Text Data) datatype.  A TX contains a single String value.
///</summary>
[Serializable]
public class TX : AbstractPrimitive  {

	///<summary>
	///Constructs an uninitialized TX.
	///<param name="message">The Message to which this Type belongs</param>
	///</summary>
	public TX(IMessage message) : base(message){
	}

	///<summary>
	///Constructs an uninitialized TX.
	///<param name="message">The Message to which this Type belongs</param>
	///<param name="description">The description of this type</param>
	///</summary>
	public TX(IMessage message, string description) : base(message,description){
	}

	///<summary>
	///  @return "2.7"
	///</summary>
	public string getVersion() {
	    return "2.7";
}
}
},
  basepath\\NHapi.Model.V27\\Datatype\\UVC.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 UVC (UB Value Code and Amount) data type.  Consists of the following components: </p><ol>
/// <li>Value Code (CWE)</li>
/// <li>Value Amount (MO)</li>
/// <li>Non-Monetary Value Amount / Quantity (NM)</li>
/// <li>Non-Monetary Value Amount / Units (CWE)</li>
/// </ol>
///</summary>
[Serializable]
public class UVC : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a UVC.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public UVC(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a UVC.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public UVC(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new CWE(message,"Value Code");
		data[1] = new MO(message,"Value Amount");
		data[2] = new NM(message,"Non-Monetary Value Amount / Quantity");
		data[3] = new CWE(message,"Non-Monetary Value Amount / Units");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element UVC composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Value Code (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ValueCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Value Amount (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public MO ValueAmount {
get{
	   MO ret = null;
	   try {
	      ret = (MO)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Non-Monetary Value Amount / Quantity (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM NonMonetaryValueAmountQuantity {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Non-Monetary Value Amount / Units (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE NonMonetaryValueAmountUnits {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\VH.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 VH (Visiting Hours) data type.  Consists of the following components: </p><ol>
/// <li>Start Day Range (ID)</li>
/// <li>End Day Range (ID)</li>
/// <li>Start Hour Range (TM)</li>
/// <li>End Hour Range (TM)</li>
/// </ol>
///</summary>
[Serializable]
public class VH : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a VH.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public VH(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a VH.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public VH(IMessage message, string description) : base(message, description){
		data = new IType[4];
		data[0] = new ID(message, 267,"Start Day Range");
		data[1] = new ID(message, 267,"End Day Range");
		data[2] = new TM(message,"Start Hour Range");
		data[3] = new TM(message,"End Hour Range");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 4 element VH composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Start Day Range (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID StartDayRange {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns End Day Range (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID EndDayRange {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Start Hour Range (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TM StartHourRange {
get{
	   TM ret = null;
	   try {
	      ret = (TM)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns End Hour Range (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public TM EndHourRange {
get{
	   TM ret = null;
	   try {
	      ret = (TM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\VID.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 VID (Version Identifier) data type.  Consists of the following components: </p><ol>
/// <li>Version ID (ID)</li>
/// <li>Internationalization Code (CWE)</li>
/// <li>International Version ID (CWE)</li>
/// </ol>
///</summary>
[Serializable]
public class VID : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a VID.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public VID(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a VID.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public VID(IMessage message, string description) : base(message, description){
		data = new IType[3];
		data[0] = new ID(message, 104,"Version ID");
		data[1] = new CWE(message,"Internationalization Code");
		data[2] = new CWE(message,"International Version ID");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 3 element VID composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Version ID (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID VersionID {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Internationalization Code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE InternationalizationCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns International Version ID (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE InternationalVersionID {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\VR.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 VR (Value Range) data type.  Consists of the following components: </p><ol>
/// <li>First Data Code Value (ST)</li>
/// <li>Last Data Code Value (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class VR : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a VR.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public VR(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a VR.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public VR(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"First Data Code Value");
		data[1] = new ST(message,"Last Data Code Value");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element VR composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns First Data Code Value (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST FirstDataCodeValue {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Last Data Code Value (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST LastDataCodeValue {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\WVI.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 WVI (Channel Identifier) data type.  Consists of the following components: </p><ol>
/// <li>Channel Number (NM)</li>
/// <li>Channel Name (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class WVI : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a WVI.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public WVI(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a WVI.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public WVI(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new NM(message,"Channel Number");
		data[1] = new ST(message,"Channel Name");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element WVI composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Channel Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM ChannelNumber {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Channel Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ChannelName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\WVS.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 WVS (Waveform Source) data type.  Consists of the following components: </p><ol>
/// <li>Source One Name (ST)</li>
/// <li>Source Two Name (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class WVS : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a WVS.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public WVS(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a WVS.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public WVS(IMessage message, string description) : base(message, description){
		data = new IType[2];
		data[0] = new ST(message,"Source One Name");
		data[1] = new ST(message,"Source Two Name");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 2 element WVS composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Source One Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SourceOneName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Source Two Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SourceTwoName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\XAD.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 XAD (Extended Address) data type.  Consists of the following components: </p><ol>
/// <li>Street Address (SAD)</li>
/// <li>Other Designation (ST)</li>
/// <li>City (ST)</li>
/// <li>State or Province (ST)</li>
/// <li>Zip or Postal Code (ST)</li>
/// <li>Country (ID)</li>
/// <li>Address Type (ID)</li>
/// <li>Other Geographic Designation (ST)</li>
/// <li>County/Parish Code (CWE)</li>
/// <li>Census Tract (CWE)</li>
/// <li>Address Representation Code (ID)</li>
/// <li>Address Validity Range (-)</li>
/// <li>Effective Date (DTM)</li>
/// <li>Expiration Date (DTM)</li>
/// <li>Expiration Reason (CWE)</li>
/// <li>Temporary Indicator (ID)</li>
/// <li>Bad Address Indicator (ID)</li>
/// <li>Address Usage (ID)</li>
/// <li>Addressee (ST)</li>
/// <li>Comment (ST)</li>
/// <li>Preference Order (NM)</li>
/// <li>Protection Code (CWE)</li>
/// <li>Address Identifier (EI)</li>
/// </ol>
///</summary>
[Serializable]
public class XAD : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XAD.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XAD(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XAD.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XAD(IMessage message, string description) : base(message, description){
		data = new IType[23];
		data[0] = new SAD(message,"Street Address");
		data[1] = new ST(message,"Other Designation");
		data[2] = new ST(message,"City");
		data[3] = new ST(message,"State or Province");
		data[4] = new ST(message,"Zip or Postal Code");
		data[5] = new ID(message, 399,"Country");
		data[6] = new ID(message, 190,"Address Type");
		data[7] = new ST(message,"Other Geographic Designation");
		data[8] = new CWE(message,"County/Parish Code");
		data[9] = new CWE(message,"Census Tract");
		data[10] = new ID(message, 465,"Address Representation Code");
		data[11] = new -(message,"Address Validity Range");
		data[12] = new DTM(message,"Effective Date");
		data[13] = new DTM(message,"Expiration Date");
		data[14] = new CWE(message,"Expiration Reason");
		data[15] = new ID(message, 136,"Temporary Indicator");
		data[16] = new ID(message, 136,"Bad Address Indicator");
		data[17] = new ID(message, 617,"Address Usage");
		data[18] = new ST(message,"Addressee");
		data[19] = new ST(message,"Comment");
		data[20] = new NM(message,"Preference Order");
		data[21] = new CWE(message,"Protection Code");
		data[22] = new EI(message,"Address Identifier");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 23 element XAD composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Street Address (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public SAD StreetAddress {
get{
	   SAD ret = null;
	   try {
	      ret = (SAD)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Other Designation (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns City (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST City {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns State or Province (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST StateOrProvince {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Zip or Postal Code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ZipOrPostalCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Country (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID Country {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Type (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Other Geographic Designation (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OtherGeographicDesignation {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns County/Parish Code (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE CountyParishCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Census Tract (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE CensusTract {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Representation Code (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressRepresentationCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Validity Range (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - AddressValidityRange {
get{
	   - ret = null;
	   try {
	      ret = (-)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ExpirationDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Reason (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ExpirationReason {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Temporary Indicator (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TemporaryIndicator {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Bad Address Indicator (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID BadAddressIndicator {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Usage (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID AddressUsage {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Addressee (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Addressee {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Comment (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST Comment {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Preference Order (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PreferenceOrder {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Protection Code (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ProtectionCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Address Identifier (component #22).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI AddressIdentifier {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[22];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\XCN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 XCN (Extended Composite ID Number and Name for Persons) data type.  Consists of the following components: </p><ol>
/// <li>Person Identifier (ST)</li>
/// <li>Family Name (FN)</li>
/// <li>Given Name (ST)</li>
/// <li>Second and Further Given Names or Initials Thereof (ST)</li>
/// <li>Suffix (e.g., JR or III) (ST)</li>
/// <li>Prefix (e.g., DR) (ST)</li>
/// <li>Degree (e.g., MD) (-)</li>
/// <li>Source Table (CWE)</li>
/// <li>Assigning Authority (HD)</li>
/// <li>Name Type Code (ID)</li>
/// <li>Identifier Check Digit (ST)</li>
/// <li>Check Digit Scheme (ID)</li>
/// <li>Identifier Type Code (ID)</li>
/// <li>Assigning Facility (HD)</li>
/// <li>Name Representation Code (ID)</li>
/// <li>Name Context (CWE)</li>
/// <li>Name Validity Range (-)</li>
/// <li>Name Assembly Order (ID)</li>
/// <li>Effective Date (DTM)</li>
/// <li>Expiration Date (DTM)</li>
/// <li>Professional Suffix (ST)</li>
/// <li>Assigning Jurisdiction (CWE)</li>
/// <li>Assigning Agency or Department (CWE)</li>
/// <li>Security Check (ST)</li>
/// <li>Security Check Scheme (ID)</li>
/// </ol>
///</summary>
[Serializable]
public class XCN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XCN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XCN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XCN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XCN(IMessage message, string description) : base(message, description){
		data = new IType[25];
		data[0] = new ST(message,"Person Identifier");
		data[1] = new FN(message,"Family Name");
		data[2] = new ST(message,"Given Name");
		data[3] = new ST(message,"Second and Further Given Names or Initials Thereof");
		data[4] = new ST(message,"Suffix (e.g., JR or III)");
		data[5] = new ST(message,"Prefix (e.g., DR)");
		data[6] = new -(message,"Degree (e.g., MD)");
		data[7] = new CWE(message,"Source Table");
		data[8] = new HD(message,"Assigning Authority");
		data[9] = new ID(message, 200,"Name Type Code");
		data[10] = new ST(message,"Identifier Check Digit");
		data[11] = new ID(message, 61,"Check Digit Scheme");
		data[12] = new ID(message, 203,"Identifier Type Code");
		data[13] = new HD(message,"Assigning Facility");
		data[14] = new ID(message, 465,"Name Representation Code");
		data[15] = new CWE(message,"Name Context");
		data[16] = new -(message,"Name Validity Range");
		data[17] = new ID(message, 444,"Name Assembly Order");
		data[18] = new DTM(message,"Effective Date");
		data[19] = new DTM(message,"Expiration Date");
		data[20] = new ST(message,"Professional Suffix");
		data[21] = new CWE(message,"Assigning Jurisdiction");
		data[22] = new CWE(message,"Assigning Agency or Department");
		data[23] = new ST(message,"Security Check");
		data[24] = new ID(message, 904,"Security Check Scheme");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 25 element XCN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Person Identifier (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PersonIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Family Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FN FamilyName {
get{
	   FN ret = null;
	   try {
	      ret = (FN)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Given Name (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second and Further Given Names or Initials Thereof (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAndFurtherGivenNamesOrInitialsThereof {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Suffix (e.g., JR or III) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Prefix (e.g., DR) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Degree (e.g., MD) (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - DegreeEgMD {
get{
	   - ret = null;
	   try {
	      ret = (-)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Source Table (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE SourceTable {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Type Code (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Check Digit (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST IdentifierCheckDigit {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Check Digit Scheme (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CheckDigitScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Type Code (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID IdentifierTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Facility (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Representation Code (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameRepresentationCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Context (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE NameContext {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Validity Range (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - NameValidityRange {
get{
	   - ret = null;
	   try {
	      ret = (-)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Assembly Order (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameAssemblyOrder {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #18).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[18];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #19).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ExpirationDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[19];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Professional Suffix (component #20).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ProfessionalSuffix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[20];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Jurisdiction (component #21).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AssigningJurisdiction {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[21];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Agency or Department (component #22).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE AssigningAgencyOrDepartment {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[22];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Security Check (component #23).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecurityCheck {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[23];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Security Check Scheme (component #24).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID SecurityCheckScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[24];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\XON.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 XON (Extended Composite Name and Identification Number for Organizations) data type.  Consists of the following components: </p><ol>
/// <li>Organization Name (ST)</li>
/// <li>Organization Name Type Code (CWE)</li>
/// <li>ID Number (-)</li>
/// <li>Identifier Check Digit (NM)</li>
/// <li>Check Digit Scheme (ID)</li>
/// <li>Assigning Authority (HD)</li>
/// <li>Identifier Type Code (ID)</li>
/// <li>Assigning Facility (HD)</li>
/// <li>Name Representation Code (ID)</li>
/// <li>Organization Identifier (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class XON : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XON.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XON(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XON.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XON(IMessage message, string description) : base(message, description){
		data = new IType[10];
		data[0] = new ST(message,"Organization Name");
		data[1] = new CWE(message,"Organization Name Type Code");
		data[2] = new -(message,"ID Number");
		data[3] = new NM(message,"Identifier Check Digit");
		data[4] = new ID(message, 61,"Check Digit Scheme");
		data[5] = new HD(message,"Assigning Authority");
		data[6] = new ID(message, 203,"Identifier Type Code");
		data[7] = new HD(message,"Assigning Facility");
		data[8] = new ID(message, 465,"Name Representation Code");
		data[9] = new ST(message,"Organization Identifier");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 10 element XON composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Organization Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OrganizationName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Organization Name Type Code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE OrganizationNameTypeCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns ID Number (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - IDNumber {
get{
	   - ret = null;
	   try {
	      ret = (-)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Check Digit (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM IdentifierCheckDigit {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Check Digit Scheme (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID CheckDigitScheme {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Authority (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningAuthority {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Identifier Type Code (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID IdentifierTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Assigning Facility (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public HD AssigningFacility {
get{
	   HD ret = null;
	   try {
	      ret = (HD)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Representation Code (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameRepresentationCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Organization Identifier (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST OrganizationIdentifier {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\XPN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 XPN (Extended Person Name) data type.  Consists of the following components: </p><ol>
/// <li>Family Name (FN)</li>
/// <li>Given Name (ST)</li>
/// <li>Second and Further Given Names or Initials Thereof (ST)</li>
/// <li>Suffix (e.g., JR or III) (ST)</li>
/// <li>Prefix (e.g., DR) (ST)</li>
/// <li>Degree (e.g., MD) (-)</li>
/// <li>Name Type Code (ID)</li>
/// <li>Name Representation Code (ID)</li>
/// <li>Name Context (CWE)</li>
/// <li>Name Validity Range (-)</li>
/// <li>Name Assembly Order (ID)</li>
/// <li>Effective Date (DTM)</li>
/// <li>Expiration Date (DTM)</li>
/// <li>Professional Suffix (ST)</li>
/// <li>Called By (ST)</li>
/// </ol>
///</summary>
[Serializable]
public class XPN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XPN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XPN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XPN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XPN(IMessage message, string description) : base(message, description){
		data = new IType[15];
		data[0] = new FN(message,"Family Name");
		data[1] = new ST(message,"Given Name");
		data[2] = new ST(message,"Second and Further Given Names or Initials Thereof");
		data[3] = new ST(message,"Suffix (e.g., JR or III)");
		data[4] = new ST(message,"Prefix (e.g., DR)");
		data[5] = new -(message,"Degree (e.g., MD)");
		data[6] = new ID(message, 200,"Name Type Code");
		data[7] = new ID(message, 465,"Name Representation Code");
		data[8] = new CWE(message,"Name Context");
		data[9] = new -(message,"Name Validity Range");
		data[10] = new ID(message, 444,"Name Assembly Order");
		data[11] = new DTM(message,"Effective Date");
		data[12] = new DTM(message,"Expiration Date");
		data[13] = new ST(message,"Professional Suffix");
		data[14] = new ST(message,"Called By");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 15 element XPN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Family Name (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public FN FamilyName {
get{
	   FN ret = null;
	   try {
	      ret = (FN)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Given Name (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST GivenName {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Second and Further Given Names or Initials Thereof (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SecondAndFurtherGivenNamesOrInitialsThereof {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Suffix (e.g., JR or III) (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SuffixEgJRorIII {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Prefix (e.g., DR) (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST PrefixEgDR {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Degree (e.g., MD) (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - DegreeEgMD {
get{
	   - ret = null;
	   try {
	      ret = (-)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Type Code (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameTypeCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Representation Code (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameRepresentationCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Context (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE NameContext {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Validity Range (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - NameValidityRange {
get{
	   - ret = null;
	   try {
	      ret = (-)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Name Assembly Order (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID NameAssemblyOrder {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Date (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ExpirationDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Professional Suffix (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ProfessionalSuffix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Called By (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CalledBy {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}},
  basepath\\NHapi.Model.V27\\Datatype\\XTN.cs:
using System;
using NHapi.Base.Model;
using NHapi.Base.Log;
using NHapi.Base;
using NHapi.Base.Model.Primitive;

namespace NHapi.Model.V27.Datatype
{

///<summary>
/// <p>The HL7 XTN (Extended Telecommunication Number) data type.  Consists of the following components: </p><ol>
/// <li>Telephone Number (-)</li>
/// <li>Telecommunication Use Code (ID)</li>
/// <li>Telecommunication Equipment Type (ID)</li>
/// <li>Communication Address (ST)</li>
/// <li>Country Code (SNM)</li>
/// <li>Area/City Code (SNM)</li>
/// <li>Local Number (SNM)</li>
/// <li>Extension (SNM)</li>
/// <li>Any Text (ST)</li>
/// <li>Extension Prefix (ST)</li>
/// <li>Speed Dial Code (ST)</li>
/// <li>Unformatted Telephone number (ST)</li>
/// <li>Effective Start Date (DTM)</li>
/// <li>Expiration Date (DTM)</li>
/// <li>Expiration Reason (CWE)</li>
/// <li>Protection Code (CWE)</li>
/// <li>Shared Telecommunication Identifier (EI)</li>
/// <li>Preference Order (NM)</li>
/// </ol>
///</summary>
[Serializable]
public class XTN : AbstractType, IComposite{
	private IType[] data;

	///<summary>
	/// Creates a XTN.
	/// <param name="message">The Message to which this Type belongs</param>
	///</summary>
	public XTN(IMessage message) : this(message, null){}

	///<summary>
	/// Creates a XTN.
	/// <param name="message">The Message to which this Type belongs</param>
	/// <param name="description">The description of this type</param>
	///</summary>
	public XTN(IMessage message, string description) : base(message, description){
		data = new IType[18];
		data[0] = new -(message,"Telephone Number");
		data[1] = new ID(message, 201,"Telecommunication Use Code");
		data[2] = new ID(message, 202,"Telecommunication Equipment Type");
		data[3] = new ST(message,"Communication Address");
		data[4] = new SNM(message,"Country Code");
		data[5] = new SNM(message,"Area/City Code");
		data[6] = new SNM(message,"Local Number");
		data[7] = new SNM(message,"Extension");
		data[8] = new ST(message,"Any Text");
		data[9] = new ST(message,"Extension Prefix");
		data[10] = new ST(message,"Speed Dial Code");
		data[11] = new ST(message,"Unformatted Telephone number");
		data[12] = new DTM(message,"Effective Start Date");
		data[13] = new DTM(message,"Expiration Date");
		data[14] = new CWE(message,"Expiration Reason");
		data[15] = new CWE(message,"Protection Code");
		data[16] = new EI(message,"Shared Telecommunication Identifier");
		data[17] = new NM(message,"Preference Order");
	}

	///<summary>
	/// Returns an array containing the data elements.
	///</summary>
	public IType[] Components
	{ 
		get{
			return this.data; 
		}
	}

	///<summary>
	/// Returns an individual data component.
	/// @throws DataTypeException if the given element number is out of range.
	///<param name="index">The index item to get (zero based)</param>
	///<returns>The data component (as a type) at the requested number (ordinal)</returns>
	///</summary>
	public IType this[int index] { 

get{
		try { 
			return this.data[index]; 
		} catch (System.ArgumentOutOfRangeException) { 
			throw new DataTypeException("Element " + index + " doesn't exist in 18 element XTN composite"); 
		} 
	} 
	} 
	///<summary>
	/// Returns Telephone Number (component #0).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public - TelephoneNumber {
get{
	   - ret = null;
	   try {
	      ret = (-)this[0];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Telecommunication Use Code (component #1).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TelecommunicationUseCode {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[1];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Telecommunication Equipment Type (component #2).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ID TelecommunicationEquipmentType {
get{
	   ID ret = null;
	   try {
	      ret = (ID)this[2];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Communication Address (component #3).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST CommunicationAddress {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[3];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Country Code (component #4).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public SNM CountryCode {
get{
	   SNM ret = null;
	   try {
	      ret = (SNM)this[4];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Area/City Code (component #5).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public SNM AreaCityCode {
get{
	   SNM ret = null;
	   try {
	      ret = (SNM)this[5];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Local Number (component #6).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public SNM LocalNumber {
get{
	   SNM ret = null;
	   try {
	      ret = (SNM)this[6];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Extension (component #7).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public SNM Extension {
get{
	   SNM ret = null;
	   try {
	      ret = (SNM)this[7];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Any Text (component #8).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST AnyText {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[8];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Extension Prefix (component #9).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST ExtensionPrefix {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[9];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Speed Dial Code (component #10).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST SpeedDialCode {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[10];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Unformatted Telephone number (component #11).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public ST UnformattedTelephoneNumber {
get{
	   ST ret = null;
	   try {
	      ret = (ST)this[11];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Effective Start Date (component #12).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM EffectiveStartDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[12];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Date (component #13).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public DTM ExpirationDate {
get{
	   DTM ret = null;
	   try {
	      ret = (DTM)this[13];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Expiration Reason (component #14).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ExpirationReason {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[14];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Protection Code (component #15).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public CWE ProtectionCode {
get{
	   CWE ret = null;
	   try {
	      ret = (CWE)this[15];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Shared Telecommunication Identifier (component #16).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public EI SharedTelecommunicationIdentifier {
get{
	   EI ret = null;
	   try {
	      ret = (EI)this[16];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
	///<summary>
	/// Returns Preference Order (component #17).  This is a convenience method that saves you from 
	/// casting and handling an exception.
	///</summary>
	public NM PreferenceOrder {
get{
	   NM ret = null;
	   try {
	      ret = (NM)this[17];
	   } catch (DataTypeException e) {
	      HapiLogFactory.GetHapiLog(this.GetType()).Error("Unexpected problem accessing known data type component - this is a bug.", e);
	      throw new System.Exception("An unexpected error occurred",e);
	   }
	   return ret;
}

}
}}
}